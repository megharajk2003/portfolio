{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# FlowCV - Portfolio and Learning Management System\n\n## Overview\n\nFlowCV is a comprehensive portfolio and career development platform that combines portfolio management with gamified learning experiences. The application allows users to create and manage professional portfolios while progressing through skill-building modules to earn experience points (XP) and track their learning journey.\n\nThe system serves both personal portfolio management and public portfolio showcase needs, featuring sections for work experience, education, skills, projects, and certifications, all with customizable visibility settings.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React with TypeScript**: Modern component-based UI using functional components and hooks\n- **Vite**: Fast development server and build tool with hot module replacement\n- **Wouter**: Lightweight client-side routing library for navigation\n- **TanStack Query**: Server state management for API data fetching, caching, and synchronization\n- **Shadcn/ui Components**: Pre-built accessible UI components based on Radix UI primitives\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens and dark mode support\n\n### Backend Architecture\n- **Express.js**: RESTful API server with TypeScript support\n- **In-Memory Storage**: Currently using an in-memory storage interface with plans for database integration\n- **Modular Route Structure**: Organized API endpoints for authentication, profiles, and portfolio sections\n- **Middleware Integration**: Request logging, JSON parsing, and error handling\n\n### Data Storage Solutions\n- **Drizzle ORM**: Type-safe database ORM configured for PostgreSQL\n- **Schema-First Design**: Centralized database schema with Zod validation\n- **Migration Support**: Database versioning through Drizzle Kit\n- **Prepared for Neon Database**: Configuration ready for serverless PostgreSQL deployment\n\n### Authentication and Authorization\n- **Basic Authentication**: Email/password login system\n- **Session-Based**: User sessions managed through the application state\n- **Profile-Based Access**: User-specific data access patterns\n\n### Gamification System\n- **XP Tracking**: Experience points system for learning activities\n- **Learning Modules**: Structured educational content with progress tracking\n- **Achievement System**: Badges and certifications for completed milestones\n- **Activity Calendar**: Visual representation of daily learning engagement\n- **Streak Tracking**: Consecutive day learning motivation system\n\n### Portfolio Management\n- **Section-Based Organization**: Modular portfolio sections (experience, education, skills, projects, certifications)\n- **Visibility Controls**: Per-section visibility settings for public portfolios\n- **Theme Support**: Customizable portfolio themes and layouts\n- **PDF Export**: Resume generation functionality for traditional formats\n- **Public Portfolio URLs**: Shareable portfolio links with custom usernames\n\n## External Dependencies\n\n### UI and Styling\n- **Radix UI**: Accessible component primitives for complex UI elements\n- **Tailwind CSS**: Utility-first styling with custom color schemes and responsive design\n- **Lucide React**: Icon library for consistent visual elements\n- **Class Variance Authority**: Type-safe CSS class composition\n\n### Data Management\n- **Drizzle ORM**: Database toolkit with TypeScript integration\n- **Drizzle Zod**: Schema validation and type inference\n- **@neondatabase/serverless**: Serverless PostgreSQL database driver\n\n### Development and Build Tools\n- **Vite**: Build tool with development server and optimization\n- **TypeScript**: Static type checking and enhanced developer experience\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **PostCSS**: CSS processing with Tailwind CSS integration\n\n### Form and Date Handling\n- **React Hook Form**: Form state management with validation\n- **@hookform/resolvers**: Validation resolvers for form schemas\n- **Date-fns**: Date manipulation and formatting utilities\n\n### State Management and APIs\n- **TanStack React Query**: Server state management and caching\n- **Wouter**: Lightweight routing solution\n- **Express**: Node.js web framework for API development\n\n### Database and Session Management\n- **connect-pg-simple**: PostgreSQL session store integration\n- **Crypto**: Built-in Node.js module for UUID generation and security\n\n### Development Environment\n- **Replit Integration**: Development environment optimizations and tooling\n- **Runtime Error Overlay**: Enhanced error reporting for development\n- **Cartographer Plugin**: Replit-specific development enhancements","size_bytes":4702},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        success: {\n          DEFAULT: \"var(--success)\",\n          foreground: \"var(--success-foreground)\",\n        },\n        warning: {\n          DEFAULT: \"var(--warning)\",\n          foreground: \"var(--warning-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\", \"Inter\", \"system-ui\", \"sans-serif\"],\n        serif: [\"var(--font-serif)\", \"Georgia\", \"serif\"],\n        mono: [\"var(--font-mono)\", \"Fira Code\", \"monospace\"],\n        inter: [\"Inter\", \"system-ui\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"fade-in\": {\n          from: {\n            opacity: \"0\",\n          },\n          to: {\n            opacity: \"1\",\n          },\n        },\n        \"slide-up\": {\n          from: {\n            transform: \"translateY(10px)\",\n            opacity: \"0\",\n          },\n          to: {\n            transform: \"translateY(0)\",\n            opacity: \"1\",\n          },\n        },\n        \"pulse-slow\": {\n          \"0%, 100%\": {\n            opacity: \"1\",\n          },\n          \"50%\": {\n            opacity: \"0.5\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fade-in 0.5s ease-in-out\",\n        \"slide-up\": \"slide-up 0.3s ease-out\",\n        \"pulse-slow\": \"pulse-slow 3s infinite\",\n      },\n      boxShadow: {\n        'primary': '0 4px 14px 0 rgba(79, 70, 229, 0.15)',\n        'success': '0 4px 14px 0 rgba(16, 185, 129, 0.15)',\n        'warning': '0 4px 14px 0 rgba(245, 158, 11, 0.15)',\n      },\n      backgroundImage: {\n        'gradient-primary': 'linear-gradient(135deg, rgb(79, 70, 229), rgb(124, 58, 237))',\n        'gradient-success': 'linear-gradient(135deg, rgb(16, 185, 129), rgb(34, 197, 94))',\n        'gradient-warning': 'linear-gradient(135deg, rgb(245, 158, 11), rgb(251, 191, 36))',\n      },\n      backdropBlur: {\n        xs: '2px',\n      },\n    },\n  },\n  plugins: [\n    require(\"tailwindcss-animate\"), \n    require(\"@tailwindcss/typography\"),\n  ],\n} satisfies Config;\n","size_bytes":3955},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertUserSchema, insertProfileSchema, insertWorkExperienceSchema,\n  insertEducationSchema, insertSkillSchema, insertProjectSchema,\n  insertCertificationSchema, insertAchievementSchema, insertUserProgressSchema,\n  insertDailyActivitySchema, insertSectionSettingsSchema\n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists\" });\n      }\n      const user = await storage.createUser(userData);\n      res.json({ id: user.id, username: user.username, email: user.email });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid user data\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      const user = await storage.getUserByEmail(email);\n      if (!user || user.password !== password) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n      res.json({ id: user.id, username: user.username, email: user.email });\n    } catch (error) {\n      res.status(400).json({ message: \"Login failed\" });\n    }\n  });\n\n  // Profile routes\n  app.get(\"/api/profile/:userId\", async (req, res) => {\n    try {\n      const profile = await storage.getProfile(req.params.userId);\n      if (!profile) {\n        return res.status(404).json({ message: \"Profile not found\" });\n      }\n      res.json(profile);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch profile\" });\n    }\n  });\n\n  app.post(\"/api/profile\", async (req, res) => {\n    try {\n      const profileData = insertProfileSchema.parse(req.body);\n      const profile = await storage.createProfile(profileData);\n      res.json(profile);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid profile data\" });\n    }\n  });\n\n  app.patch(\"/api/profile/:userId\", async (req, res) => {\n    try {\n      const profile = await storage.updateProfile(req.params.userId, req.body);\n      if (!profile) {\n        return res.status(404).json({ message: \"Profile not found\" });\n      }\n      res.json(profile);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update profile\" });\n    }\n  });\n\n  // Work Experience routes\n  app.get(\"/api/work-experience/:userId\", async (req, res) => {\n    try {\n      const experiences = await storage.getWorkExperience(req.params.userId);\n      res.json(experiences);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch work experience\" });\n    }\n  });\n\n  app.post(\"/api/work-experience\", async (req, res) => {\n    try {\n      const experienceData = insertWorkExperienceSchema.parse(req.body);\n      const experience = await storage.createWorkExperience(experienceData);\n      res.json(experience);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid work experience data\" });\n    }\n  });\n\n  app.patch(\"/api/work-experience/:id\", async (req, res) => {\n    try {\n      const experience = await storage.updateWorkExperience(req.params.id, req.body);\n      if (!experience) {\n        return res.status(404).json({ message: \"Work experience not found\" });\n      }\n      res.json(experience);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update work experience\" });\n    }\n  });\n\n  app.delete(\"/api/work-experience/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteWorkExperience(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Work experience not found\" });\n      }\n      res.json({ message: \"Work experience deleted\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete work experience\" });\n    }\n  });\n\n  // Education routes\n  app.get(\"/api/education/:userId\", async (req, res) => {\n    try {\n      const education = await storage.getEducation(req.params.userId);\n      res.json(education);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch education\" });\n    }\n  });\n\n  app.post(\"/api/education\", async (req, res) => {\n    try {\n      const educationData = insertEducationSchema.parse(req.body);\n      const education = await storage.createEducation(educationData);\n      res.json(education);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid education data\" });\n    }\n  });\n\n  app.patch(\"/api/education/:id\", async (req, res) => {\n    try {\n      const education = await storage.updateEducation(req.params.id, req.body);\n      if (!education) {\n        return res.status(404).json({ message: \"Education not found\" });\n      }\n      res.json(education);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update education\" });\n    }\n  });\n\n  app.delete(\"/api/education/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteEducation(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Education not found\" });\n      }\n      res.json({ message: \"Education deleted\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete education\" });\n    }\n  });\n\n  // Skills routes\n  app.get(\"/api/skills/:userId\", async (req, res) => {\n    try {\n      const skills = await storage.getSkills(req.params.userId);\n      res.json(skills);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch skills\" });\n    }\n  });\n\n  app.post(\"/api/skills\", async (req, res) => {\n    try {\n      const skillData = insertSkillSchema.parse(req.body);\n      const skill = await storage.createSkill(skillData);\n      res.json(skill);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid skill data\" });\n    }\n  });\n\n  app.patch(\"/api/skills/:id\", async (req, res) => {\n    try {\n      const skill = await storage.updateSkill(req.params.id, req.body);\n      if (!skill) {\n        return res.status(404).json({ message: \"Skill not found\" });\n      }\n      res.json(skill);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update skill\" });\n    }\n  });\n\n  app.delete(\"/api/skills/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteSkill(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Skill not found\" });\n      }\n      res.json({ message: \"Skill deleted\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete skill\" });\n    }\n  });\n\n  // Projects routes\n  app.get(\"/api/projects/:userId\", async (req, res) => {\n    try {\n      const projects = await storage.getProjects(req.params.userId);\n      res.json(projects);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch projects\" });\n    }\n  });\n\n  app.post(\"/api/projects\", async (req, res) => {\n    try {\n      const projectData = insertProjectSchema.parse(req.body);\n      const project = await storage.createProject(projectData);\n      res.json(project);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid project data\" });\n    }\n  });\n\n  app.patch(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const project = await storage.updateProject(req.params.id, req.body);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      res.json(project);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update project\" });\n    }\n  });\n\n  app.delete(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteProject(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      res.json({ message: \"Project deleted\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete project\" });\n    }\n  });\n\n  // Certifications routes\n  app.get(\"/api/certifications/:userId\", async (req, res) => {\n    try {\n      const certifications = await storage.getCertifications(req.params.userId);\n      res.json(certifications);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch certifications\" });\n    }\n  });\n\n  app.post(\"/api/certifications\", async (req, res) => {\n    try {\n      const certificationData = insertCertificationSchema.parse(req.body);\n      const certification = await storage.createCertification(certificationData);\n      res.json(certification);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid certification data\" });\n    }\n  });\n\n  app.patch(\"/api/certifications/:id\", async (req, res) => {\n    try {\n      const certification = await storage.updateCertification(req.params.id, req.body);\n      if (!certification) {\n        return res.status(404).json({ message: \"Certification not found\" });\n      }\n      res.json(certification);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update certification\" });\n    }\n  });\n\n  app.delete(\"/api/certifications/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteCertification(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Certification not found\" });\n      }\n      res.json({ message: \"Certification deleted\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete certification\" });\n    }\n  });\n\n  // Achievements routes\n  app.get(\"/api/achievements/:userId\", async (req, res) => {\n    try {\n      const achievements = await storage.getAchievements(req.params.userId);\n      res.json(achievements);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch achievements\" });\n    }\n  });\n\n  app.post(\"/api/achievements\", async (req, res) => {\n    try {\n      const achievementData = insertAchievementSchema.parse(req.body);\n      const achievement = await storage.createAchievement(achievementData);\n      res.json(achievement);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid achievement data\" });\n    }\n  });\n\n  app.patch(\"/api/achievements/:id\", async (req, res) => {\n    try {\n      const achievement = await storage.updateAchievement(req.params.id, req.body);\n      if (!achievement) {\n        return res.status(404).json({ message: \"Achievement not found\" });\n      }\n      res.json(achievement);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update achievement\" });\n    }\n  });\n\n  app.delete(\"/api/achievements/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteAchievement(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Achievement not found\" });\n      }\n      res.json({ message: \"Achievement deleted\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete achievement\" });\n    }\n  });\n\n  // Learning modules routes\n  app.get(\"/api/learning-modules\", async (req, res) => {\n    try {\n      const modules = await storage.getLearningModules();\n      res.json(modules);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch learning modules\" });\n    }\n  });\n\n  app.get(\"/api/learning-modules/:id\", async (req, res) => {\n    try {\n      const module = await storage.getLearningModule(req.params.id);\n      if (!module) {\n        return res.status(404).json({ message: \"Learning module not found\" });\n      }\n      res.json(module);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch learning module\" });\n    }\n  });\n\n  // User progress routes\n  app.get(\"/api/user-progress/:userId\", async (req, res) => {\n    try {\n      const progress = await storage.getUserProgress(req.params.userId);\n      res.json(progress);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user progress\" });\n    }\n  });\n\n  app.post(\"/api/user-progress\", async (req, res) => {\n    try {\n      const progressData = insertUserProgressSchema.parse(req.body);\n      const progress = await storage.createUserProgress(progressData);\n      res.json(progress);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid progress data\" });\n    }\n  });\n\n  app.patch(\"/api/user-progress/:userId/:moduleId\", async (req, res) => {\n    try {\n      const progress = await storage.updateUserProgress(req.params.userId, req.params.moduleId, req.body);\n      if (!progress) {\n        return res.status(404).json({ message: \"Progress not found\" });\n      }\n      res.json(progress);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update progress\" });\n    }\n  });\n\n  // User stats routes\n  app.get(\"/api/user-stats/:userId\", async (req, res) => {\n    try {\n      const stats = await storage.getUserStats(req.params.userId);\n      if (!stats) {\n        return res.status(404).json({ message: \"User stats not found\" });\n      }\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user stats\" });\n    }\n  });\n\n  app.patch(\"/api/user-stats/:userId\", async (req, res) => {\n    try {\n      const stats = await storage.updateUserStats(req.params.userId, req.body);\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update user stats\" });\n    }\n  });\n\n  // Daily activity routes\n  app.get(\"/api/daily-activity/:userId\", async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const activity = await storage.getDailyActivity(\n        req.params.userId, \n        startDate as string || \"2024-01-01\", \n        endDate as string || \"2024-12-31\"\n      );\n      res.json(activity);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch daily activity\" });\n    }\n  });\n\n  app.post(\"/api/daily-activity\", async (req, res) => {\n    try {\n      const activityData = insertDailyActivitySchema.parse(req.body);\n      const activity = await storage.createDailyActivity(activityData);\n      res.json(activity);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid activity data\" });\n    }\n  });\n\n  // Section settings routes\n  app.get(\"/api/section-settings/:userId\", async (req, res) => {\n    try {\n      const settings = await storage.getSectionSettings(req.params.userId);\n      res.json(settings);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch section settings\" });\n    }\n  });\n\n  app.patch(\"/api/section-settings/:userId/:sectionName\", async (req, res) => {\n    try {\n      const settings = await storage.updateSectionSettings(\n        req.params.userId, \n        req.params.sectionName, \n        req.body\n      );\n      res.json(settings);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update section settings\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":15080},"server/storage.ts":{"content":"import { \n  type User, type InsertUser, type Profile, type InsertProfile,\n  type WorkExperience, type InsertWorkExperience, type Education, type InsertEducation,\n  type Skill, type InsertSkill, type Project, type InsertProject,\n  type Certification, type InsertCertification, type Achievement, type InsertAchievement,\n  type LearningModule, type UserProgress, type InsertUserProgress,\n  type UserStats, type DailyActivity, type InsertDailyActivity,\n  type SectionSettings, type InsertSectionSettings\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User management\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Profile management\n  getProfile(userId: string): Promise<Profile | undefined>;\n  createProfile(profile: InsertProfile): Promise<Profile>;\n  updateProfile(userId: string, profile: Partial<Profile>): Promise<Profile | undefined>;\n\n  // Work Experience\n  getWorkExperience(userId: string): Promise<WorkExperience[]>;\n  createWorkExperience(experience: InsertWorkExperience): Promise<WorkExperience>;\n  updateWorkExperience(id: string, experience: Partial<WorkExperience>): Promise<WorkExperience | undefined>;\n  deleteWorkExperience(id: string): Promise<boolean>;\n\n  // Education\n  getEducation(userId: string): Promise<Education[]>;\n  createEducation(education: InsertEducation): Promise<Education>;\n  updateEducation(id: string, education: Partial<Education>): Promise<Education | undefined>;\n  deleteEducation(id: string): Promise<boolean>;\n\n  // Skills\n  getSkills(userId: string): Promise<Skill[]>;\n  createSkill(skill: InsertSkill): Promise<Skill>;\n  updateSkill(id: string, skill: Partial<Skill>): Promise<Skill | undefined>;\n  deleteSkill(id: string): Promise<boolean>;\n\n  // Projects\n  getProjects(userId: string): Promise<Project[]>;\n  createProject(project: InsertProject): Promise<Project>;\n  updateProject(id: string, project: Partial<Project>): Promise<Project | undefined>;\n  deleteProject(id: string): Promise<boolean>;\n\n  // Certifications\n  getCertifications(userId: string): Promise<Certification[]>;\n  createCertification(certification: InsertCertification): Promise<Certification>;\n  updateCertification(id: string, certification: Partial<Certification>): Promise<Certification | undefined>;\n  deleteCertification(id: string): Promise<boolean>;\n\n  // Achievements\n  getAchievements(userId: string): Promise<Achievement[]>;\n  createAchievement(achievement: InsertAchievement): Promise<Achievement>;\n  updateAchievement(id: string, achievement: Partial<Achievement>): Promise<Achievement | undefined>;\n  deleteAchievement(id: string): Promise<boolean>;\n\n  // Learning modules\n  getLearningModules(): Promise<LearningModule[]>;\n  getLearningModule(id: string): Promise<LearningModule | undefined>;\n\n  // User progress\n  getUserProgress(userId: string): Promise<UserProgress[]>;\n  createUserProgress(progress: InsertUserProgress): Promise<UserProgress>;\n  updateUserProgress(userId: string, moduleId: string, progress: Partial<UserProgress>): Promise<UserProgress | undefined>;\n\n  // User stats\n  getUserStats(userId: string): Promise<UserStats | undefined>;\n  updateUserStats(userId: string, stats: Partial<UserStats>): Promise<UserStats>;\n\n  // Daily activity\n  getDailyActivity(userId: string, startDate: string, endDate: string): Promise<DailyActivity[]>;\n  createDailyActivity(activity: InsertDailyActivity): Promise<DailyActivity>;\n\n  // Section settings\n  getSectionSettings(userId: string): Promise<SectionSettings[]>;\n  updateSectionSettings(userId: string, sectionName: string, settings: Partial<SectionSettings>): Promise<SectionSettings>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private profiles: Map<string, Profile> = new Map();\n  private workExperience: Map<string, WorkExperience> = new Map();\n  private education: Map<string, Education> = new Map();\n  private skills: Map<string, Skill> = new Map();\n  private projects: Map<string, Project> = new Map();\n  private certifications: Map<string, Certification> = new Map();\n  private achievements: Map<string, Achievement> = new Map();\n  private learningModules: Map<string, LearningModule> = new Map();\n  private userProgress: Map<string, UserProgress> = new Map();\n  private userStats: Map<string, UserStats> = new Map();\n  private dailyActivity: Map<string, DailyActivity> = new Map();\n  private sectionSettings: Map<string, SectionSettings> = new Map();\n\n  constructor() {\n    this.seedData();\n  }\n\n  private seedData() {\n    // Create sample user\n    const userId = \"user-1\";\n    const user: User = {\n      id: userId,\n      username: \"megharaj\",\n      email: \"megharaj@example.com\",\n      password: \"password123\",\n      createdAt: new Date()\n    };\n    this.users.set(userId, user);\n\n    // Create sample profile\n    const profileId = randomUUID();\n    const profile: Profile = {\n      id: profileId,\n      userId,\n      name: \"Megharaj K\",\n      role: \"Full Stack Developer\",\n      email: \"megharaj@example.com\",\n      phone: \"+91 12345 67890\",\n      location: \"Tamil Nadu, India\",\n      photoUrl: null,\n      summary: \"Passionate full-stack developer with experience in MERN stack and modern web technologies.\",\n      portfolioTheme: \"modern\",\n      isPublic: true\n    };\n    this.profiles.set(profileId, profile);\n\n    // Create sample skills\n    const skills = [\n      { name: \"JavaScript\", level: 90, category: \"technical\" },\n      { name: \"React\", level: 85, category: \"technical\" },\n      { name: \"Node.js\", level: 80, category: \"technical\" },\n      { name: \"TypeScript\", level: 75, category: \"technical\" },\n      { name: \"MongoDB\", level: 70, category: \"technical\" },\n      { name: \"UI/UX Design\", level: 65, category: \"design\" },\n      { name: \"Figma\", level: 60, category: \"design\" },\n      { name: \"Communication\", level: 85, category: \"soft\" },\n      { name: \"Problem Solving\", level: 90, category: \"soft\" },\n      { name: \"Leadership\", level: 75, category: \"soft\" }\n    ];\n\n    skills.forEach(skill => {\n      const skillId = randomUUID();\n      this.skills.set(skillId, {\n        id: skillId,\n        userId,\n        name: skill.name,\n        level: skill.level,\n        category: skill.category,\n        isVisible: true\n      });\n    });\n\n    // Create sample projects\n    const projects = [\n      {\n        title: \"Hospital Management System\",\n        description: \"Full-stack web application for managing hospital operations with patient records, appointments, and staff management.\",\n        technologies: [\"React\", \"Node.js\", \"MongoDB\", \"Express\"],\n        link: \"https://hospital-demo.example.com\",\n        githubLink: \"https://github.com/megharaj/hospital-management\"\n      },\n      {\n        title: \"E-Commerce Platform\",\n        description: \"Modern e-commerce solution with payment gateway integration and admin dashboard.\",\n        technologies: [\"Next.js\", \"Stripe\", \"PostgreSQL\", \"Tailwind\"],\n        link: \"https://ecommerce-demo.example.com\",\n        githubLink: \"https://github.com/megharaj/ecommerce-platform\"\n      },\n      {\n        title: \"Task Management App\",\n        description: \"Collaborative task management tool with real-time updates and team collaboration features.\",\n        technologies: [\"Vue.js\", \"Socket.io\", \"Redis\", \"Docker\"],\n        link: null,\n        githubLink: \"https://github.com/megharaj/task-manager\"\n      }\n    ];\n\n    projects.forEach(project => {\n      const projectId = randomUUID();\n      this.projects.set(projectId, {\n        id: projectId,\n        userId,\n        title: project.title,\n        description: project.description,\n        technologies: project.technologies,\n        link: project.link,\n        githubLink: project.githubLink,\n        isVisible: true\n      });\n    });\n\n    // Create sample achievements\n    const achievements = [\n      {\n        title: \"Smart India Hackathon Finalist\",\n        description: \"Reached finals in national-level hackathon with innovative healthcare solution\",\n        year: \"2024\"\n      },\n      {\n        title: \"AWS Certified Developer\",\n        description: \"Achieved AWS Developer Associate certification\",\n        year: \"2024\"\n      },\n      {\n        title: \"Open Source Contributor\",\n        description: \"Active contributor to React ecosystem with 50+ contributions\",\n        year: \"2023\"\n      }\n    ];\n\n    achievements.forEach(achievement => {\n      const achievementId = randomUUID();\n      this.achievements.set(achievementId, {\n        id: achievementId,\n        userId,\n        title: achievement.title,\n        description: achievement.description,\n        year: achievement.year,\n        isVisible: true\n      });\n    });\n\n    // Create sample work experience\n    const workExp = {\n      title: \"Software Developer Intern\",\n      company: \"ABC Tech Solutions\",\n      startDate: \"2024-06\",\n      endDate: \"2024-12\",\n      description: \"Developed REST APIs and optimized database queries. Built responsive web applications using React and Node.js.\"\n    };\n\n    const workId = randomUUID();\n    this.workExperience.set(workId, {\n      id: workId,\n      userId,\n      ...workExp,\n      isVisible: true\n    });\n\n    // Initialize user stats\n    const statsId = randomUUID();\n    const stats: UserStats = {\n      id: statsId,\n      userId,\n      totalXp: 2847,\n      currentStreak: 5,\n      longestStreak: 12,\n      lastActivityDate: new Date(),\n      portfolioViews: 1234\n    };\n    this.userStats.set(userId, stats);\n\n    // Create sample learning modules\n    const modules = [\n      {\n        id: randomUUID(),\n        title: \"JavaScript ES6+\",\n        description: \"Master modern JavaScript features and syntax\",\n        category: \"Programming\",\n        xpReward: 150,\n        lessons: [\n          { title: \"Arrow Functions\", content: \"Learn about arrow function syntax\", xp: 30 },\n          { title: \"Destructuring\", content: \"Master object and array destructuring\", xp: 30 },\n          { title: \"Async/Await\", content: \"Handle asynchronous operations\", xp: 40 },\n          { title: \"Modules\", content: \"Import and export modules\", xp: 25 },\n          { title: \"Classes\", content: \"Object-oriented programming in JS\", xp: 25 }\n        ],\n        isActive: true,\n      },\n      {\n        id: randomUUID(),\n        title: \"React.js Advanced Patterns\",\n        description: \"Learn advanced React patterns including hooks, context, and performance optimization\",\n        category: \"Frontend\",\n        xpReward: 200,\n        lessons: [\n          { title: \"Custom Hooks\", content: \"Create reusable custom hooks\", xp: 40 },\n          { title: \"Context API\", content: \"State management with Context\", xp: 40 },\n          { title: \"Performance Optimization\", content: \"Memo, useMemo, useCallback\", xp: 50 },\n          { title: \"Error Boundaries\", content: \"Handle errors gracefully\", xp: 35 },\n          { title: \"Testing\", content: \"Unit testing React components\", xp: 35 }\n        ],\n        isActive: true,\n      },\n      {\n        id: randomUUID(),\n        title: \"Node.js & Express\",\n        description: \"Build robust backend applications with Node.js and Express\",\n        category: \"Backend\",\n        xpReward: 180,\n        lessons: [\n          { title: \"Express Basics\", content: \"Setting up Express server\", xp: 30 },\n          { title: \"Middleware\", content: \"Understanding middleware functions\", xp: 35 },\n          { title: \"Authentication\", content: \"JWT and session management\", xp: 45 },\n          { title: \"Database Integration\", content: \"Connect to databases\", xp: 40 },\n          { title: \"API Design\", content: \"RESTful API best practices\", xp: 30 }\n        ],\n        isActive: true,\n      }\n    ];\n\n    modules.forEach(module => {\n      this.learningModules.set(module.id, module);\n    });\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id, \n      createdAt: new Date() \n    };\n    this.users.set(id, user);\n\n    // Initialize user stats\n    const statsId = randomUUID();\n    const stats: UserStats = {\n      id: statsId,\n      userId: id,\n      totalXp: 0,\n      currentStreak: 0,\n      longestStreak: 0,\n      lastActivityDate: null,\n      portfolioViews: 0,\n    };\n    this.userStats.set(id, stats);\n\n    return user;\n  }\n\n  async getProfile(userId: string): Promise<Profile | undefined> {\n    return Array.from(this.profiles.values()).find(profile => profile.userId === userId);\n  }\n\n  async createProfile(insertProfile: InsertProfile): Promise<Profile> {\n    const id = randomUUID();\n    const profile: Profile = { \n      ...insertProfile, \n      id,\n      summary: insertProfile.summary ?? null,\n      role: insertProfile.role ?? null,\n      email: insertProfile.email ?? null,\n      phone: insertProfile.phone ?? null,\n      location: insertProfile.location ?? null,\n      photoUrl: insertProfile.photoUrl ?? null,\n      portfolioTheme: insertProfile.portfolioTheme ?? \"modern\",\n      isPublic: insertProfile.isPublic ?? false\n    };\n    this.profiles.set(id, profile);\n    return profile;\n  }\n\n  async updateProfile(userId: string, profileUpdate: Partial<Profile>): Promise<Profile | undefined> {\n    const existing = await this.getProfile(userId);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...profileUpdate };\n    this.profiles.set(existing.id, updated);\n    return updated;\n  }\n\n  async getWorkExperience(userId: string): Promise<WorkExperience[]> {\n    return Array.from(this.workExperience.values()).filter(exp => exp.userId === userId);\n  }\n\n  async createWorkExperience(insertExperience: InsertWorkExperience): Promise<WorkExperience> {\n    const id = randomUUID();\n    const experience: WorkExperience = { \n      ...insertExperience, \n      id,\n      endDate: insertExperience.endDate ?? null,\n      description: insertExperience.description ?? null,\n      isVisible: insertExperience.isVisible ?? true\n    };\n    this.workExperience.set(id, experience);\n    return experience;\n  }\n\n  async updateWorkExperience(id: string, experienceUpdate: Partial<WorkExperience>): Promise<WorkExperience | undefined> {\n    const existing = this.workExperience.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...experienceUpdate };\n    this.workExperience.set(id, updated);\n    return updated;\n  }\n\n  async deleteWorkExperience(id: string): Promise<boolean> {\n    return this.workExperience.delete(id);\n  }\n\n  async getEducation(userId: string): Promise<Education[]> {\n    return Array.from(this.education.values()).filter(edu => edu.userId === userId);\n  }\n\n  async createEducation(insertEducation: InsertEducation): Promise<Education> {\n    const id = randomUUID();\n    const education: Education = { \n      ...insertEducation, \n      id,\n      endDate: insertEducation.endDate ?? null,\n      isVisible: insertEducation.isVisible ?? true\n    };\n    this.education.set(id, education);\n    return education;\n  }\n\n  async updateEducation(id: string, educationUpdate: Partial<Education>): Promise<Education | undefined> {\n    const existing = this.education.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...educationUpdate };\n    this.education.set(id, updated);\n    return updated;\n  }\n\n  async deleteEducation(id: string): Promise<boolean> {\n    return this.education.delete(id);\n  }\n\n  async getSkills(userId: string): Promise<Skill[]> {\n    return Array.from(this.skills.values()).filter(skill => skill.userId === userId);\n  }\n\n  async createSkill(insertSkill: InsertSkill): Promise<Skill> {\n    const id = randomUUID();\n    const skill: Skill = { \n      ...insertSkill, \n      id,\n      level: insertSkill.level ?? 1,\n      category: insertSkill.category ?? \"technical\",\n      isVisible: insertSkill.isVisible ?? true\n    };\n    this.skills.set(id, skill);\n    return skill;\n  }\n\n  async updateSkill(id: string, skillUpdate: Partial<Skill>): Promise<Skill | undefined> {\n    const existing = this.skills.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...skillUpdate };\n    this.skills.set(id, updated);\n    return updated;\n  }\n\n  async deleteSkill(id: string): Promise<boolean> {\n    return this.skills.delete(id);\n  }\n\n  async getProjects(userId: string): Promise<Project[]> {\n    return Array.from(this.projects.values()).filter(project => project.userId === userId);\n  }\n\n  async createProject(insertProject: InsertProject): Promise<Project> {\n    const id = randomUUID();\n    const project: Project = { \n      ...insertProject, \n      id,\n      description: insertProject.description ?? null,\n      technologies: insertProject.technologies ?? null,\n      link: insertProject.link ?? null,\n      githubLink: insertProject.githubLink ?? null,\n      isVisible: insertProject.isVisible ?? true\n    };\n    this.projects.set(id, project);\n    return project;\n  }\n\n  async updateProject(id: string, projectUpdate: Partial<Project>): Promise<Project | undefined> {\n    const existing = this.projects.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...projectUpdate };\n    this.projects.set(id, updated);\n    return updated;\n  }\n\n  async deleteProject(id: string): Promise<boolean> {\n    return this.projects.delete(id);\n  }\n\n  async getCertifications(userId: string): Promise<Certification[]> {\n    return Array.from(this.certifications.values()).filter(cert => cert.userId === userId);\n  }\n\n  async createCertification(insertCertification: InsertCertification): Promise<Certification> {\n    const id = randomUUID();\n    const certification: Certification = { ...insertCertification, id };\n    this.certifications.set(id, certification);\n    return certification;\n  }\n\n  async updateCertification(id: string, certificationUpdate: Partial<Certification>): Promise<Certification | undefined> {\n    const existing = this.certifications.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...certificationUpdate };\n    this.certifications.set(id, updated);\n    return updated;\n  }\n\n  async deleteCertification(id: string): Promise<boolean> {\n    return this.certifications.delete(id);\n  }\n\n  async getAchievements(userId: string): Promise<Achievement[]> {\n    return Array.from(this.achievements.values()).filter(achievement => achievement.userId === userId);\n  }\n\n  async createAchievement(insertAchievement: InsertAchievement): Promise<Achievement> {\n    const id = randomUUID();\n    const achievement: Achievement = { ...insertAchievement, id };\n    this.achievements.set(id, achievement);\n    return achievement;\n  }\n\n  async updateAchievement(id: string, achievementUpdate: Partial<Achievement>): Promise<Achievement | undefined> {\n    const existing = this.achievements.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...achievementUpdate };\n    this.achievements.set(id, updated);\n    return updated;\n  }\n\n  async deleteAchievement(id: string): Promise<boolean> {\n    return this.achievements.delete(id);\n  }\n\n  async getLearningModules(): Promise<LearningModule[]> {\n    return Array.from(this.learningModules.values()).filter(module => module.isActive);\n  }\n\n  async getLearningModule(id: string): Promise<LearningModule | undefined> {\n    return this.learningModules.get(id);\n  }\n\n  async getUserProgress(userId: string): Promise<UserProgress[]> {\n    return Array.from(this.userProgress.values()).filter(progress => progress.userId === userId);\n  }\n\n  async createUserProgress(insertProgress: InsertUserProgress): Promise<UserProgress> {\n    const id = randomUUID();\n    const progress: UserProgress = { ...insertProgress, id, completedAt: null };\n    this.userProgress.set(id, progress);\n    return progress;\n  }\n\n  async updateUserProgress(userId: string, moduleId: string, progressUpdate: Partial<UserProgress>): Promise<UserProgress | undefined> {\n    const existing = Array.from(this.userProgress.values()).find(\n      progress => progress.userId === userId && progress.moduleId === moduleId\n    );\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...progressUpdate };\n    if (progressUpdate.isCompleted) {\n      updated.completedAt = new Date();\n    }\n    this.userProgress.set(existing.id, updated);\n    return updated;\n  }\n\n  async getUserStats(userId: string): Promise<UserStats | undefined> {\n    return this.userStats.get(userId);\n  }\n\n  async updateUserStats(userId: string, statsUpdate: Partial<UserStats>): Promise<UserStats> {\n    const existing = await this.getUserStats(userId);\n    const updated = existing ? { ...existing, ...statsUpdate } : {\n      id: randomUUID(),\n      userId,\n      totalXp: 0,\n      currentStreak: 0,\n      longestStreak: 0,\n      lastActivityDate: null,\n      portfolioViews: 0,\n      ...statsUpdate\n    };\n    this.userStats.set(userId, updated);\n    return updated;\n  }\n\n  async getDailyActivity(userId: string, startDate: string, endDate: string): Promise<DailyActivity[]> {\n    return Array.from(this.dailyActivity.values()).filter(\n      activity => activity.userId === userId && \n      activity.date >= startDate && \n      activity.date <= endDate\n    );\n  }\n\n  async createDailyActivity(insertActivity: InsertDailyActivity): Promise<DailyActivity> {\n    const id = randomUUID();\n    const activity: DailyActivity = { ...insertActivity, id };\n    this.dailyActivity.set(id, activity);\n    return activity;\n  }\n\n  async getSectionSettings(userId: string): Promise<SectionSettings[]> {\n    return Array.from(this.sectionSettings.values()).filter(setting => setting.userId === userId);\n  }\n\n  async updateSectionSettings(userId: string, sectionName: string, settingsUpdate: Partial<SectionSettings>): Promise<SectionSettings> {\n    const existing = Array.from(this.sectionSettings.values()).find(\n      setting => setting.userId === userId && setting.sectionName === sectionName\n    );\n    \n    if (existing) {\n      const updated = { ...existing, ...settingsUpdate };\n      this.sectionSettings.set(existing.id, updated);\n      return updated;\n    } else {\n      const id = randomUUID();\n      const newSetting: SectionSettings = {\n        id,\n        userId,\n        sectionName,\n        isVisible: true,\n        sortOrder: 0,\n        ...settingsUpdate\n      };\n      this.sectionSettings.set(id, newSetting);\n      return newSetting;\n    }\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":22967},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, boolean, timestamp, jsonb, decimal } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const profiles = pgTable(\"profiles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  role: text(\"role\"),\n  email: text(\"email\"),\n  phone: text(\"phone\"),\n  location: text(\"location\"),\n  photoUrl: text(\"photo_url\"),\n  summary: text(\"summary\"),\n  portfolioTheme: text(\"portfolio_theme\").default(\"modern\"),\n  isPublic: boolean(\"is_public\").default(false),\n});\n\nexport const workExperience = pgTable(\"work_experience\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  title: text(\"title\").notNull(),\n  company: text(\"company\").notNull(),\n  startDate: text(\"start_date\").notNull(),\n  endDate: text(\"end_date\"),\n  description: text(\"description\"),\n  isVisible: boolean(\"is_visible\").default(true),\n});\n\nexport const education = pgTable(\"education\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  institution: text(\"institution\").notNull(),\n  degree: text(\"degree\").notNull(),\n  startDate: text(\"start_date\").notNull(),\n  endDate: text(\"end_date\"),\n  isVisible: boolean(\"is_visible\").default(true),\n});\n\nexport const skills = pgTable(\"skills\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  level: integer(\"level\").notNull().default(1), // 1-100\n  category: text(\"category\").default(\"technical\"),\n  isVisible: boolean(\"is_visible\").default(true),\n});\n\nexport const projects = pgTable(\"projects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  technologies: text(\"technologies\").array(),\n  link: text(\"link\"),\n  githubLink: text(\"github_link\"),\n  isVisible: boolean(\"is_visible\").default(true),\n});\n\nexport const certifications = pgTable(\"certifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  title: text(\"title\").notNull(),\n  issuer: text(\"issuer\").notNull(),\n  date: text(\"date\").notNull(),\n  link: text(\"link\"),\n  isVisible: boolean(\"is_visible\").default(true),\n});\n\nexport const achievements = pgTable(\"achievements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  year: text(\"year\"),\n  isVisible: boolean(\"is_visible\").default(true),\n});\n\nexport const learningModules = pgTable(\"learning_modules\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  category: text(\"category\").notNull(),\n  xpReward: integer(\"xp_reward\").default(100),\n  lessons: jsonb(\"lessons\"), // Array of lesson objects\n  isActive: boolean(\"is_active\").default(true),\n});\n\nexport const userProgress = pgTable(\"user_progress\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  moduleId: varchar(\"module_id\").notNull().references(() => learningModules.id, { onDelete: \"cascade\" }),\n  currentLesson: integer(\"current_lesson\").default(0),\n  isCompleted: boolean(\"is_completed\").default(false),\n  xpEarned: integer(\"xp_earned\").default(0),\n  completedAt: timestamp(\"completed_at\"),\n});\n\nexport const userStats = pgTable(\"user_stats\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  totalXp: integer(\"total_xp\").default(0),\n  currentStreak: integer(\"current_streak\").default(0),\n  longestStreak: integer(\"longest_streak\").default(0),\n  lastActivityDate: timestamp(\"last_activity_date\"),\n  portfolioViews: integer(\"portfolio_views\").default(0),\n});\n\nexport const dailyActivity = pgTable(\"daily_activity\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  date: text(\"date\").notNull(), // YYYY-MM-DD format\n  xpEarned: integer(\"xp_earned\").default(0),\n  lessonsCompleted: integer(\"lessons_completed\").default(0),\n});\n\nexport const sectionSettings = pgTable(\"section_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  sectionName: text(\"section_name\").notNull(),\n  isVisible: boolean(\"is_visible\").default(true),\n  sortOrder: integer(\"sort_order\").default(0),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({ id: true, createdAt: true });\nexport const insertProfileSchema = createInsertSchema(profiles).omit({ id: true });\nexport const insertWorkExperienceSchema = createInsertSchema(workExperience).omit({ id: true });\nexport const insertEducationSchema = createInsertSchema(education).omit({ id: true });\nexport const insertSkillSchema = createInsertSchema(skills).omit({ id: true });\nexport const insertProjectSchema = createInsertSchema(projects).omit({ id: true });\nexport const insertCertificationSchema = createInsertSchema(certifications).omit({ id: true });\nexport const insertAchievementSchema = createInsertSchema(achievements).omit({ id: true });\nexport const insertUserProgressSchema = createInsertSchema(userProgress).omit({ id: true, completedAt: true });\nexport const insertDailyActivitySchema = createInsertSchema(dailyActivity).omit({ id: true });\nexport const insertSectionSettingsSchema = createInsertSchema(sectionSettings).omit({ id: true });\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertProfile = z.infer<typeof insertProfileSchema>;\nexport type Profile = typeof profiles.$inferSelect;\nexport type InsertWorkExperience = z.infer<typeof insertWorkExperienceSchema>;\nexport type WorkExperience = typeof workExperience.$inferSelect;\nexport type InsertEducation = z.infer<typeof insertEducationSchema>;\nexport type Education = typeof education.$inferSelect;\nexport type InsertSkill = z.infer<typeof insertSkillSchema>;\nexport type Skill = typeof skills.$inferSelect;\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\nexport type Project = typeof projects.$inferSelect;\nexport type InsertCertification = z.infer<typeof insertCertificationSchema>;\nexport type Certification = typeof certifications.$inferSelect;\nexport type InsertAchievement = z.infer<typeof insertAchievementSchema>;\nexport type Achievement = typeof achievements.$inferSelect;\nexport type LearningModule = typeof learningModules.$inferSelect;\nexport type InsertUserProgress = z.infer<typeof insertUserProgressSchema>;\nexport type UserProgress = typeof userProgress.$inferSelect;\nexport type UserStats = typeof userStats.$inferSelect;\nexport type DailyActivity = typeof dailyActivity.$inferSelect;\nexport type InsertDailyActivity = z.infer<typeof insertDailyActivitySchema>;\nexport type SectionSettings = typeof sectionSettings.$inferSelect;\nexport type InsertSectionSettings = z.infer<typeof insertSectionSettingsSchema>;\n","size_bytes":8190},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Profile from \"@/pages/profile\";\nimport Experience from \"@/pages/experience\";\nimport Education from \"@/pages/education\";\nimport Skills from \"@/pages/skills\";\nimport Projects from \"@/pages/projects\";\nimport Portfolio from \"@/pages/portfolio\";\nimport Learning from \"@/pages/learning\";\nimport CourseDetail from \"@/pages/course-detail\";\nimport EditPortfolio from \"@/pages/edit-portfolio\";\nimport PublicPortfolio from \"@/pages/public-portfolio\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/profile\" component={Profile} />\n      <Route path=\"/experience\" component={Experience} />\n      <Route path=\"/education\" component={Education} />\n      <Route path=\"/skills\" component={Skills} />\n      <Route path=\"/projects\" component={Projects} />\n      <Route path=\"/portfolio\" component={Portfolio} />\n      <Route path=\"/learning\" component={Learning} />\n      <Route path=\"/course/:id\" component={CourseDetail} />\n      <Route path=\"/edit-portfolio\" component={EditPortfolio} />\n      <Route path=\"/portfolio/:username\" component={PublicPortfolio} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1794},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(210, 25%, 7.8431%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(210, 25%, 7.8431%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 25%, 7.8431%);\n  --primary: hsl(238, 74%, 60%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(265, 75%, 58%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(210, 25%, 45%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(210, 25%, 7.8431%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(238, 74%, 60%);\n  --success: hsl(159, 88%, 35%);\n  --success-foreground: hsl(0, 0%, 100%);\n  --warning: hsl(35, 91%, 56%);\n  --warning-foreground: hsl(0, 0%, 100%);\n  --chart-1: hsl(238, 74%, 60%);\n  --chart-2: hsl(159, 88%, 35%);\n  --chart-3: hsl(35, 91%, 56%);\n  --chart-4: hsl(120, 60%, 50%);\n  --chart-5: hsl(340, 75%, 55%);\n  --radius: 0.75rem;\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'Fira Code', monospace;\n}\n\n.dark {\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 5%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 84%, 5%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(238, 74%, 60%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(265, 75%, 58%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(217, 32%, 17%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62%, 30%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --ring: hsl(238, 74%, 60%);\n  --success: hsl(159, 88%, 35%);\n  --success-foreground: hsl(0, 0%, 100%);\n  --warning: hsl(35, 91%, 56%);\n  --warning-foreground: hsl(0, 0%, 100%);\n  --chart-1: hsl(238, 74%, 60%);\n  --chart-2: hsl(159, 88%, 35%);\n  --chart-3: hsl(35, 91%, 56%);\n  --chart-4: hsl(120, 60%, 50%);\n  --chart-5: hsl(340, 75%, 55%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  \n  body {\n    @apply bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n}\n\n@layer utilities {\n  .bg-gradient-primary {\n    background: linear-gradient(135deg, hsl(238, 74%, 60%) 0%, hsl(265, 75%, 58%) 100%);\n  }\n  \n  .text-gradient {\n    background: linear-gradient(135deg, hsl(238, 74%, 60%) 0%, hsl(265, 75%, 58%) 100%);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n  \n  /* Mobile responsive utilities */\n  .mobile-safe-padding {\n    padding-left: env(safe-area-inset-left);\n    padding-right: env(safe-area-inset-right);\n  }\n  \n  /* Custom scrollbar */\n  .scrollbar-thin {\n    scrollbar-width: thin;\n  }\n  \n  .scrollbar-thin::-webkit-scrollbar {\n    width: 6px;\n  }\n  \n  .scrollbar-thin::-webkit-scrollbar-track {\n    background: hsl(var(--muted));\n  }\n  \n  .scrollbar-thin::-webkit-scrollbar-thumb {\n    background: hsl(var(--muted-foreground));\n    border-radius: 3px;\n  }\n  \n  .scrollbar-thin::-webkit-scrollbar-thumb:hover {\n    background: hsl(var(--primary));\n  }\n}\n\n@layer components {\n  /* Glass effect utility */\n  .glass-effect {\n    backdrop-filter: blur(10px);\n    background: rgba(255, 255, 255, 0.8);\n  }\n\n  .dark .glass-effect {\n    background: rgba(0, 0, 0, 0.8);\n  }\n\n  /* Gradient border utility */\n  .gradient-border {\n    background: linear-gradient(135deg, hsl(238, 74%, 60%), hsl(265, 75%, 58%));\n    padding: 2px;\n    border-radius: calc(var(--radius) + 2px);\n  }\n\n  .gradient-border > * {\n    background: hsl(var(--background));\n    border-radius: var(--radius);\n  }\n\n  /* Custom gradient backgrounds */\n  .gradient-primary {\n    background: linear-gradient(135deg, hsl(238, 74%, 60%), hsl(265, 75%, 58%));\n  }\n\n  .gradient-success {\n    background: linear-gradient(135deg, hsl(159, 88%, 35%), hsl(120, 60%, 50%));\n  }\n\n  .gradient-warning {\n    background: linear-gradient(135deg, hsl(35, 91%, 56%), hsl(45, 93%, 47%));\n  }\n\n  /* Custom animations */\n  .animate-fade-in {\n    animation: fadeIn 0.5s ease-in-out;\n  }\n\n  .animate-slide-up {\n    animation: slideUp 0.3s ease-out;\n  }\n\n  .animate-pulse-slow {\n    animation: pulse 3s infinite;\n  }\n\n  /* Skill progress bars with custom styling */\n  .skill-progress {\n    @apply w-full bg-muted rounded-full h-2 relative overflow-hidden;\n  }\n\n  .skill-progress-bar {\n    @apply h-full rounded-full transition-all duration-500 ease-out;\n    background: linear-gradient(90deg, hsl(238, 74%, 60%), hsl(265, 75%, 58%));\n  }\n\n  /* Activity calendar styling */\n  .activity-square {\n    @apply w-3 h-3 rounded-sm transition-colors duration-200;\n  }\n\n  .activity-square-0 {\n    @apply bg-gray-200 dark:bg-gray-700;\n  }\n\n  .activity-square-1 {\n    background-color: rgba(16, 185, 129, 0.3);\n  }\n\n  .activity-square-2 {\n    background-color: rgba(16, 185, 129, 0.6);\n  }\n\n  .activity-square-3 {\n    background-color: rgba(16, 185, 129, 1);\n  }\n\n  /* Badge variants */\n  .badge-success {\n    @apply bg-success text-success-foreground;\n  }\n\n  .badge-warning {\n    @apply bg-warning text-warning-foreground;\n  }\n\n  .badge-primary {\n    @apply bg-primary text-primary-foreground;\n  }\n\n  /* Card hover effects */\n  .card-hover {\n    @apply transition-all duration-200 hover:shadow-lg hover:-translate-y-1;\n  }\n\n  /* Learning module progress styling */\n  .module-progress {\n    background: linear-gradient(90deg, hsl(238, 74%, 60%) 0%, hsl(265, 75%, 58%) 100%);\n  }\n\n  /* Sidebar gradient styling */\n  .sidebar-stats {\n    background: linear-gradient(135deg, hsl(238, 74%, 60%), hsl(265, 75%, 58%));\n  }\n\n  /* Portfolio hero gradient */\n  .portfolio-hero {\n    background: linear-gradient(135deg, hsl(238, 74%, 60%) 0%, hsl(265, 75%, 58%) 100%);\n  }\n}\n\n@layer utilities {\n  /* Custom utility classes */\n  .text-gradient {\n    background: linear-gradient(135deg, hsl(238, 74%, 60%), hsl(265, 75%, 58%));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n\n  /* Border gradient utilities */\n  .border-gradient {\n    border: 1px solid transparent;\n    background: linear-gradient(hsl(var(--background)), hsl(var(--background))) padding-box,\n                linear-gradient(135deg, hsl(238, 74%, 60%), hsl(265, 75%, 58%)) border-box;\n  }\n\n  /* Shadow utilities */\n  .shadow-primary {\n    box-shadow: 0 4px 14px 0 rgba(79, 70, 229, 0.15);\n  }\n\n  .shadow-success {\n    box-shadow: 0 4px 14px 0 rgba(16, 185, 129, 0.15);\n  }\n\n  .shadow-warning {\n    box-shadow: 0 4px 14px 0 rgba(245, 158, 11, 0.15);\n  }\n}\n\n/* Custom keyframes */\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n@keyframes slideUp {\n  from {\n    transform: translateY(10px);\n    opacity: 0;\n  }\n  to {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n\n/* Scrollbar styling */\n::-webkit-scrollbar {\n  width: 6px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(var(--muted-foreground));\n  border-radius: 3px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--primary));\n}\n\n/* Focus styles */\n.focus-visible {\n  @apply outline-none ring-2 ring-ring ring-offset-2 ring-offset-background;\n}\n\n/* Print styles */\n@media print {\n  .no-print {\n    display: none !important;\n  }\n  \n  body {\n    background: white !important;\n    color: black !important;\n  }\n  \n  .card {\n    box-shadow: none !important;\n    border: 1px solid #e5e7eb !important;\n  }\n}\n","size_bytes":7810},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/activity-calendar.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\ninterface ActivityCalendarProps {\n  userId: string;\n}\n\nexport default function ActivityCalendar({ userId }: ActivityCalendarProps) {\n  const { data: dailyActivity = [] } = useQuery({\n    queryKey: [\"/api/daily-activity\", userId],\n  });\n\n  // Generate mock activity data for the last 28 days\n  const generateActivityData = () => {\n    const data = [];\n    const today = new Date();\n    \n    for (let i = 27; i >= 0; i--) {\n      const date = new Date(today);\n      date.setDate(date.getDate() - i);\n      \n      // Mock activity intensity (0-3)\n      const intensity = Math.floor(Math.random() * 4);\n      data.push({\n        date: date.toISOString().split('T')[0],\n        xpEarned: intensity * 20,\n        intensity,\n      });\n    }\n    \n    return data;\n  };\n\n  const activityData = dailyActivity.length > 0 ? dailyActivity : generateActivityData();\n\n  const getIntensityClass = (intensity: number) => {\n    switch (intensity) {\n      case 0:\n        return \"bg-gray-200\";\n      case 1:\n        return \"bg-green-200\";\n      case 2:\n        return \"bg-green-400\";\n      case 3:\n        return \"bg-green-600\";\n      default:\n        return \"bg-gray-200\";\n    }\n  };\n\n  const weekDays = [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"];\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex justify-between items-center\">\n          <CardTitle className=\"text-lg\">Learning Activity</CardTitle>\n          <span className=\"text-sm text-gray-500\">Last 30 days</span>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {/* GitHub-style contribution grid */}\n        <div className=\"grid grid-cols-7 gap-1\">\n          {/* Week days header */}\n          {weekDays.map((day, index) => (\n            <div key={index} className=\"text-xs text-gray-500 text-center py-1\">\n              {day}\n            </div>\n          ))}\n          \n          {/* Activity squares */}\n          {activityData.map((day, index) => (\n            <div\n              key={index}\n              className={`w-3 h-3 rounded-sm ${getIntensityClass(day.intensity || 0)}`}\n              title={`${day.date}: ${day.xpEarned || 0} XP`}\n            />\n          ))}\n        </div>\n        \n        <div className=\"flex justify-between items-center mt-4 text-xs text-gray-500\">\n          <span>Less</span>\n          <div className=\"flex space-x-1\">\n            <div className=\"w-3 h-3 bg-gray-200 rounded-sm\" />\n            <div className=\"w-3 h-3 bg-green-200 rounded-sm\" />\n            <div className=\"w-3 h-3 bg-green-400 rounded-sm\" />\n            <div className=\"w-3 h-3 bg-green-600 rounded-sm\" />\n          </div>\n          <span>More</span>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2810},"client/src/components/learning-modules.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Check, Lock, Play, RotateCcw } from \"lucide-react\";\n\ninterface LearningModulesProps {\n  userId: string;\n}\n\nexport default function LearningModules({ userId }: LearningModulesProps) {\n  const { data: modules = [] } = useQuery({\n    queryKey: [\"/api/learning-modules\"],\n  });\n\n  const { data: userProgress = [] } = useQuery({\n    queryKey: [\"/api/user-progress\", userId],\n  });\n\n  const getModuleProgress = (moduleId: string) => {\n    const progress = userProgress.find(p => p.moduleId === moduleId);\n    return progress || { currentLesson: 0, isCompleted: false, xpEarned: 0 };\n  };\n\n  const currentModule = modules.find(module => {\n    const progress = getModuleProgress(module.id);\n    return !progress.isCompleted && progress.currentLesson > 0;\n  });\n\n  const completedModules = modules.filter(module => {\n    const progress = getModuleProgress(module.id);\n    return progress.isCompleted;\n  });\n\n  const lockedModules = modules.filter(module => {\n    const progress = getModuleProgress(module.id);\n    return !progress.isCompleted && progress.currentLesson === 0;\n  });\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex justify-between items-center\">\n          <CardTitle className=\"text-xl\">Learning Modules</CardTitle>\n          <Link href=\"/learning\">\n            <span className=\"text-sm text-primary font-medium cursor-pointer hover:underline\">\n              View All\n            </span>\n          </Link>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {/* Current Module */}\n        {currentModule && (\n          <div className=\"border-2 border-primary rounded-lg p-4 mb-6\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <h4 className=\"font-semibold text-gray-900\">{currentModule.title}</h4>\n              <Badge>In Progress</Badge>\n            </div>\n            <p className=\"text-sm text-gray-600 mb-4\">{currentModule.description}</p>\n            \n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-32 bg-gray-200 rounded-full h-2\">\n                  {(() => {\n                    const progress = getModuleProgress(currentModule.id);\n                    const totalLessons = Array.isArray(currentModule.lessons) ? currentModule.lessons.length : 1;\n                    const progressPercentage = (progress.currentLesson / totalLessons) * 100;\n                    return (\n                      <div \n                        className=\"bg-primary h-2 rounded-full\" \n                        style={{ width: `${progressPercentage}%` }}\n                      />\n                    );\n                  })()}\n                </div>\n                <span className=\"text-sm text-gray-600\">\n                  {(() => {\n                    const progress = getModuleProgress(currentModule.id);\n                    const totalLessons = Array.isArray(currentModule.lessons) ? currentModule.lessons.length : 1;\n                    return Math.round((progress.currentLesson / totalLessons) * 100);\n                  })()}%\n                </span>\n              </div>\n              <Button size=\"sm\">\n                <Play className=\"mr-1 h-3 w-3\" />\n                Continue\n              </Button>\n            </div>\n          </div>\n        )}\n\n        {/* Module List */}\n        <div className=\"space-y-3\">\n          {/* Completed Modules */}\n          {completedModules.slice(0, 2).map((module) => (\n            <div\n              key={module.id}\n              className=\"flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors\"\n            >\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <Check className=\"h-5 w-5 text-green-600\" />\n                </div>\n                <div>\n                  <h5 className=\"font-medium text-gray-900\">{module.title}</h5>\n                  <p className=\"text-sm text-green-600\">\n                    Completed • +{module.xpReward} XP\n                  </p>\n                </div>\n              </div>\n              <Button size=\"sm\" variant=\"ghost\">\n                <RotateCcw className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          ))}\n\n          {/* Locked Modules */}\n          {lockedModules.slice(0, 2).map((module) => (\n            <div\n              key={module.id}\n              className=\"flex items-center justify-between p-3 border border-gray-200 rounded-lg opacity-60\"\n            >\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-gray-200 rounded-lg flex items-center justify-center\">\n                  <Lock className=\"h-5 w-5 text-gray-400\" />\n                </div>\n                <div>\n                  <h5 className=\"font-medium text-gray-900\">{module.title}</h5>\n                  <p className=\"text-sm text-gray-500\">\n                    Locked • Complete previous modules first\n                  </p>\n                </div>\n              </div>\n              <Badge variant=\"outline\">+{module.xpReward} XP</Badge>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5635},"client/src/components/projects-achievements.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ExternalLink, Github, Trophy, Award, Star, Calendar } from \"lucide-react\";\nimport type { Project, Achievement } from \"@shared/schema\";\n\ninterface ProjectsAchievementsProps {\n  userId: string;\n}\n\nexport default function ProjectsAchievements({ userId }: ProjectsAchievementsProps) {\n  const { data: projects = [] } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\", userId],\n  });\n\n  const { data: achievements = [] } = useQuery<Achievement[]>({\n    queryKey: [\"/api/achievements\", userId],\n  });\n\n  return (\n    <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-6\">\n      {/* Projects Section */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <Github className=\"h-5 w-5 text-primary\" />\n              Projects\n            </CardTitle>\n            <Badge variant=\"outline\">{projects.length} projects</Badge>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n            {projects.filter(project => project.isVisible).map((project) => (\n              <div key={project.id} className=\"border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow\">\n                <div className=\"flex items-start justify-between mb-3\">\n                  <h3 className=\"font-semibold text-gray-900 text-lg\">{project.title}</h3>\n                  <div className=\"flex space-x-2\">\n                    {project.link && (\n                      <Button size=\"sm\" variant=\"outline\" asChild>\n                        <a href={project.link} target=\"_blank\" rel=\"noopener noreferrer\">\n                          <ExternalLink className=\"h-3 w-3\" />\n                        </a>\n                      </Button>\n                    )}\n                    {project.githubLink && (\n                      <Button size=\"sm\" variant=\"outline\" asChild>\n                        <a href={project.githubLink} target=\"_blank\" rel=\"noopener noreferrer\">\n                          <Github className=\"h-3 w-3\" />\n                        </a>\n                      </Button>\n                    )}\n                  </div>\n                </div>\n                \n                {project.description && (\n                  <p className=\"text-gray-600 text-sm mb-3 leading-relaxed\">\n                    {project.description}\n                  </p>\n                )}\n                \n                {project.technologies && project.technologies.length > 0 && (\n                  <div className=\"flex flex-wrap gap-1\">\n                    {project.technologies.map((tech, index) => (\n                      <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                        {tech}\n                      </Badge>\n                    ))}\n                  </div>\n                )}\n              </div>\n            ))}\n            \n            {projects.filter(project => project.isVisible).length === 0 && (\n              <div className=\"text-center py-8 text-gray-500\">\n                <Github className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n                <p>No projects added yet</p>\n                <p className=\"text-sm\">Start showcasing your work!</p>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Achievements Section */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <Trophy className=\"h-5 w-5 text-primary\" />\n              Achievements\n            </CardTitle>\n            <Badge variant=\"outline\">{achievements.length} achievements</Badge>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n            {achievements.filter(achievement => achievement.isVisible).map((achievement) => (\n              <div key={achievement.id} className=\"relative\">\n                <div className=\"flex items-start space-x-4 p-4 border border-gray-200 rounded-lg hover:shadow-md transition-shadow\">\n                  {/* Achievement Icon */}\n                  <div className=\"flex-shrink-0\">\n                    <div className=\"w-12 h-12 bg-gradient-primary rounded-full flex items-center justify-center\">\n                      {achievement.title.toLowerCase().includes('hackathon') && (\n                        <Star className=\"h-6 w-6 text-white\" />\n                      )}\n                      {achievement.title.toLowerCase().includes('certified') && (\n                        <Award className=\"h-6 w-6 text-white\" />\n                      )}\n                      {(!achievement.title.toLowerCase().includes('hackathon') && \n                        !achievement.title.toLowerCase().includes('certified')) && (\n                        <Trophy className=\"h-6 w-6 text-white\" />\n                      )}\n                    </div>\n                  </div>\n                  \n                  {/* Achievement Content */}\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center justify-between mb-1\">\n                      <h3 className=\"font-semibold text-gray-900 text-sm\">\n                        {achievement.title}\n                      </h3>\n                      {achievement.year && (\n                        <div className=\"flex items-center text-xs text-gray-500\">\n                          <Calendar className=\"h-3 w-3 mr-1\" />\n                          {achievement.year}\n                        </div>\n                      )}\n                    </div>\n                    \n                    {achievement.description && (\n                      <p className=\"text-gray-600 text-sm leading-relaxed\">\n                        {achievement.description}\n                      </p>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n            \n            {achievements.filter(achievement => achievement.isVisible).length === 0 && (\n              <div className=\"text-center py-8 text-gray-500\">\n                <Trophy className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n                <p>No achievements added yet</p>\n                <p className=\"text-sm\">Celebrate your wins!</p>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":6673},"client/src/components/quick-actions.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus, FolderPlus, Award, Play, ChevronRight } from \"lucide-react\";\n\nexport default function QuickActions() {\n  const actions = [\n    {\n      label: \"Add Experience\",\n      icon: Plus,\n      onClick: () => console.log(\"Add experience\"),\n    },\n    {\n      label: \"Add Project\",\n      icon: FolderPlus,\n      onClick: () => console.log(\"Add project\"),\n    },\n    {\n      label: \"Add Certification\",\n      icon: Award,\n      onClick: () => console.log(\"Add certification\"),\n    },\n    {\n      label: \"Start Learning\",\n      icon: Play,\n      onClick: () => console.log(\"Start learning\"),\n      primary: true,\n    },\n  ];\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-lg\">Quick Actions</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-3\">\n          {actions.map((action, index) => {\n            const IconComponent = action.icon;\n            \n            return (\n              <Button\n                key={index}\n                variant={action.primary ? \"default\" : \"outline\"}\n                className=\"w-full justify-between\"\n                onClick={action.onClick}\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <IconComponent className=\"h-4 w-4\" />\n                  <span className=\"font-medium\">{action.label}</span>\n                </div>\n                <ChevronRight className=\"h-4 w-4\" />\n              </Button>\n            );\n          })}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1660},"client/src/components/recent-activity.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Trophy, FolderOpen, Flame } from \"lucide-react\";\n\ninterface RecentActivityProps {\n  userId: string;\n}\n\nconst mockActivities = [\n  {\n    id: \"1\",\n    type: \"completion\",\n    title: \"Completed JavaScript ES6+ module\",\n    description: \"Earned 150 XP • 2 hours ago\",\n    icon: Trophy,\n    iconColor: \"text-green-600\",\n    iconBg: \"bg-green-100\",\n  },\n  {\n    id: \"2\",\n    type: \"project\",\n    title: \"Added Hospital Management System project\",\n    description: \"Portfolio updated • 1 day ago\",\n    icon: FolderOpen,\n    iconColor: \"text-primary\",\n    iconBg: \"bg-primary bg-opacity-10\",\n  },\n  {\n    id: \"3\",\n    type: \"streak\",\n    title: \"5-day learning streak achieved!\",\n    description: \"Keep it up! • 1 day ago\",\n    icon: Flame,\n    iconColor: \"text-yellow-600\",\n    iconBg: \"bg-yellow-100\",\n  },\n];\n\nexport default function RecentActivity({ userId }: RecentActivityProps) {\n  return (\n    <Card className=\"mt-8\">\n      <CardHeader>\n        <CardTitle className=\"text-lg\">Recent Activity</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {mockActivities.map((activity) => {\n            const IconComponent = activity.icon;\n            \n            return (\n              <div key={activity.id} className=\"flex items-start space-x-3\">\n                <div className={`w-8 h-8 ${activity.iconBg} rounded-full flex items-center justify-center flex-shrink-0 mt-1`}>\n                  <IconComponent className={`${activity.iconColor} h-4 w-4`} />\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-gray-900\">\n                    <span className=\"font-medium\">\n                      {activity.title.split(' ')[0]}\n                    </span>{' '}\n                    {activity.title.split(' ').slice(1).join(' ')}\n                  </p>\n                  <p className=\"text-sm text-gray-500 mt-1\">{activity.description}</p>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2144},"client/src/components/section-management.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  User, Briefcase, GraduationCap, Cog, \n  FolderOpen, Award \n} from \"lucide-react\";\n\ninterface SectionManagementProps {\n  userId: string;\n}\n\nconst sections = [\n  {\n    key: \"personal\",\n    label: \"Personal Details\",\n    description: \"Name, contact, photo\",\n    icon: User,\n  },\n  {\n    key: \"work\",\n    label: \"Work Experience\",\n    description: \"2 positions added\",\n    icon: Briefcase,\n  },\n  {\n    key: \"skills\",\n    label: \"Skills\",\n    description: \"12 skills with ratings\",\n    icon: Cog,\n  },\n  {\n    key: \"projects\",\n    label: \"Projects\",\n    description: \"5 projects showcased\",\n    icon: FolderOpen,\n  },\n  {\n    key: \"education\",\n    label: \"Education\",\n    description: \"B.E. Computer Science\",\n    icon: GraduationCap,\n  },\n  {\n    key: \"certifications\",\n    label: \"Certifications\",\n    description: \"Add your certifications\",\n    icon: Award,\n  },\n];\n\nexport default function SectionManagement({ userId }: SectionManagementProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: sectionSettings = [] } = useQuery({\n    queryKey: [\"/api/section-settings\", userId],\n  });\n\n  const updateSectionMutation = useMutation({\n    mutationFn: async ({ sectionName, isVisible }: { sectionName: string; isVisible: boolean }) => {\n      return apiRequest(\"PATCH\", `/api/section-settings/${userId}/${sectionName}`, {\n        isVisible,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/section-settings\", userId] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update section visibility.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getSectionSettings = (sectionKey: string) => {\n    const setting = sectionSettings.find(s => s.sectionName === sectionKey);\n    return setting ? setting.isVisible : true;\n  };\n\n  const getSectionCompletionStatus = (sectionKey: string) => {\n    // Mock completion status - in real app this would be calculated from actual data\n    const mockStatuses: Record<string, boolean> = {\n      personal: true,\n      work: true,\n      skills: true,\n      projects: true,\n      education: true,\n      certifications: false,\n    };\n    return mockStatuses[sectionKey] || false;\n  };\n\n  const handleToggleSection = (sectionKey: string, isVisible: boolean) => {\n    updateSectionMutation.mutate({ sectionName: sectionKey, isVisible });\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex justify-between items-center\">\n          <CardTitle className=\"text-xl\">Portfolio Sections</CardTitle>\n          <span className=\"text-sm text-gray-500\">Toggle visibility</span>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {sections.map((section) => {\n            const isVisible = getSectionSettings(section.key);\n            const isComplete = getSectionCompletionStatus(section.key);\n            const IconComponent = section.icon;\n\n            return (\n              <div\n                key={section.key}\n                className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors\"\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <IconComponent className=\"h-5 w-5 text-primary\" />\n                  <div>\n                    <h4 className=\"font-medium text-gray-900\">{section.label}</h4>\n                    <p className=\"text-sm text-gray-500\">{section.description}</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <Badge variant={isComplete ? \"default\" : \"secondary\"}>\n                    {isComplete ? \"Complete\" : \"Empty\"}\n                  </Badge>\n                  <Switch\n                    checked={isVisible}\n                    onCheckedChange={(checked) => handleToggleSection(section.key, checked)}\n                    disabled={updateSectionMutation.isPending}\n                  />\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4529},"client/src/components/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  LayoutDashboard, User, Briefcase, GraduationCap, \n  Cog, FolderOpen, BookOpen, ExternalLink, Flame, X\n} from \"lucide-react\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/dashboard\", icon: LayoutDashboard },\n  { name: \"Profile\", href: \"/profile\", icon: User },\n  { name: \"Experience\", href: \"/experience\", icon: Briefcase },\n  { name: \"Education\", href: \"/education\", icon: GraduationCap },\n  { name: \"Skills\", href: \"/skills\", icon: Cog },\n  { name: \"Projects\", href: \"/projects\", icon: FolderOpen },\n  { name: \"Learning\", href: \"/learning\", icon: BookOpen },\n];\n\ninterface SidebarProps {\n  onClose?: () => void;\n}\n\nexport default function Sidebar({ onClose }: SidebarProps) {\n  const [location] = useLocation();\n\n  return (\n    <aside className=\"w-64 bg-white dark:bg-gray-800 shadow-lg border-r border-gray-200 dark:border-gray-700 fixed h-full z-10\">\n      <div className=\"p-6\">\n        {/* Mobile close button */}\n        {onClose && (\n          <div className=\"lg:hidden flex justify-end mb-4\">\n            <Button variant=\"ghost\" size=\"icon\" onClick={onClose}>\n              <X className=\"h-5 w-5\" />\n            </Button>\n          </div>\n        )}\n        {/* Logo */}\n        <div className=\"flex items-center space-x-3 mb-8\">\n          <div className=\"w-10 h-10 bg-gradient-to-r from-primary to-purple-600 rounded-lg flex items-center justify-center\">\n            <User className=\"text-white h-5 w-5\" />\n          </div>\n          <div>\n            <h1 className=\"text-xl font-bold text-gray-900 dark:text-white\">FlowCV</h1>\n            <p className=\"text-sm text-gray-500 dark:text-gray-400\">Dashboard</p>\n          </div>\n        </div>\n\n        {/* User Stats */}\n        <div className=\"bg-gradient-to-r from-primary to-purple-600 rounded-xl p-4 mb-6 text-white\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm opacity-90\">Total XP</span>\n            <span className=\"text-lg font-bold\">2,847</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Flame className=\"h-4 w-4 text-yellow-300\" />\n            <span className=\"text-sm\">5 day streak</span>\n          </div>\n        </div>\n\n        {/* Navigation */}\n        <nav className=\"space-y-2\">\n          {navigation.map((item) => {\n            const IconComponent = item.icon;\n            const isActive = location === item.href || (item.href === \"/dashboard\" && location === \"/\");\n            \n            return (\n              <Link key={item.name} href={item.href}>\n                <div\n                  className={cn(\n                    \"flex items-center space-x-3 px-4 py-3 rounded-lg font-medium transition-colors\",\n                    isActive\n                      ? \"bg-primary text-white\"\n                      : \"text-gray-600 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700\"\n                  )}\n                  onClick={() => onClose && onClose()}\n                >\n                  <IconComponent className=\"h-5 w-5\" />\n                  <span>{item.name}</span>\n                  {item.name === \"Learning\" && (\n                    <span className=\"ml-auto bg-yellow-500 text-white text-xs px-2 py-1 rounded-full\">\n                      New\n                    </span>\n                  )}\n                </div>\n              </Link>\n            );\n          })}\n        </nav>\n\n        {/* Portfolio Link */}\n        <div className=\"mt-8 pt-6 border-t border-gray-200 dark:border-gray-700\">\n          <Link href=\"/portfolio\">\n            <div \n              className=\"flex items-center space-x-3 px-4 py-3 rounded-lg bg-green-600 text-white font-medium hover:bg-green-700 transition-colors\"\n              onClick={() => onClose && onClose()}\n            >\n              <ExternalLink className=\"h-5 w-5\" />\n              <span>View Portfolio</span>\n            </div>\n          </Link>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":4079},"client/src/components/skill-chart.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\n\ninterface SkillChartProps {\n  userId: string;\n}\n\nexport default function SkillChart({ userId }: SkillChartProps) {\n  const { data: skills = [] } = useQuery({\n    queryKey: [\"/api/skills\", userId],\n  });\n\n  // Show only top skills or mock data if no skills exist\n  const displaySkills = skills.length > 0 ? skills.slice(0, 4) : [\n    { id: \"1\", name: \"JavaScript\", level: 90, userId },\n    { id: \"2\", name: \"React\", level: 75, userId },\n    { id: \"3\", name: \"Node.js\", level: 60, userId },\n    { id: \"4\", name: \"MongoDB\", level: 45, userId },\n  ];\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-lg\">Skills Overview</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {displaySkills.map((skill) => (\n            <div key={skill.id}>\n              <div className=\"flex justify-between text-sm mb-1\">\n                <span className=\"font-medium text-gray-700\">{skill.name}</span>\n                <span className=\"text-gray-500\">{skill.level}%</span>\n              </div>\n              <Progress \n                value={skill.level} \n                className=\"h-2\"\n              />\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1428},"client/src/components/skill-radar-chart.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { RadialBarChart, RadialBar, PolarAngleAxis, ResponsiveContainer, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip } from \"recharts\";\nimport { TrendingUp, Code, Palette, Users } from \"lucide-react\";\nimport type { Skill } from \"@shared/schema\";\n\ninterface SkillRadarChartProps {\n  userId: string;\n}\n\nexport default function SkillRadarChart({ userId }: SkillRadarChartProps) {\n  const { data: skills = [] } = useQuery<Skill[]>({\n    queryKey: [\"/api/skills\", userId],\n  });\n\n  // Calculate average skill levels by category\n  const skillsByCategory = skills.reduce((acc, skill) => {\n    if (!acc[skill.category || \"technical\"]) {\n      acc[skill.category || \"technical\"] = [];\n    }\n    acc[skill.category || \"technical\"].push(skill.level);\n    return acc;\n  }, {} as Record<string, number[]>);\n\n  const categoryAverages = Object.entries(skillsByCategory).map(([category, levels]) => {\n    const average = Math.round(levels.reduce((sum, level) => sum + level, 0) / levels.length);\n    return {\n      category: category.charAt(0).toUpperCase() + category.slice(1),\n      value: average,\n      fill: category === \"technical\" ? \"#4F46E5\" : category === \"design\" ? \"#7C3AED\" : \"#059669\"\n    };\n  });\n\n  const getIconForCategory = (category: string) => {\n    switch (category.toLowerCase()) {\n      case \"technical\":\n        return <Code className=\"h-4 w-4\" />;\n      case \"design\":\n        return <Palette className=\"h-4 w-4\" />;\n      case \"soft\":\n        return <Users className=\"h-4 w-4\" />;\n      default:\n        return <TrendingUp className=\"h-4 w-4\" />;\n    }\n  };\n\n  // Top skills for detailed view\n  const topSkills = skills\n    .sort((a, b) => b.level - a.level)\n    .slice(0, 6)\n    .map(skill => ({\n      name: skill.name,\n      level: skill.level,\n      category: skill.category || \"technical\"\n    }));\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n      {/* Skill Categories Radial Chart */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <TrendingUp className=\"h-5 w-5 text-primary\" />\n            Skill Categories\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-64 w-full\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <RadialBarChart cx=\"50%\" cy=\"50%\" innerRadius=\"20%\" outerRadius=\"90%\" data={categoryAverages}>\n                <PolarAngleAxis tick={false} />\n                <RadialBar\n                  dataKey=\"value\"\n                  cornerRadius={10}\n                  fill=\"#4F46E5\"\n                />\n                <Tooltip\n                  content={({ active, payload }) => {\n                    if (active && payload && payload[0]) {\n                      return (\n                        <div className=\"bg-white p-2 shadow-lg rounded-lg border\">\n                          <p className=\"font-medium\">{payload[0].payload.category}</p>\n                          <p className=\"text-primary\">{payload[0].value}% proficiency</p>\n                        </div>\n                      );\n                    }\n                    return null;\n                  }}\n                />\n              </RadialBarChart>\n            </ResponsiveContainer>\n          </div>\n          \n          {/* Category Legend */}\n          <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-3 mt-4\">\n            {categoryAverages.map((category) => (\n              <div key={category.category} className=\"flex items-center space-x-2\">\n                {getIconForCategory(category.category)}\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium text-gray-900\">{category.category}</p>\n                  <p className=\"text-xs text-gray-500\">{category.value}% avg</p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Top Skills Bar Chart */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Code className=\"h-5 w-5 text-primary\" />\n            Top Skills\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-64 w-full\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart data={topSkills} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n                <XAxis \n                  dataKey=\"name\" \n                  tick={{ fontSize: 12 }}\n                  angle={-45}\n                  textAnchor=\"end\"\n                  height={60}\n                />\n                <YAxis \n                  domain={[0, 100]}\n                  tick={{ fontSize: 12 }}\n                />\n                <Tooltip\n                  content={({ active, payload, label }) => {\n                    if (active && payload && payload[0]) {\n                      return (\n                        <div className=\"bg-white p-3 shadow-lg rounded-lg border\">\n                          <p className=\"font-medium\">{label}</p>\n                          <p className=\"text-primary\">{payload[0].value}% proficiency</p>\n                        </div>\n                      );\n                    }\n                    return null;\n                  }}\n                />\n                <Bar \n                  dataKey=\"level\" \n                  fill=\"#4F46E5\"\n                  radius={[4, 4, 0, 0]}\n                />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5740},"client/src/components/stats-grid.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { User, Flame, Eye, Trophy } from \"lucide-react\";\n\ninterface StatsGridProps {\n  userId: string;\n}\n\nexport default function StatsGrid({ userId }: StatsGridProps) {\n  const { data: userStats } = useQuery({\n    queryKey: [\"/api/user-stats\", userId],\n  });\n\n  const { data: profile } = useQuery({\n    queryKey: [\"/api/profile\", userId],\n  });\n\n  // Mock data for demo\n  const stats = [\n    {\n      title: \"Profile Completion\",\n      value: \"85%\",\n      icon: User,\n      color: \"text-primary\",\n      bgColor: \"bg-primary bg-opacity-10\",\n      progress: 85,\n    },\n    {\n      title: \"Learning Streak\",\n      value: `${userStats?.currentStreak || 5} days`,\n      icon: Flame,\n      color: \"text-yellow-600\",\n      bgColor: \"bg-yellow-600 bg-opacity-10\",\n      subtitle: \"+47 XP today\",\n      subtitleColor: \"text-green-600\",\n    },\n    {\n      title: \"Portfolio Views\",\n      value: userStats?.portfolioViews?.toLocaleString() || \"1,234\",\n      icon: Eye,\n      color: \"text-green-600\",\n      bgColor: \"bg-green-600 bg-opacity-10\",\n      subtitle: \"+12% this week\",\n      subtitleColor: \"text-green-600\",\n    },\n    {\n      title: \"Skills Mastered\",\n      value: \"7 / 12\",\n      icon: Trophy,\n      color: \"text-purple-600\",\n      bgColor: \"bg-purple-600 bg-opacity-10\",\n      subtitle: \"React.js next\",\n      subtitleColor: \"text-gray-600\",\n    },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n      {stats.map((stat, index) => {\n        const IconComponent = stat.icon;\n        \n        return (\n          <Card key={index}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">{stat.title}</p>\n                  <p className=\"text-2xl font-bold text-gray-900 mt-1\">{stat.value}</p>\n                </div>\n                <div className={`w-12 h-12 ${stat.bgColor} rounded-lg flex items-center justify-center`}>\n                  <IconComponent className={`h-6 w-6 ${stat.color}`} />\n                </div>\n              </div>\n              \n              {stat.progress && (\n                <div className=\"mt-4 w-full\">\n                  <Progress value={stat.progress} className=\"h-2\" />\n                </div>\n              )}\n              \n              {stat.subtitle && (\n                <p className={`text-sm mt-2 ${stat.subtitleColor}`}>\n                  {stat.subtitle}\n                </p>\n              )}\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":2754},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/pdf-export.ts":{"content":"// PDF export functionality using browser's print API\n// In a real implementation, you might want to use react-pdf or similar\n\nexport interface ProfileData {\n  name: string;\n  role: string;\n  email: string;\n  phone: string;\n  location: string;\n  summary: string;\n}\n\nexport interface ResumeData {\n  profile: ProfileData;\n  workExperience: Array<{\n    title: string;\n    company: string;\n    startDate: string;\n    endDate?: string;\n    description: string;\n  }>;\n  education: Array<{\n    degree: string;\n    institution: string;\n    startDate: string;\n    endDate?: string;\n  }>;\n  skills: Array<{\n    name: string;\n    level: number;\n  }>;\n  projects: Array<{\n    title: string;\n    description: string;\n    technologies: string[];\n    link?: string;\n  }>;\n  certifications: Array<{\n    title: string;\n    issuer: string;\n    date: string;\n  }>;\n}\n\nexport function generatePDFResume(data: ResumeData) {\n  // Create a new window with the resume content\n  const printWindow = window.open('', '_blank');\n  \n  if (!printWindow) {\n    throw new Error('Unable to open print window. Please check your popup blocker.');\n  }\n\n  const htmlContent = `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <title>${data.profile.name} - Resume</title>\n      <meta charset=\"UTF-8\">\n      <style>\n        * {\n          margin: 0;\n          padding: 0;\n          box-sizing: border-box;\n        }\n        \n        body {\n          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n          line-height: 1.6;\n          color: #333;\n          max-width: 800px;\n          margin: 0 auto;\n          padding: 40px 20px;\n        }\n        \n        .header {\n          text-align: center;\n          margin-bottom: 40px;\n          padding-bottom: 20px;\n          border-bottom: 2px solid #4F46E5;\n        }\n        \n        .header h1 {\n          font-size: 2.5em;\n          color: #1a1a1a;\n          margin-bottom: 10px;\n        }\n        \n        .header .role {\n          font-size: 1.3em;\n          color: #4F46E5;\n          margin-bottom: 15px;\n        }\n        \n        .contact-info {\n          display: flex;\n          justify-content: center;\n          gap: 20px;\n          flex-wrap: wrap;\n          font-size: 0.9em;\n          color: #666;\n        }\n        \n        .section {\n          margin-bottom: 35px;\n        }\n        \n        .section h2 {\n          font-size: 1.4em;\n          color: #1a1a1a;\n          margin-bottom: 15px;\n          padding-bottom: 5px;\n          border-bottom: 1px solid #e0e0e0;\n        }\n        \n        .summary {\n          font-size: 1em;\n          line-height: 1.7;\n          text-align: justify;\n        }\n        \n        .experience-item, .education-item, .project-item {\n          margin-bottom: 20px;\n          padding-bottom: 15px;\n          border-bottom: 1px solid #f0f0f0;\n        }\n        \n        .experience-item:last-child,\n        .education-item:last-child,\n        .project-item:last-child {\n          border-bottom: none;\n        }\n        \n        .item-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: flex-start;\n          margin-bottom: 8px;\n        }\n        \n        .item-title {\n          font-weight: 600;\n          color: #1a1a1a;\n        }\n        \n        .item-company, .item-institution {\n          color: #4F46E5;\n          font-weight: 500;\n        }\n        \n        .item-date {\n          color: #666;\n          font-size: 0.9em;\n          white-space: nowrap;\n        }\n        \n        .item-description {\n          margin-top: 8px;\n          color: #555;\n        }\n        \n        .skills-grid {\n          display: grid;\n          grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n          gap: 15px;\n        }\n        \n        .skill-item {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          padding: 8px 0;\n        }\n        \n        .skill-name {\n          font-weight: 500;\n        }\n        \n        .skill-level {\n          color: #4F46E5;\n          font-weight: 600;\n        }\n        \n        .technologies {\n          margin-top: 8px;\n        }\n        \n        .tech-tag {\n          display: inline-block;\n          background: #f0f0f0;\n          color: #555;\n          padding: 3px 8px;\n          border-radius: 4px;\n          font-size: 0.8em;\n          margin-right: 8px;\n          margin-bottom: 4px;\n        }\n        \n        .certifications-grid {\n          display: grid;\n          grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n          gap: 15px;\n        }\n        \n        .cert-item {\n          padding: 15px;\n          border: 1px solid #e0e0e0;\n          border-radius: 6px;\n        }\n        \n        .cert-title {\n          font-weight: 600;\n          color: #1a1a1a;\n        }\n        \n        .cert-issuer {\n          color: #4F46E5;\n          margin-top: 4px;\n        }\n        \n        .cert-date {\n          color: #666;\n          font-size: 0.9em;\n          margin-top: 4px;\n        }\n        \n        @media print {\n          body {\n            padding: 20px;\n          }\n          \n          .section {\n            break-inside: avoid;\n          }\n          \n          .experience-item,\n          .education-item,\n          .project-item {\n            break-inside: avoid;\n          }\n        }\n      </style>\n    </head>\n    <body>\n      <div class=\"header\">\n        <h1>${data.profile.name}</h1>\n        <div class=\"role\">${data.profile.role}</div>\n        <div class=\"contact-info\">\n          <span>${data.profile.email}</span>\n          <span>${data.profile.phone}</span>\n          <span>${data.profile.location}</span>\n        </div>\n      </div>\n\n      ${data.profile.summary ? `\n      <div class=\"section\">\n        <h2>Professional Summary</h2>\n        <div class=\"summary\">${data.profile.summary}</div>\n      </div>\n      ` : ''}\n\n      ${data.workExperience.length > 0 ? `\n      <div class=\"section\">\n        <h2>Work Experience</h2>\n        ${data.workExperience.map(exp => `\n          <div class=\"experience-item\">\n            <div class=\"item-header\">\n              <div>\n                <div class=\"item-title\">${exp.title}</div>\n                <div class=\"item-company\">${exp.company}</div>\n              </div>\n              <div class=\"item-date\">${exp.startDate} - ${exp.endDate || 'Present'}</div>\n            </div>\n            ${exp.description ? `<div class=\"item-description\">${exp.description}</div>` : ''}\n          </div>\n        `).join('')}\n      </div>\n      ` : ''}\n\n      ${data.skills.length > 0 ? `\n      <div class=\"section\">\n        <h2>Skills</h2>\n        <div class=\"skills-grid\">\n          ${data.skills.map(skill => `\n            <div class=\"skill-item\">\n              <span class=\"skill-name\">${skill.name}</span>\n              <span class=\"skill-level\">${skill.level}%</span>\n            </div>\n          `).join('')}\n        </div>\n      </div>\n      ` : ''}\n\n      ${data.projects.length > 0 ? `\n      <div class=\"section\">\n        <h2>Projects</h2>\n        ${data.projects.map(project => `\n          <div class=\"project-item\">\n            <div class=\"item-title\">${project.title}</div>\n            ${project.description ? `<div class=\"item-description\">${project.description}</div>` : ''}\n            ${project.technologies.length > 0 ? `\n              <div class=\"technologies\">\n                ${project.technologies.map(tech => `<span class=\"tech-tag\">${tech}</span>`).join('')}\n              </div>\n            ` : ''}\n          </div>\n        `).join('')}\n      </div>\n      ` : ''}\n\n      ${data.education.length > 0 ? `\n      <div class=\"section\">\n        <h2>Education</h2>\n        ${data.education.map(edu => `\n          <div class=\"education-item\">\n            <div class=\"item-header\">\n              <div>\n                <div class=\"item-title\">${edu.degree}</div>\n                <div class=\"item-institution\">${edu.institution}</div>\n              </div>\n              <div class=\"item-date\">${edu.startDate} - ${edu.endDate || 'Present'}</div>\n            </div>\n          </div>\n        `).join('')}\n      </div>\n      ` : ''}\n\n      ${data.certifications.length > 0 ? `\n      <div class=\"section\">\n        <h2>Certifications</h2>\n        <div class=\"certifications-grid\">\n          ${data.certifications.map(cert => `\n            <div class=\"cert-item\">\n              <div class=\"cert-title\">${cert.title}</div>\n              <div class=\"cert-issuer\">${cert.issuer}</div>\n              <div class=\"cert-date\">${cert.date}</div>\n            </div>\n          `).join('')}\n        </div>\n      </div>\n      ` : ''}\n    </body>\n    </html>\n  `;\n\n  printWindow.document.write(htmlContent);\n  printWindow.document.close();\n\n  // Wait for content to load, then print\n  printWindow.onload = () => {\n    setTimeout(() => {\n      printWindow.print();\n      printWindow.close();\n    }, 500);\n  };\n}\n\nexport async function exportResumeAsPDF(userId: string) {\n  try {\n    // Fetch all resume data\n    const [profileRes, workRes, educationRes, skillsRes, projectsRes, certificationsRes] = await Promise.all([\n      fetch(`/api/profile/${userId}`),\n      fetch(`/api/work-experience/${userId}`),\n      fetch(`/api/education/${userId}`),\n      fetch(`/api/skills/${userId}`),\n      fetch(`/api/projects/${userId}`),\n      fetch(`/api/certifications/${userId}`),\n    ]);\n\n    const profile = await profileRes.json();\n    const workExperience = await workRes.json();\n    const education = await educationRes.json();\n    const skills = await skillsRes.json();\n    const projects = await projectsRes.json();\n    const certifications = await certificationsRes.json();\n\n    const resumeData: ResumeData = {\n      profile: {\n        name: profile.name || 'Your Name',\n        role: profile.role || 'Your Role',\n        email: profile.email || 'your.email@example.com',\n        phone: profile.phone || 'Your Phone',\n        location: profile.location || 'Your Location',\n        summary: profile.summary || '',\n      },\n      workExperience: workExperience.filter((exp: any) => exp.isVisible),\n      education: education.filter((edu: any) => edu.isVisible),\n      skills: skills.filter((skill: any) => skill.isVisible),\n      projects: projects.filter((project: any) => project.isVisible),\n      certifications: certifications.filter((cert: any) => cert.isVisible),\n    };\n\n    generatePDFResume(resumeData);\n  } catch (error) {\n    console.error('Error exporting resume:', error);\n    throw new Error('Failed to export resume. Please try again.');\n  }\n}\n","size_bytes":10550},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { type profiles } from \"@shared/schema\";\nimport Sidebar from \"@/components/sidebar\";\nimport StatsGrid from \"@/components/stats-grid\";\nimport LearningModules from \"@/components/learning-modules\";\nimport SkillRadarChart from \"@/components/skill-radar-chart\";\nimport ProjectsAchievements from \"@/components/projects-achievements\";\nimport ActivityCalendar from \"@/components/activity-calendar\";\nimport QuickActions from \"@/components/quick-actions\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Bell, FileText, Menu, X, Edit } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\n// Mock user ID for demo - in real app this would come from auth\nconst CURRENT_USER_ID = \"user-1\";\n\nexport default function Dashboard() {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  const { data: userStats } = useQuery({\n    queryKey: [\"/api/user-stats\", CURRENT_USER_ID],\n  });\n\n  const { data: profile } = useQuery<typeof profiles.$inferSelect>({\n    queryKey: [\"/api/profile\", CURRENT_USER_ID],\n  });\n\n  const handleExportPDF = () => {\n    // PDF export functionality will be implemented\n    console.log(\"Exporting PDF...\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      {/* Mobile sidebar overlay */}\n      {sidebarOpen && (\n        <div \n          className=\"lg:hidden fixed inset-0 z-40 bg-black bg-opacity-50\"\n          onClick={() => setSidebarOpen(false)}\n        />\n      )}\n      \n      {/* Sidebar */}\n      <div className={`\n        fixed inset-y-0 left-0 z-50 w-64 transform transition-transform duration-300 ease-in-out\n        ${sidebarOpen ? 'translate-x-0' : '-translate-x-full'}\n        lg:translate-x-0 lg:static lg:inset-0\n      `}>\n        <Sidebar onClose={() => setSidebarOpen(false)} />\n      </div>\n      \n      {/* Main content */}\n      <main className=\"lg:ml-64 min-h-screen\">\n        {/* Header */}\n        <header className=\"sticky top-0 z-30 bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex justify-between items-center\">\n            <div className=\"flex items-center space-x-4\">\n              {/* Mobile menu button */}\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"lg:hidden\"\n                onClick={() => setSidebarOpen(true)}\n              >\n                <Menu className=\"h-5 w-5\" />\n              </Button>\n              \n              <div>\n                <h2 className=\"text-2xl sm:text-3xl font-bold text-gray-900 dark:text-white\">\n                  Welcome back, <span className=\"text-primary\">Megharaj</span>!\n                </h2>\n                <p className=\"text-gray-600 dark:text-gray-300 mt-1 text-sm sm:text-base\">\n                  Manage your portfolio and continue learning\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-2 sm:space-x-4\">\n              {/* PDF Export Button - Hidden on mobile */}\n              <Button\n                onClick={handleExportPDF}\n                className=\"hidden sm:flex bg-red-600 text-white hover:bg-red-700\"\n                size=\"sm\"\n              >\n                <FileText className=\"mr-2 h-4 w-4\" />\n                Export PDF\n              </Button>\n              \n              {/* Mobile PDF button */}\n              <Button\n                onClick={handleExportPDF}\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"sm:hidden\"\n              >\n                <FileText className=\"h-5 w-5\" />\n              </Button>\n              \n              {/* Notifications */}\n              <div className=\"relative\">\n                <Button variant=\"ghost\" size=\"icon\" className=\"text-gray-600 hover:text-gray-900 dark:text-gray-300 dark:hover:text-white\">\n                  <Bell className=\"h-5 w-5\" />\n                  <span className=\"absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center\">\n                    3\n                  </span>\n                </Button>\n              </div>\n            </div>\n          </div>\n        </header>\n\n        <div className=\"p-4 sm:p-6 lg:p-8 space-y-6\">\n          {/* Hero Section */}\n          <section className=\"bg-white dark:bg-gray-800 rounded-xl p-6 border border-gray-200 dark:border-gray-700\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"relative\">\n                  <Avatar className=\"w-16 h-16\">\n                    <AvatarImage src={profile?.photoUrl || \"\"} alt={profile?.name || \"\"} />\n                    <AvatarFallback className=\"text-xl\">\n                      {profile?.name?.split(' ').map((n: string) => n[0]).join('') || 'U'}\n                    </AvatarFallback>\n                  </Avatar>\n                </div>\n                <div>\n                  <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                    {profile?.name || \"User Name\"}\n                  </h1>\n                  <p className=\"text-gray-600 dark:text-gray-400 font-medium\">\n                    {profile?.role || \"Professional Role\"}\n                  </p>\n                  <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                    {profile?.email || \"email@example.com\"}\n                  </p>\n                </div>\n              </div>\n              <Link href=\"/profile\">\n                <Button variant=\"outline\" size=\"sm\" className=\"flex items-center space-x-2\">\n                  <Edit className=\"w-4 h-4\" />\n                  <span>Edit Profile</span>\n                </Button>\n              </Link>\n            </div>\n          </section>\n\n          {/* Stats Cards */}\n          <StatsGrid userId={CURRENT_USER_ID} />\n\n          {/* Quick Actions - Mobile First */}\n          <div className=\"lg:hidden\">\n            <QuickActions />\n          </div>\n\n          {/* Learning Activity - Now before Learning Modules */}\n          <section>\n            <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-4\">Learning Activity</h3>\n            <ActivityCalendar userId={CURRENT_USER_ID} />\n          </section>\n\n          {/* Learning Modules */}\n          <LearningModules userId={CURRENT_USER_ID} />\n\n          {/* Skill Dashboard */}\n          <section>\n            <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-4\">Skill Dashboard</h3>\n            <SkillRadarChart userId={CURRENT_USER_ID} />\n          </section>\n\n          {/* Projects & Achievements */}\n          <section>\n            <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-4\">Projects & Achievements</h3>\n            <ProjectsAchievements userId={CURRENT_USER_ID} />\n          </section>\n\n          {/* Right sidebar content for desktop */}\n          <div className=\"hidden lg:block\">\n            <QuickActions />\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":7235},"client/src/pages/edit-portfolio.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { User, Briefcase, GraduationCap, Cog, FolderOpen, Award } from \"lucide-react\";\n\nconst CURRENT_USER_ID = \"user-1\";\n\nconst portfolioSections = [\n  { key: \"personal\", label: \"Personal Details\", icon: User, description: \"Name, contact, photo\" },\n  { key: \"work\", label: \"Work Experience\", icon: Briefcase, description: \"Professional experience\" },\n  { key: \"education\", label: \"Education\", icon: GraduationCap, description: \"Academic background\" },\n  { key: \"skills\", label: \"Skills\", icon: Cog, description: \"Technical and soft skills\" },\n  { key: \"projects\", label: \"Projects\", icon: FolderOpen, description: \"Portfolio projects\" },\n  { key: \"certifications\", label: \"Certifications\", icon: Award, description: \"Professional certifications\" },\n];\n\nexport default function EditPortfolio() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: sectionSettings = [] } = useQuery({\n    queryKey: [\"/api/section-settings\", CURRENT_USER_ID],\n  });\n\n  const updateSectionMutation = useMutation({\n    mutationFn: async ({ sectionName, isVisible }: { sectionName: string; isVisible: boolean }) => {\n      return apiRequest(\"PATCH\", `/api/section-settings/${CURRENT_USER_ID}/${sectionName}`, {\n        isVisible,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/section-settings\", CURRENT_USER_ID] });\n      toast({\n        title: \"Section updated\",\n        description: \"Portfolio section visibility updated successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update section visibility.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getSectionSettings = (sectionKey: string) => {\n    const setting = sectionSettings.find(s => s.sectionName === sectionKey);\n    return setting ? setting.isVisible : true;\n  };\n\n  const handleToggleSection = (sectionKey: string, isVisible: boolean) => {\n    updateSectionMutation.mutate({ sectionName: sectionKey, isVisible });\n  };\n\n  const getSectionCompletionStatus = (sectionKey: string) => {\n    // Mock completion status - in real app this would be calculated from actual data\n    const mockStatuses: Record<string, boolean> = {\n      personal: true,\n      work: true,\n      education: true,\n      skills: true,\n      projects: true,\n      certifications: false,\n    };\n    return mockStatuses[sectionKey] || false;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"flex justify-between items-center mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Edit Portfolio</h1>\n            <p className=\"text-gray-600 mt-1\">Toggle section visibility and manage your portfolio</p>\n          </div>\n          <div className=\"flex space-x-4\">\n            <Link href=\"/portfolio\">\n              <Button variant=\"outline\">Portfolio Settings</Button>\n            </Link>\n            <Link href=\"/dashboard\">\n              <Button variant=\"outline\">Back to Dashboard</Button>\n            </Link>\n          </div>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex justify-between items-center\">\n              Portfolio Sections\n              <span className=\"text-sm font-normal text-gray-500\">Toggle visibility</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {portfolioSections.map((section) => {\n                const isVisible = getSectionSettings(section.key);\n                const isComplete = getSectionCompletionStatus(section.key);\n                const IconComponent = section.icon;\n\n                return (\n                  <div\n                    key={section.key}\n                    className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors\"\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <IconComponent className=\"h-5 w-5 text-primary\" />\n                      <div>\n                        <h4 className=\"font-medium text-gray-900\">{section.label}</h4>\n                        <p className=\"text-sm text-gray-500\">{section.description}</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-3\">\n                      <Badge variant={isComplete ? \"default\" : \"secondary\"}>\n                        {isComplete ? \"Complete\" : \"Empty\"}\n                      </Badge>\n                      <Switch\n                        checked={isVisible}\n                        onCheckedChange={(checked) => handleToggleSection(section.key, checked)}\n                        disabled={updateSectionMutation.isPending}\n                      />\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"mt-8 flex justify-center\">\n          <Button size=\"lg\" asChild>\n            <Link href=\"/portfolio/megharaj\">\n              Preview Portfolio\n            </Link>\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5739},"client/src/pages/learning.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  BookOpen, Trophy, Play, Clock, Users, Star, Search, Filter,\n  Code, Database, Cpu, Zap, Globe, Smartphone, Palette, TrendingUp,\n  ChevronRight, Calendar, Award, ExternalLink\n} from \"lucide-react\";\n\nconst CURRENT_USER_ID = \"user-1\";\n\nconst categories = [\n  { name: \"Popular Courses\", icon: Trophy, color: \"text-blue-600\", count: 145 },\n  { name: \"AI & Machine Learning\", icon: Cpu, color: \"text-purple-600\", count: 89 },\n  { name: \"Data Science & Analytics\", icon: Database, color: \"text-green-600\", count: 76 },\n  { name: \"Generative AI\", icon: Zap, color: \"text-yellow-600\", count: 54 },\n  { name: \"Management\", icon: Users, color: \"text-orange-600\", count: 67 },\n  { name: \"Software & Tech\", icon: Code, color: \"text-blue-500\", count: 123 },\n  { name: \"Doctorate\", icon: Award, color: \"text-red-600\", count: 23 },\n  { name: \"Microsoft Programs\", icon: Globe, color: \"text-cyan-600\", count: 45 },\n  { name: \"EV Design\", icon: Palette, color: \"text-pink-600\", count: 12 },\n  { name: \"Cloud Computing\", icon: Globe, color: \"text-indigo-600\", count: 78 },\n  { name: \"Design\", icon: Palette, color: \"text-rose-600\", count: 34 }\n];\n\nconst levels = [\n  { name: \"Beginner\", count: 721 },\n  { name: \"Intermediate\", count: 300 },\n  { name: \"Advanced\", count: 28 },\n  { name: \"Mixed\", count: 126 }\n];\n\nconst durations = [\n  { name: \"Less Than 2 Hours\", count: 278 },\n  { name: \"1-4 Weeks\", count: 416 },\n  { name: \"1-3 Months\", count: 399 },\n  { name: \"3-6 Months\", count: 82 }\n];\n\nconst skills = [\n  { name: \"Data Analysis\", count: 95 },\n  { name: \"Generative AI\", count: 84 },\n  { name: \"Content Creation\", count: 80 },\n  { name: \"Marketing\", count: 77 }\n];\n\n// Mock featured courses data\nconst featuredCourses = [\n  {\n    id: \"1\",\n    title: \"PG Program in Artificial Intelligence & Machine Learning\",\n    provider: \"MCCOMES SCHOOL OF BUSINESS AT THE\",\n    duration: \"12 Months\",\n    format: \"Online\",\n    badge: \"#1 RANKED AI PROGRAM\",\n    image: \"/api/placeholder/300/200\",\n    rating: 4.8,\n    enrollments: 15420,\n    price: \"Free Trial\"\n  },\n  {\n    id: \"2\", \n    title: \"Post Graduate Program in Data Science with Generative AI\",\n    provider: \"MCCOMES SCHOOL OF BUSINESS AT THE\",\n    duration: \"12 months\",\n    format: \"Online\", \n    badge: \"DEDICATED CAREER SUPPORT\",\n    image: \"/api/placeholder/300/200\",\n    rating: 4.7,\n    enrollments: 8950,\n    price: \"Free Trial\"\n  },\n  {\n    id: \"3\",\n    title: \"Post Graduate Diploma in Management (Online)\",\n    provider: \"GREAT LAKES INSTITUTE OF MANAGEMENT\",\n    duration: \"24 Months\",\n    format: \"Online\",\n    badge: \"ONLINE MBA EQUIVALENT\", \n    image: \"/api/placeholder/300/200\",\n    rating: 4.9,\n    enrollments: 12340,\n    price: \"Free Trial\"\n  },\n  {\n    id: \"4\",\n    title: \"PGP in Data Science (with Specialization in Gen AI)\",\n    provider: \"GREAT LAKES EXECUTIVE LEARNING\",\n    duration: \"5 months\",\n    format: \"Classroom\",\n    badge: \"DEDICATED PLACEMENT ASSISTANCE\",\n    image: \"/api/placeholder/300/200\", \n    rating: 4.6,\n    enrollments: 6780,\n    price: \"Preview\"\n  },\n  {\n    id: \"5\",\n    title: \"Generative AI for Business with Microsoft Azure OpenAI Program\", \n    provider: \"MICROSOFT AZURE\",\n    duration: \"16 weeks\",\n    format: \"Online\",\n    badge: \"MICROSOFT CERTIFIED\",\n    image: \"/api/placeholder/300/200\",\n    rating: 4.5,\n    enrollments: 9340,\n    price: \"Free Trial\"\n  },\n  {\n    id: \"6\",\n    title: \"6-Postgraduate Diploma (ePGD) in Artificial Intelligence and Data Science\",\n    provider: \"IIT BOMBAY\", \n    duration: \"18 months\",\n    format: \"Online\",\n    badge: \"IIT BOMBAY CERTIFIED\",\n    image: \"/api/placeholder/300/200\",\n    rating: 4.8,\n    enrollments: 11200,\n    price: \"Free Trial\"\n  }\n];\n\nexport default function Learning() {\n  const [selectedCategory, setSelectedCategory] = useState(\"Popular Courses\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedLevels, setSelectedLevels] = useState<string[]>([]);\n  const [selectedDurations, setSelectedDurations] = useState<string[]>([]);\n  const [selectedSkills, setSelectedSkills] = useState<string[]>([]);\n  const [sortBy, setSortBy] = useState(\"relevance\");\n\n  const { data: modules = [] } = useQuery({\n    queryKey: [\"/api/learning-modules\"],\n  });\n\n  const { data: userProgress = [] } = useQuery({\n    queryKey: [\"/api/user-progress\", CURRENT_USER_ID],\n  });\n\n  const handleLevelChange = (level: string, checked: boolean) => {\n    setSelectedLevels(prev => \n      checked ? [...prev, level] : prev.filter(l => l !== level)\n    );\n  };\n\n  const handleDurationChange = (duration: string, checked: boolean) => {\n    setSelectedDurations(prev => \n      checked ? [...prev, duration] : prev.filter(d => d !== duration)\n    );\n  };\n\n  const handleSkillChange = (skill: string, checked: boolean) => {\n    setSelectedSkills(prev => \n      checked ? [...prev, skill] : prev.filter(s => s !== skill)\n    );\n  };\n\n  const filteredCourses = featuredCourses.filter(course => {\n    const matchesSearch = course.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         course.provider.toLowerCase().includes(searchQuery.toLowerCase());\n    return matchesSearch;\n  });\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <div className=\"max-w-7xl mx-auto p-6\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Learning Hub</h1>\n            <p className=\"text-gray-600 dark:text-gray-400 mt-1\">Explore courses and advance your skills</p>\n          </div>\n          <Link href=\"/dashboard\">\n            <Button variant=\"outline\">Back to Dashboard</Button>\n          </Link>\n        </div>\n\n        <div className=\"flex gap-8\">\n          {/* Sidebar with Categories and Filters */}\n          <div className=\"w-80 space-y-6\">\n            {/* Search */}\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n              <Input\n                placeholder=\"Search courses...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n\n            {/* Categories */}\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-lg flex items-center\">\n                  <BookOpen className=\"mr-2 h-5 w-5\" />\n                  Categories\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                {categories.map((category) => {\n                  const IconComponent = category.icon;\n                  return (\n                    <Button\n                      key={category.name}\n                      variant={selectedCategory === category.name ? \"default\" : \"ghost\"}\n                      className=\"w-full justify-start h-auto p-3\"\n                      onClick={() => setSelectedCategory(category.name)}\n                    >\n                      <div className=\"flex items-center justify-between w-full\">\n                        <div className=\"flex items-center\">\n                          <IconComponent className={`mr-2 h-4 w-4 ${category.color}`} />\n                          <span className=\"text-sm\">{category.name}</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <span className=\"text-xs text-gray-500 mr-1\">({category.count})</span>\n                          <ChevronRight className=\"h-3 w-3\" />\n                        </div>\n                      </div>\n                    </Button>\n                  );\n                })}\n              </CardContent>\n            </Card>\n\n            {/* Filters */}\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-lg flex items-center\">\n                  <Filter className=\"mr-2 h-5 w-5\" />\n                  Filters\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Level Filter */}\n                <div>\n                  <h4 className=\"font-semibold text-gray-900 dark:text-white mb-3\">Level</h4>\n                  <div className=\"space-y-2\">\n                    {levels.map((level) => (\n                      <div key={level.name} className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          id={level.name}\n                          checked={selectedLevels.includes(level.name)}\n                          onCheckedChange={(checked) => handleLevelChange(level.name, checked as boolean)}\n                        />\n                        <label htmlFor={level.name} className=\"text-sm cursor-pointer flex-1\">\n                          {level.name} ({level.count})\n                        </label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                <Separator />\n\n                {/* Duration Filter */}\n                <div>\n                  <h4 className=\"font-semibold text-gray-900 dark:text-white mb-3\">Duration</h4>\n                  <div className=\"space-y-2\">\n                    {durations.map((duration) => (\n                      <div key={duration.name} className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          id={duration.name}\n                          checked={selectedDurations.includes(duration.name)}\n                          onCheckedChange={(checked) => handleDurationChange(duration.name, checked as boolean)}\n                        />\n                        <label htmlFor={duration.name} className=\"text-sm cursor-pointer flex-1\">\n                          {duration.name} ({duration.count})\n                        </label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                <Separator />\n\n                {/* Skills Filter */}\n                <div>\n                  <h4 className=\"font-semibold text-gray-900 dark:text-white mb-3\">Skills</h4>\n                  <div className=\"space-y-2\">\n                    {skills.map((skill) => (\n                      <div key={skill.name} className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          id={skill.name}\n                          checked={selectedSkills.includes(skill.name)}\n                          onCheckedChange={(checked) => handleSkillChange(skill.name, checked as boolean)}\n                        />\n                        <label htmlFor={skill.name} className=\"text-sm cursor-pointer flex-1\">\n                          {skill.name} ({skill.count})\n                        </label>\n                      </div>\n                    ))}\n                    <Button variant=\"link\" className=\"h-auto p-0 text-xs\">\n                      Show more\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Main Content */}\n          <div className=\"flex-1 space-y-6\">\n            {/* Sort and Results Count */}\n            <div className=\"flex justify-between items-center\">\n              <p className=\"text-gray-600 dark:text-gray-400\">\n                Showing {filteredCourses.length} of {featuredCourses.length} courses\n              </p>\n              <Select value={sortBy} onValueChange={setSortBy}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"Sort by\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"relevance\">Most Relevant</SelectItem>\n                  <SelectItem value=\"rating\">Highest Rated</SelectItem>\n                  <SelectItem value=\"popular\">Most Popular</SelectItem>\n                  <SelectItem value=\"newest\">Newest</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Course Grid */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredCourses.map((course) => (\n                <Card key={course.id} className=\"hover:shadow-lg transition-all duration-200 group\">\n                  <div className=\"relative\">\n                    <div className=\"h-48 bg-gradient-to-br from-blue-400 to-purple-600 rounded-t-lg flex items-center justify-center\">\n                      <div className=\"text-white text-center\">\n                        <BookOpen className=\"h-12 w-12 mx-auto mb-2 opacity-80\" />\n                        <p className=\"text-xs opacity-60\">{course.provider}</p>\n                      </div>\n                    </div>\n                    {course.price && (\n                      <Badge className=\"absolute top-3 right-3 bg-blue-600 text-white\">\n                        {course.price}\n                      </Badge>\n                    )}\n                  </div>\n                  \n                  <CardHeader className=\"pb-2\">\n                    <div className=\"space-y-2\">\n                      <p className=\"text-xs text-gray-500 dark:text-gray-400 uppercase tracking-wide\">\n                        {course.provider}\n                      </p>\n                      <CardTitle className=\"text-lg leading-tight line-clamp-2\">\n                        {course.title}\n                      </CardTitle>\n                      {course.badge && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {course.badge}\n                        </Badge>\n                      )}\n                    </div>\n                  </CardHeader>\n                  \n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between text-sm text-gray-600 dark:text-gray-400\">\n                      <div className=\"flex items-center\">\n                        <Calendar className=\"h-4 w-4 mr-1\" />\n                        {course.duration}\n                      </div>\n                      <div className=\"flex items-center\">\n                        <Globe className=\"h-4 w-4 mr-1\" />\n                        {course.format}\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-1\">\n                        <div className=\"flex\">\n                          {[...Array(5)].map((_, i) => (\n                            <Star\n                              key={i}\n                              className={`h-4 w-4 ${\n                                i < Math.floor(course.rating)\n                                  ? 'text-yellow-400 fill-current'\n                                  : 'text-gray-300'\n                              }`}\n                            />\n                          ))}\n                        </div>\n                        <span className=\"text-sm font-medium\">{course.rating}</span>\n                      </div>\n                      <div className=\"flex items-center text-sm text-gray-500\">\n                        <Users className=\"h-4 w-4 mr-1\" />\n                        {course.enrollments.toLocaleString()}\n                      </div>\n                    </div>\n\n                    <Link href={`/course/${course.id}`}>\n                      <Button className=\"w-full\" variant=\"outline\">\n                        View Program\n                        <ExternalLink className=\"ml-2 h-4 w-4\" />\n                      </Button>\n                    </Link>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {/* Load More */}\n            <div className=\"flex justify-center pt-8\">\n              <Button variant=\"outline\" size=\"lg\">\n                Load More Courses\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":16694},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/portfolio.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { ExternalLink } from \"lucide-react\";\n\nexport default function Portfolio() {\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"flex justify-between items-center mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Portfolio Management</h1>\n            <p className=\"text-gray-600 mt-1\">Manage your public portfolio settings and preview</p>\n          </div>\n          <Link href=\"/dashboard\">\n            <Button variant=\"outline\">Back to Dashboard</Button>\n          </Link>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <h2 className=\"text-xl font-semibold mb-4\">Portfolio Settings</h2>\n              <div className=\"space-y-4\">\n                <Button className=\"w-full\" asChild>\n                  <Link href=\"/edit-portfolio\">\n                    Edit Portfolio Sections\n                  </Link>\n                </Button>\n                <Button variant=\"outline\" className=\"w-full\">\n                  Change Theme\n                </Button>\n                <Button variant=\"outline\" className=\"w-full\">\n                  SEO Settings\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <h2 className=\"text-xl font-semibold mb-4\">Public Portfolio</h2>\n              <div className=\"space-y-4\">\n                <p className=\"text-sm text-gray-600\">\n                  Your portfolio is live at: <br />\n                  <span className=\"font-mono bg-gray-100 px-2 py-1 rounded\">\n                    /portfolio/megharaj\n                  </span>\n                </p>\n                <Button className=\"w-full\" asChild>\n                  <Link href=\"/portfolio/megharaj\">\n                    <ExternalLink className=\"mr-2 h-4 w-4\" />\n                    View Public Portfolio\n                  </Link>\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2313},"client/src/pages/public-portfolio.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useRoute } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Mail, Phone, MapPin, ExternalLink, Github, \n  Calendar, Building, GraduationCap \n} from \"lucide-react\";\n\nexport default function PublicPortfolio() {\n  const [, params] = useRoute(\"/portfolio/:username\");\n  const username = params?.username;\n\n  // Mock user ID mapping - in real app this would be resolved from username\n  const CURRENT_USER_ID = \"user-1\";\n\n  const { data: profile } = useQuery({\n    queryKey: [\"/api/profile\", CURRENT_USER_ID],\n  });\n\n  const { data: workExperience = [] } = useQuery({\n    queryKey: [\"/api/work-experience\", CURRENT_USER_ID],\n  });\n\n  const { data: education = [] } = useQuery({\n    queryKey: [\"/api/education\", CURRENT_USER_ID],\n  });\n\n  const { data: skills = [] } = useQuery({\n    queryKey: [\"/api/skills\", CURRENT_USER_ID],\n  });\n\n  const { data: projects = [] } = useQuery({\n    queryKey: [\"/api/projects\", CURRENT_USER_ID],\n  });\n\n  const { data: certifications = [] } = useQuery({\n    queryKey: [\"/api/certifications\", CURRENT_USER_ID],\n  });\n\n  if (!profile) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Portfolio Not Found</h1>\n          <p className=\"text-gray-600\">The portfolio for \"{username}\" could not be found.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Hero Section */}\n      <div className=\"bg-gradient-to-r from-primary to-purple-600 text-white py-16\">\n        <div className=\"max-w-4xl mx-auto px-8\">\n          <div className=\"flex items-center space-x-6\">\n            <div className=\"w-24 h-24 bg-white bg-opacity-20 rounded-full flex items-center justify-center\">\n              <span className=\"text-3xl font-bold\">\n                {profile.name?.charAt(0) || \"M\"}\n              </span>\n            </div>\n            <div>\n              <h1 className=\"text-4xl font-bold mb-2\">{profile.name || \"Megharaj K\"}</h1>\n              <p className=\"text-xl opacity-90 mb-4\">{profile.role || \"Full Stack Developer\"}</p>\n              <div className=\"flex items-center space-x-4 text-sm opacity-80\">\n                <span className=\"flex items-center\">\n                  <Mail className=\"mr-1 h-4 w-4\" />\n                  {profile.email || \"megharaj@example.com\"}\n                </span>\n                <span className=\"flex items-center\">\n                  <Phone className=\"mr-1 h-4 w-4\" />\n                  {profile.phone || \"+91 12345 67890\"}\n                </span>\n                <span className=\"flex items-center\">\n                  <MapPin className=\"mr-1 h-4 w-4\" />\n                  {profile.location || \"Tamil Nadu, India\"}\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-4xl mx-auto px-8 py-12\">\n        {/* About Section */}\n        {profile.summary && (\n          <Card className=\"mb-8\">\n            <CardHeader>\n              <CardTitle>About Me</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-gray-700 leading-relaxed\">{profile.summary}</p>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Skills Section */}\n        {skills.length > 0 && (\n          <Card className=\"mb-8\">\n            <CardHeader>\n              <CardTitle>Skills</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {skills.filter(skill => skill.isVisible).map((skill) => (\n                  <div key={skill.id}>\n                    <div className=\"flex justify-between text-sm mb-1\">\n                      <span className=\"font-medium text-gray-700\">{skill.name}</span>\n                      <span className=\"text-gray-500\">{skill.level}%</span>\n                    </div>\n                    <Progress value={skill.level} className=\"h-2\" />\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Projects Section */}\n        {projects.length > 0 && (\n          <Card className=\"mb-8\">\n            <CardHeader>\n              <CardTitle>Projects</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {projects.filter(project => project.isVisible).map((project) => (\n                  <div key={project.id} className=\"border border-gray-200 rounded-lg p-4\">\n                    <h3 className=\"font-semibold text-gray-900 mb-2\">{project.title}</h3>\n                    <p className=\"text-gray-600 text-sm mb-3\">{project.description}</p>\n                    {project.technologies && (\n                      <div className=\"flex flex-wrap gap-1 mb-3\">\n                        {project.technologies.map((tech, index) => (\n                          <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                            {tech}\n                          </Badge>\n                        ))}\n                      </div>\n                    )}\n                    <div className=\"flex space-x-2\">\n                      {project.link && (\n                        <Button size=\"sm\" variant=\"outline\" asChild>\n                          <a href={project.link} target=\"_blank\" rel=\"noopener noreferrer\">\n                            <ExternalLink className=\"mr-1 h-3 w-3\" />\n                            Demo\n                          </a>\n                        </Button>\n                      )}\n                      {project.githubLink && (\n                        <Button size=\"sm\" variant=\"outline\" asChild>\n                          <a href={project.githubLink} target=\"_blank\" rel=\"noopener noreferrer\">\n                            <Github className=\"mr-1 h-3 w-3\" />\n                            Code\n                          </a>\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Work Experience Section */}\n        {workExperience.length > 0 && (\n          <Card className=\"mb-8\">\n            <CardHeader>\n              <CardTitle>Work Experience</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {workExperience.filter(exp => exp.isVisible).map((exp) => (\n                  <div key={exp.id} className=\"border-l-2 border-primary pl-4\">\n                    <h3 className=\"font-semibold text-gray-900\">{exp.title}</h3>\n                    <div className=\"flex items-center text-gray-600 text-sm mb-2\">\n                      <Building className=\"mr-1 h-4 w-4\" />\n                      <span className=\"mr-4\">{exp.company}</span>\n                      <Calendar className=\"mr-1 h-4 w-4\" />\n                      <span>{exp.startDate} - {exp.endDate || \"Present\"}</span>\n                    </div>\n                    {exp.description && (\n                      <p className=\"text-gray-700\">{exp.description}</p>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Education Section */}\n        {education.length > 0 && (\n          <Card className=\"mb-8\">\n            <CardHeader>\n              <CardTitle>Education</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {education.filter(edu => edu.isVisible).map((edu) => (\n                  <div key={edu.id} className=\"flex items-start space-x-3\">\n                    <GraduationCap className=\"h-5 w-5 text-primary mt-1\" />\n                    <div>\n                      <h3 className=\"font-semibold text-gray-900\">{edu.degree}</h3>\n                      <p className=\"text-gray-600\">{edu.institution}</p>\n                      <p className=\"text-sm text-gray-500\">\n                        {edu.startDate} - {edu.endDate || \"Present\"}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Certifications Section */}\n        {certifications.length > 0 && (\n          <Card className=\"mb-8\">\n            <CardHeader>\n              <CardTitle>Certifications</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {certifications.filter(cert => cert.isVisible).map((cert) => (\n                  <div key={cert.id} className=\"flex justify-between items-start\">\n                    <div>\n                      <h3 className=\"font-semibold text-gray-900\">{cert.title}</h3>\n                      <p className=\"text-gray-600\">{cert.issuer}</p>\n                      <p className=\"text-sm text-gray-500\">{cert.date}</p>\n                    </div>\n                    {cert.link && (\n                      <Button size=\"sm\" variant=\"outline\" asChild>\n                        <a href={cert.link} target=\"_blank\" rel=\"noopener noreferrer\">\n                          <ExternalLink className=\"h-3 w-3\" />\n                        </a>\n                      </Button>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Contact CTA */}\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Let's Work Together</h2>\n            <p className=\"text-gray-600 mb-4\">\n              Interested in collaborating? I'd love to hear from you.\n            </p>\n            <Button size=\"lg\" asChild>\n              <a href={`mailto:${profile.email || \"megharaj@example.com\"}`}>\n                Get In Touch\n              </a>\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10347},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }","size_bytes":1404},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }","size_bytes":1882},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}