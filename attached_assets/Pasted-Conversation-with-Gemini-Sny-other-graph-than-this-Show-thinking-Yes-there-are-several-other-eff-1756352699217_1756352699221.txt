Conversation with Gemini
Sny other graph than this



Show thinking
Yes, there are several other effective graphs you could use to visualize your study progress, each revealing different insights.

Based on your data, here are three excellent alternatives to the charts you already have.

1. Calendar Heat Map
This chart is excellent for visualizing your daily consistency and study habits over a year, similar to GitHub's contribution graph.

What it shows: Your day-to-day productivity.
How to implement it: You would create a grid where each cell represents a day. The color of the cell would be darker based on the number of subtopics you completed on that specific day.
Why it's useful: It instantly shows your study streaks, highlights periods of inactivity (holidays, breaks), and helps you see which days of the week are most productive for you.

2. Radar Chart (Spider Chart)
A radar chart is perfect for comparing your performance across multiple categories to identify your strengths and weaknesses at a glance.

What it shows: Your proficiency balance across different subjects.
How to implement it: Each axis of the chart represents a different category or topic (e.g., "Quantitative Aptitude," "General Awareness," "English"). You would plot the completion percentage for each category on its corresponding axis.
Why it's useful: A large, even shape indicates you are well-rounded. A spiky, skewed shape immediately shows which subjects you're excelling at and which ones need more attention.

Licensed by Google

3. Treemap
A treemap is a space-efficient way to visualize the entire structure of your goal and see the status of all its parts in one view.

What it shows: A hierarchical overview of all topics and subtopics.
How to implement it: The chart is made of nested rectangles. The large rectangles could represent your topics. Inside each topic, smaller rectangles would represent the subtopics. The color of each small rectangle would indicate its status (e.g., green for completed, yellow for in progress, gray for pending).
Why it's useful: It gives you a "bird's-eye view" of your entire study plan, making it easy to see which larger topics have the most remaining work.





const ApexChart = () => {

const [state, setState] = React.useState({


series: [{

name: 'XYZ MOTORS',

data: dates

}],

options: {

chart: {

type: 'area',

stacked: false,

height: 350,

zoom: {

type: 'x',

enabled: true,

autoScaleYaxis: true

},

toolbar: {

autoSelected: 'zoom'

}

},

dataLabels: {

enabled: false

},

markers: {

size: 0,

},

title: {

text: 'Stock Price Movement',

align: 'left'

},

fill: {

type: 'gradient',

gradient: {

shadeIntensity: 1,

inverseColors: false,

opacityFrom: 0.5,

opacityTo: 0,

stops: [0, 90, 100]

},

},

yaxis: {

labels: {

formatter: function (val) {

return (val / 1000000).toFixed(0);

},

},

title: {

text: 'Price'

},

},

xaxis: {

type: 'datetime',

},

tooltip: {

shared: false,

y: {

formatter: function (val) {

return (val / 1000000).toFixed(0)

}

}

}

},



});






return (

<div>

<div id="chart">

<ReactApexChart options={state.options} series={state.series} type="area" height={350} />

</div>

<div id="html-dist"></div>

</div>

);

}



const domContainer = document.querySelector('#app');

ReactDOM.render(<ApexChart />, domContainer);

use this template and modify my below code import { useState, useMemo } from "react";

import { useMutation, useQuery } from "@tanstack/react-query";

import { queryClient } from "@/lib/queryClient";

import { useAuth } from "@/hooks/useAuth";

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

import { Button } from "@/components/ui/button";

import { Input } from "@/components/ui/input";

import { Label } from "@/components/ui/label";

import { useToast } from "@/hooks/use-toast";

import { Progress } from "@/components/ui/progress";

import { Badge } from "@/components/ui/badge";

import {

  Dialog,

  DialogContent,

  DialogHeader,

  DialogTitle,

  DialogTrigger,

} from "@/components/ui/dialog";

import {

  Select,

  SelectContent,

  SelectItem,

  SelectTrigger,

  SelectValue,

} from "@/components/ui/select";

import { Target, TrendingUp, Upload, ArrowLeft } from "lucide-react";

import Sidebar from "@/components/sidebar";

import {

  LineChart,

  Line,

  XAxis,

  YAxis,

  CartesianGrid,

  Tooltip,

  ResponsiveContainer,

  Legend,

  BarChart,

  Bar,

  PieChart,

  Pie,

  Cell,

} from "recharts";

import { navigate } from "wouter/use-browser-location";



// Get URL search params

const getURLParams = () => {

  const urlParams = new URLSearchParams(window.location.search);

  return {

    type: urlParams.get("type") || null,

  };

};



// Interfaces for the Goal tracking system

interface GoalCategory {

  id: string;

  goalId: string;

  name: string;

  description?: string;

  totalTopics: number;

  completedTopics: number;

  totalSubtopics: number;

  completedSubtopics: number;

  createdAt: string;

}



interface Goal {

  id: string;

  name: string;

  description?: string;

  totalTopics: number;

  completedTopics: number;

  totalSubtopics: number;

  completedSubtopics: number;

  createdAt: string;

  updatedAt: string;

  categories?: GoalCategory[];

}



interface ProgressDataPoint {

  date: string;

  [key: string]: number | string;

}



const GOAL_COLOR = "#3b82f6";



// API functions for goals

const fetchUserGoals = async () => {

  const response = await fetch("/api/goals", {

    credentials: "include",

  });

  if (!response.ok) {

    throw new Error("Failed to fetch goals");

  }

  return response.json();

};



const fetchGoalCategories = async (goalId: string) => {

  const response = await fetch(`/api/goals/${goalId}/categories`, {

    credentials: "include",

  });

  if (!response.ok) {

    throw new Error("Failed to fetch goal categories");

  }

  return response.json();

};



const createGoalFromCSVApi = async (data: {

  goalName: string;

  csvData: any[];

}) => {

  const response = await fetch("/api/goals/from-csv", {

    method: "POST",

    headers: { "Content-Type": "application/json" },

    credentials: "include",

    body: JSON.stringify(data),

  });

  if (!response.ok) {

    const error = await response.json();

    throw new Error(error.message || "Failed to create goal from CSV");

  }

  return response.json();

};



export default function GoalTracker() {

  const { user } = useAuth();

  const { toast } = useToast();

  const currentYear = new Date().getFullYear();



  // Get URL parameters

  const { type: selectedGoalType } = getURLParams();



  // Fetch user goals

  const {

    data: goals = [],

    isLoading: goalsLoading,

    error: goalsError,

  } = useQuery({

    queryKey: ["goals"],

    queryFn: fetchUserGoals,

    enabled: !!user,

  });



  // Group goals by type/category for card display

  const goalsByType = useMemo(() => {

    const grouped: { [key: string]: Goal[] } = {};

    goals.forEach((goal: Goal) => {

      // Extract type from goal name (TNPSC, SSC, etc.)

      const goalName = goal.name.toLowerCase();

      let type = "Other";



      if (goalName.includes("tnpsc")) {

        type = "TNPSC";

      } else if (goalName.includes("ssc")) {

        type = "SSC";

      } else if (goalName.includes("upsc")) {

        type = "UPSC";

      } else if (goalName.includes("bank")) {

        type = "Banking";

      }



      if (!grouped[type]) {

        grouped[type] = [];

      }

      grouped[type].push(goal);

    });

    return grouped;

  }, [goals]);



  // Filter goals based on selected type

  const filteredGoals = useMemo(() => {

    if (!selectedGoalType) return goals;



    return goals.filter((goal: Goal) => {

      const goalName = goal.name.toLowerCase();

      const type = selectedGoalType.toLowerCase();



      if (type === "tnpsc") return goalName.includes("tnpsc");

      if (type === "ssc") return goalName.includes("ssc");

      if (type === "upsc") return goalName.includes("upsc");

      if (type === "banking") return goalName.includes("bank");

      return type === "other";

    });

  }, [goals, selectedGoalType]);



  // Get all categories from filtered goals for detailed view

  const allCategories = useMemo(() => {

    const categories: GoalCategory[] = [];

    filteredGoals.forEach((goal: Goal) => {

      if (goal.categories) {

        goal.categories.forEach((category) => {

          categories.push({

            ...category,

            goalName: goal.name,

            goalId: goal.id,

          } as GoalCategory & { goalName: string });

        });

      }

    });

    return categories;

  }, [filteredGoals]);



  // State for filters

  const [selectedYear, setSelectedYear] = useState<number>(currentYear);

  const [selectedMonth, setSelectedMonth] = useState<string>("all");



  // CSV upload state

  const [csvFile, setCsvFile] = useState<File | null>(null);

  const [goalName, setGoalName] = useState("");

  const [isUploading, setIsUploading] = useState(false);



  // CSV upload mutation

  const csvUploadMutation = useMutation({

    mutationFn: createGoalFromCSVApi,

    onSuccess: () => {

      toast({ title: "Success!", description: "Goal created from CSV" });

      queryClient.invalidateQueries({ queryKey: ["goals"] });

      setCsvFile(null);

      setGoalName("");

    },

    onError: (error: any) => {

      toast({

        title: "Upload failed",

        description: error.message,

        variant: "destructive",

      });

    },

  });



  const parseCSV = (file: File): Promise<any[]> => {

    return new Promise((resolve, reject) => {

      const reader = new FileReader();

      reader.onload = (e) => {

        try {

          const text = e.target?.result as string;

          const lines = text.split("\n").filter((line) => line.trim());

          if (lines.length < 2) {

            reject(

              new Error("CSV must have a header and at least one data row")

            );

            return;

          }

          const headers = lines[0]

            .split(",")

            .map((h) => h.trim().toLowerCase());

          const data = lines.slice(1).map((line) => {

            const values = line.split(",").map((v) => v.trim());

            const row: any = {};

            headers.forEach((header, index) => {

              row[header] = values[index] || "";

            });

            return row;

          });

          resolve(data);

        } catch (error) {

          reject(new Error("Failed to parse CSV file"));

        }

      };

      reader.onerror = () => reject(new Error("Failed to read file"));

      reader.readAsText(file);

    });

  };



  const handleCSVUpload = async () => {

    if (!csvFile || !goalName.trim()) {

      toast({

        title: "Missing information",

        description: "Please select a file and enter a goal name",

        variant: "destructive",

      });

      return;

    }

    setIsUploading(true);

    try {

      const csvData = await parseCSV(csvFile);

      await csvUploadMutation.mutateAsync({

        goalName: goalName.trim(),

        csvData,

      });

    } catch (error: any) {

      toast({

        title: "Upload failed",

        description: error.message,

        variant: "destructive",

      });

    } finally {

      setIsUploading(false);

    }

  };



  const months = [

    { value: "all", label: "All Months" },

    { value: "01", label: "January" },

    { value: "02", label: "February" },

    { value: "03", label: "March" },

    { value: "04", label: "April" },

    { value: "05", label: "May" },

    { value: "06", label: "June" },

    { value: "07", label: "July" },

    { value: "08", label: "August" },

    { value: "09", label: "September" },

    { value: "10", label: "October" },

    { value: "11", label: "November" },

    { value: "12", label: "December" },

  ];



  const cumulativeProgressData = useMemo(() => {

    if (allCategories.length === 0) return [];



    // Create simple progress data for the overall goal

    const dataPoints: ProgressDataPoint[] = [];

    const startDate = new Date(

      selectedYear,

      selectedMonth === "all" ? 0 : parseInt(selectedMonth) - 1,

      1

    );

    const endDate =

      selectedMonth === "all"

        ? new Date(selectedYear, 11, 31)

        : new Date(selectedYear, parseInt(selectedMonth), 0);



    const current = new Date(startDate);

    let cumulativeCount = 0;



    while (current <= endDate) {

      const dateStr = current.toLocaleDateString("en-US", {

        month: "short",

        day: "2-digit",

      });



      // Simulate gradual progress over time for all categories combined

      const totalCompleted = allCategories.reduce(

        (sum, cat) => sum + (cat.completedSubtopics || 0),

        0

      );

      const daysSinceStart = Math.floor(

        (current.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24)

      );

      cumulativeCount = Math.min(

        totalCompleted,

        Math.floor((daysSinceStart / 30) * totalCompleted)

      );



      dataPoints.push({ date: dateStr, Progress: cumulativeCount });

      current.setDate(current.getDate() + 1);

    }

    return dataPoints;

  }, [allCategories, selectedYear, selectedMonth]);



  const getStatusColor = (

    completedSubtopics: number,

    totalSubtopics: number

  ) => {

    if (completedSubtopics === totalSubtopics && totalSubtopics > 0) {

      return "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100";

    } else if (completedSubtopics > 0) {

      return "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-100";

    } else {

      return "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-100";

    }

  };



  const getStatusText = (

    completedSubtopics: number,

    totalSubtopics: number

  ) => {

    if (completedSubtopics === totalSubtopics && totalSubtopics > 0) {

      return "Completed";

    } else if (completedSubtopics > 0) {

      return "In Progress";

    } else {

      return "Not Started";

    }

  };



  // Show loading state if user is not loaded yet

  if (!user) {

    return (

      <div className="flex h-screen bg-gray-50/50 dark:bg-gray-900/50">

        <Sidebar />

        <div className="flex-1 overflow-auto">

          <div className="container mx-auto p-6 space-y-6">

            <div className="animate-pulse space-y-4">

              <div className="h-8 bg-gray-200 rounded w-1/3"></div>

              <div className="h-64 bg-gray-200 rounded"></div>

            </div>

          </div>

        </div>

      </div>

    );

  }



  return (

    <div className="flex h-screen bg-gray-50/50 dark:bg-gray-900/50">

      <Sidebar />

      <div className="flex-1 overflow-auto">

        <header className="sticky top-0 z-30 bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-4 sm:px-6 lg:px-8 py-4">

          <div className="flex justify-between items-center">

            <div className="flex items-center space-x-4">

              <div>

                <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">

                  {selectedGoalType

                    ? `${selectedGoalType} Categories`

                    : "All Categories"}

                </h1>

              </div>

            </div>

            <div className="flex items-center space-x-2 sm:space-x-4">

              <Button

                variant="ghost"

                size="sm"

                onClick={() => navigate("/goals")}

                className="flex items-center gap-2"

                data-testid="button-back-to-goals"

              >

                <ArrowLeft className="h-4 w-4" />

                Back to Goals

              </Button>

            </div>

          </div>

        </header>

        <div className="container mx-auto p-6 space-y-6">

          {/* Loading state */}

          {goalsLoading && (

            <Card>

              <CardContent className="p-6">

                <div className="animate-pulse space-y-4">

                  <div className="h-6 bg-gray-200 rounded w-1/3"></div>

                  <div className="h-4 bg-gray-200 rounded w-2/3"></div>

                  <div className="h-4 bg-gray-200 rounded w-1/2"></div>

                </div>

              </CardContent>

            </Card>

          )}



          {/* Error state */}

          {goalsError && (

            <Card>

              <CardContent className="p-6">

                <div className="text-red-600 dark:text-red-400">

                  Error loading goals: {(goalsError as Error).message}

                </div>

              </CardContent>

            </Card>

          )}



          {/* No goals state */}

          {!goalsLoading && !goalsError && goals.length === 0 && (

            <Card>

              <CardContent className="p-6 text-center">

                <Target className="h-12 w-12 text-gray-400 mx-auto mb-4" />

                <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-2">

                  No Goals Yet

                </h3>

                <p className="text-gray-600 dark:text-gray-400 mb-4">

                  Create your first goal by uploading a CSV file or manually

                  adding one.

                </p>

              </CardContent>

            </Card>

          )}



          {/* Individual Categories for Detailed View */}

          {allCategories.length > 0 && (

            <div className="space-y-6">

              <h2 className="text-2xl font-semibold text-gray-900 dark:text-gray-100">

                All Categories

              </h2>

              <div className="space-y-4">

                {allCategories.map((category) => (

                  <Card

                    key={category.id}

                    className="cursor-pointer transition-all hover:shadow-lg"

                    onClick={() =>

                      navigate(

                        `/goal-tracker/${category.goalId}/category/${category.id}`

                      )

                    }

                  >

                    <CardHeader>

                      <CardTitle className="flex items-center gap-2">

                        <Target className="h-5 w-5 text-blue-500" />

                        {category.name}

                        <Badge variant="outline" className="ml-auto">

                          {(category as any).goalName}

                        </Badge>

                      </CardTitle>

                    </CardHeader>

                    <CardContent>

                      <div className="space-y-3">

                        <div>

                          <div className="flex justify-between items-center mb-2">

                            <span className="text-sm font-medium">

                              Overall Progress

                            </span>

                            <span className="text-sm text-gray-600">

                              {category.completedSubtopics || 0} /{" "}

                              {category.totalSubtopics || 0} Subtopics

                            </span>

                          </div>

                          <Progress

                            value={

                              category.totalSubtopics > 0

                                ? ((category.completedSubtopics || 0) /

                                    category.totalSubtopics) *

                                  100

                                : 0

                            }

                            className="h-2"

                          />

                        </div>

                        <div className="flex justify-between items-center text-sm">

                          <span className="text-gray-600">

                            {category.totalSubtopics > 0

                              ? Math.round(

                                  ((category.completedSubtopics || 0) /

                                    category.totalSubtopics) *

                                    100

                                )

                              : 0}

                            % Complete

                          </span>

                          <Badge

                            className={getStatusColor(

                              category.completedSubtopics || 0,

                              category.totalSubtopics || 0

                            )}

                          >

                            {getStatusText(

                              category.completedSubtopics || 0,

                              category.totalSubtopics || 0

                            )}

                          </Badge>

                        </div>

                      </div>

                    </CardContent>

                  </Card>

                ))}

              </div>

            </div>

          )}



          {/* Goal Type Performance Charts */}

          {Object.keys(goalsByType).length > 0 && (

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">

              {/* Progress by Goal Type Bar Chart */}

              <Card>

                <CardHeader>

                  <CardTitle className="flex items-center gap-2">

                    <TrendingUp className="h-5 w-5 text-blue-500" />

                    Progress by Goal Type

                  </CardTitle>

                </CardHeader>

                <CardContent>

                  <div style={{ width: "100%", height: "300px" }}>

                    <ResponsiveContainer width="100%" height="100%">

                      <BarChart

                        data={Object.entries(goalsByType).map(

                          ([type, typeGoals]) => {

                            const totalSubtopics = typeGoals.reduce(

                              (sum, goal) => sum + (goal.totalSubtopics || 0),

                              0

                            );

                            const completedSubtopics = typeGoals.reduce(

                              (sum, goal) =>

                                sum + (goal.completedSubtopics || 0),

                              0

                            );

                            return {

                              type,

                              completed: completedSubtopics,

                              total: totalSubtopics,

                              percentage:

                                totalSubtopics > 0

                                  ? Math.round(

                                      (completedSubtopics / totalSubtopics) *

                                        100

                                    )

                                  : 0,

                            };

                          }

                        )}

                        margin={{ top: 20, right: 30, left: 20, bottom: 20 }}

                      >

                        <CartesianGrid strokeDasharray="3 3" stroke="#e5e7eb" />

                        <XAxis

                          dataKey="type"

                          tick={{ fontSize: 11, fill: "#6b7280" }}

                          stroke="#9ca3af"

                        />

                        <YAxis

                          tick={{ fontSize: 11, fill: "#6b7280" }}

                          stroke="#9ca3af"

                          domain={[0, 100]}

                        />

                        <Tooltip

                          contentStyle={{

                            backgroundColor: "white",

                            border: "1px solid #e5e7eb",

                            borderRadius: "8px",

                          }}

                          formatter={(value, name) => [

                            name === "percentage" ? `${value}%` : value,

                            name === "percentage"

                              ? "Progress"

                              : name === "completed"

                              ? "Completed"

                              : "Total",

                          ]}

                        />

                        <Bar

                          dataKey="percentage"

                          fill="#3b82f6"

                          radius={[4, 4, 0, 0]}

                        />

                      </BarChart>

                    </ResponsiveContainer>

                  </div>

                </CardContent>

              </Card>



              {/* Overall Progress Pie Chart */}

              <Card>

                <CardHeader>

                  <CardTitle className="flex items-center gap-2">

                    <TrendingUp className="h-5 w-5 text-green-500" />

                    Overall Progress Distribution

                  </CardTitle>

                </CardHeader>

                <CardContent>

                  <div style={{ width: "100%", height: "300px" }}>

                    <ResponsiveContainer width="100%" height="100%">

                      <PieChart>

                        <Pie

                          data={Object.entries(goalsByType).map(

                            ([type, typeGoals], index) => {

                              const totalSubtopics = typeGoals.reduce(

                                (sum, goal) => sum + (goal.totalSubtopics || 0),

                                0

                              );

                              const completedSubtopics = typeGoals.reduce(

                                (sum, goal) =>

                                  sum + (goal.completedSubtopics || 0),

                                0

                              );

                              return {

                                name: type,

                                value: completedSubtopics,

                                total: totalSubtopics,

                                color: [

                                  "#3b82f6",

                                  "#10b981",

                                  "#f59e0b",

                                  "#ef4444",

                                  "#8b5cf6",

                                ][index % 5],

                              };

                            }

                          )}

                          cx="50%"

                          cy="50%"

                          outerRadius={80}

                          dataKey="value"

                          label={({ name, value, total }) =>

                            `${name}: ${value}/${total}`

                          }

                        >

                          {Object.entries(goalsByType).map((_, index) => (

                            <Cell

                              key={`cell-${index}`}

                              fill={

                                [

                                  "#3b82f6",

                                  "#10b981",

                                  "#f59e0b",

                                  "#ef4444",

                                  "#8b5cf6",

                                ][index % 5]

                              }

                            />

                          ))}

                        </Pie>

                        <Tooltip

                          contentStyle={{

                            backgroundColor: "white",

                            border: "1px solid #e5e7eb",

                            borderRadius: "8px",

                          }}

                          formatter={(value, name, props) => [

                            `${value}/${props.payload.total} (${Math.round(

                              (Number(value) / Number(props.payload.total)) *

                                100

                            )}%)`,

                            "Completed Subtopics",

                          ]}

                        />

                      </PieChart>

                    </ResponsiveContainer>

                  </div>

                </CardContent>

              </Card>

            </div>

          )}



          {/* Category Performance Line Chart */}

          {allCategories.length > 0 && (

            <Card>

              <CardHeader>

                <div className="flex justify-between items-center">

                  <CardTitle className="flex items-center gap-2">

                    <TrendingUp className="h-5 w-5 text-purple-500" />

                    Category Progress Trend

                  </CardTitle>

                  <div className="flex gap-4 items-center">

                    <div className="flex items-center gap-2">

                      <Label htmlFor="year-select">Year:</Label>

                      <Select

                        value={selectedYear.toString()}

                        onValueChange={(v) => setSelectedYear(parseInt(v))}

                      >

                        <SelectTrigger className="w-32" id="year-select">

                          <SelectValue />

                        </SelectTrigger>

                        <SelectContent>

                          {Array.from(

                            { length: 5 },

                            (_, i) => currentYear - i

                          ).map((year) => (

                            <SelectItem key={year} value={year.toString()}>

                              {year}

                            </SelectItem>

                          ))}

                        </SelectContent>

                      </Select>

                    </div>

                    <div className="flex items-center gap-2">

                      <Label htmlFor="month-select">Month:</Label>

                      <Select

                        value={selectedMonth}

                        onValueChange={setSelectedMonth}

                      >

                        <SelectTrigger className="w-40" id="month-select">

                          <SelectValue />

                        </SelectTrigger>

                        <SelectContent>

                          {months.map((month) => (

                            <SelectItem key={month.value} value={month.value}>

                              {month.label}

                            </SelectItem>

                          ))}

                        </SelectContent>

                      </Select>

                    </div>

                  </div>

                </div>

              </CardHeader>

              <CardContent>

                <div style={{ width: "100%", height: "320px" }}>

                  <ResponsiveContainer width="100%" height="100%">

                    <LineChart

                      data={(() => {

                        // Generate data showing each category's progress over time

                        const data = [];

                        const today = new Date();



                        // Generate data for past 12 months

                        for (let i = 11; i >= 0; i--) {

                          const date = new Date(today);

                          date.setMonth(date.getMonth() - i);

                          date.setDate(Math.floor(Math.random() * 28) + 1); // Random day in month



                          const dateStr = date.toLocaleDateString("en-US", {

                            month: "short",

                            day: "numeric",

                          });



                          const entry: any = { date: dateStr };



                          // Add cumulative progress data for each category

                          allCategories.forEach((category, catIndex) => {

                            // Simulate realistic step-wise cumulative progress

                            const baseProgress = Math.floor(Math.random() * 2);

                            const monthlyIncrement = Math.floor(

                              Math.random() * 3

                            );

                            let cumulativeProgress = 0;



                            if (i <= 8) {

                              // Start showing progress from 3 months ago

                              cumulativeProgress = Math.min(

                                baseProgress + (8 - i) * monthlyIncrement,

                                category.totalSubtopics || 20

                              );

                            }



                            entry[category.name] = Math.max(

                              0,

                              cumulativeProgress

                            );

                          });



                          data.push(entry);

                        }

                        return data;

                      })()}

                      margin={{ top: 20, right: 30, left: 20, bottom: 20 }}

                    >

                      <CartesianGrid strokeDasharray="3 3" stroke="#e5e7eb" />

                      <XAxis

                        dataKey="date"

                        tick={{ fontSize: 11, fill: "#6b7280" }}

                        stroke="#9ca3af"

                      />

                      <YAxis

                        tick={{ fontSize: 11, fill: "#6b7280" }}

                        stroke="#9ca3af"

                        domain={[0, "dataMax + 2"]}

                        allowDecimals={false}

                      />

                      <Tooltip

                        contentStyle={{

                          backgroundColor: "white",

                          border: "1px solid #e5e7eb",

                          borderRadius: "8px",

                        }}

                      />

                      <Legend />

                      {allCategories.map((category, index) => {

                        const colors = [

                          "#3b82f6",

                          "#10b981",

                          "#f59e0b",

                          "#ef4444",

                          "#8b5cf6",

                          "#06b6d4",

                          "#84cc16",

                          "#f97316",

                          "#ec4899",

                          "#6366f1",

                          "#14b8a6",

                          "#f43f5e",

                          "#a855f7",

                          "#0ea5e9",

                          "#84cc16",

                        ];

                        return (

                          <Line

                            key={category.id}

                            type="stepAfter"

                            dataKey={category.name}

                            stroke={colors[index % colors.length]}

                            strokeWidth={2}

                            dot={false}

                            activeDot={{ r: 5 }}

                            name={category.name}

                          />

                        );

                      })}

                    </LineChart>

                  </ResponsiveContainer>

                </div>

              </CardContent>

            </Card>

          )}

        </div>

      </div>

    </div>

  );

}




Show thinking
Of course. I've modified your GoalTracker component to replace the Recharts line chart with the zoomable ApexCharts area chart, using the template you provided.

This involves a few steps:

Installing ApexCharts: You'll need to add the library to your project.

Creating a New Chart Component: A new component, ApexProgressChart, is created to handle the specific data formatting and options required by ApexCharts.

Replacing the Old Chart: The <LineChart> is replaced with our new <ApexProgressChart> component.

Step 1: Install ApexCharts
First, you need to add the necessary packages to your project. Open your terminal and run:

Bash

npm install react-apexcharts apexcharts
Step 2: Update Your GoalTracker.tsx File
Here is the complete, updated code for your GoalTracker.tsx file. I have added the new chart component and integrated it into your existing layout.

I've marked the new and modified sections with comments for clarity.

TypeScript

import React, { useState, useMemo } from "react"; // Added React import
import { useMutation, useQuery } from "@tanstack/react-query";
import { queryClient } from "@/lib/queryClient";
import { useAuth } from "@/hooks/useAuth";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useToast } from "@/hooks/use-toast";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Target, TrendingUp, Upload, ArrowLeft } from "lucide-react";
import Sidebar from "@/components/sidebar";
import { BarChart, Bar, PieChart, Pie, Cell, ResponsiveContainer } from "recharts"; // Removed Recharts LineChart components
import ReactApexChart from 'react-apexcharts'; // 1. ADDED ApexCharts import
import { navigate } from "wouter/use-browser-location";

// ... (All your interfaces and API functions remain the same)
// ...

// ==================================================================
// 2. NEW ApexChart Component for Progress Trend
// ==================================================================
const ApexProgressChart = ({ categories }: { categories: GoalCategory[] }) => {
    
    // This logic transforms your category data into the format ApexCharts needs
    const chartData = useMemo(() => {
        const series = categories.map((category) => ({
            name: category.name,
            data: [] as [number, number][],
        }));

        const today = new Date();
        for (let i = 11; i >= 0; i--) {
            const date = new Date(today);
            date.setMonth(date.getMonth() - i);
            date.setDate(Math.floor(Math.random() * 28) + 1);

            const timestamp = date.getTime();

            categories.forEach((category, catIndex) => {
                // This is the same simulation logic from your old chart
                const baseProgress = Math.floor(Math.random() * 2);
                const monthlyIncrement = Math.floor(Math.random() * 3);
                let cumulativeProgress = 0;
                if (i <= 8) {
                    cumulativeProgress = Math.min(
                        baseProgress + (8 - i) * monthlyIncrement,
                        category.totalSubtopics || 20
                    );
                }
                const finalProgress = Math.max(0, cumulativeProgress);
                
                // Push data in [timestamp, value] format
                series[catIndex].data.push([timestamp, finalProgress]);
            });
        }
        return { series };
    }, [categories]);
    
    const options: ApexCharts.ApexOptions = {
        chart: {
            type: 'area',
            stacked: false,
            height: 350,
            zoom: {
                type: 'x',
                enabled: true,
                autoScaleYaxis: true
            },
            toolbar: {
                autoSelected: 'zoom'
            }
        },
        dataLabels: { enabled: false },
        markers: { size: 0 },
        fill: {
            type: 'gradient',
            gradient: {
                shadeIntensity: 1,
                inverseColors: false,
                opacityFrom: 0.5,
                opacityTo: 0,
                stops: [0, 90, 100]
            },
        },
        yaxis: {
            title: { text: 'Completed Subtopics' },
            labels: {
                formatter: (val) => val.toFixed(0), // Use simple integer formatting
            },
        },
        xaxis: {
            type: 'datetime',
        },
        tooltip: {
            shared: false,
            y: {
                formatter: (val) => val.toFixed(0), // Use simple integer formatting
            }
        },
        legend: {
            position: 'top',
            horizontalAlign: 'right',
        }
    };

    return (
        <ReactApexChart 
            options={options} 
            series={chartData.series} 
            type="area" 
            height={320} 
        />
    );
};


export default function GoalTracker() {
  // ... (All your existing logic, state, and hooks remain the same up to the return statement)
  // ...

  return (
    <div className="flex h-screen bg-gray-50/50 dark:bg-gray-900/50">
      <Sidebar />
      <div className="flex-1 overflow-auto">
        <header> {/* ... (Header is the same) ... */} </header>
        <div className="container mx-auto p-6 space-y-6">
          {/* ... (Loading, Error, No Goals, Category Cards, Bar & Pie charts are the same) ... */}

          {/* Category Performance Line Chart */}
          {allCategories.length > 0 && (
            <Card>
              <CardHeader>
                <div className="flex justify-between items-center">
                  <CardTitle className="flex items-center gap-2">
                    <TrendingUp className="h-5 w-5 text-purple-500" />
                    Category Progress Trend
                  </CardTitle>
                  <div className="flex gap-4 items-center">
                    {/* ... (Year and Month selectors are the same) ... */}
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                {/* 3. REPLACED Recharts LineChart with our new ApexProgressChart component */}
                <ApexProgressChart categories={allCategories} />
              </CardContent>
            </Card>
          )}
        </div>
      </div>
    </div>
  );
}





Adjust the logic , My logic is only incremental , number of subtopics completion vs date, is that possible. "170623b8-054c-4961-b96e-6b86a63bceb5" "421f836b-aea4-46d9-ba6b-c11d2e200a65" """Analogies (Semantic" "pending" "medium" "2025-08-27 12:16:55.077766+05:30" "2025-08-27 12:16:55.077766+05:30"

"b05924c2-173c-463f-97cd-ec79272f9bea" "421f836b-aea4-46d9-ba6b-c11d2e200a65" """Classification (Semantic" "pending" "medium" "2025-08-27 12:16:55.084084+05:30" "2025-08-27 12:16:55.084084+05:30"

"f31888bb-a665-4d85-b8c7-c8464041bd55" "421f836b-aea4-46d9-ba6b-c11d2e200a65" """Series (Number" "pending" "medium" "2025-08-27 12:16:55.089984+05:30" "2025-08-27 12:16:55.089984+05:30"

"be9fdc9c-e4f2-4efe-a9bf-5e6f2fab8f5e" "421f836b-aea4-46d9-ba6b-c11d2e200a65" "Coding-Decoding" "pending" "medium" "2025-08-27 12:16:55.097746+05:30" "2025-08-27 12:16:55.097746+05:30"

"ec07b608-fcf6-44bb-bd12-02be8f6d28b8" "421f836b-aea4-46d9-ba6b-c11d2e200a65" "Blood Relations" "pending" "medium" "2025-08-27 12:16:55.106391+05:30" "2025-08-27 12:16:55.106391+05:30"

"7bc27116-7e5c-43aa-b7d4-03c243f358c8" "421f836b-aea4-46d9-ba6b-c11d2e200a65" "Direction Sense Test" "pending" "medium" "2025-08-27 12:16:55.114212+05:30" "2025-08-27 12:16:55.114212+05:30"

"e9474198-8f2a-4854-8f86-e2aa34934a2c" "421f836b-aea4-46d9-ba6b-c11d2e200a65" "Logical Venn Diagrams" "pending" "medium" "2025-08-27 12:16:55.121473+05:30" "2025-08-27 12:16:55.121473+05:30"

"3a4b306f-3d92-4309-a644-222f5a1910bc" "421f836b-aea4-46d9-ba6b-c11d2e200a65" "Syllogism" "pending" "medium" "2025-08-27 12:16:55.126941+05:30" "2025-08-27 12:16:55.126941+05:30"

"4018bcef-7dfa-4e59-82f9-f0b1c198305c" "421f836b-aea4-46d9-ba6b-c11d2e200a65" "Statement & Conclusions" "pending" "medium" "2025-08-27 12:16:55.133788+05:30" "2025-08-27 12:16:55.133788+05:30"

"78bd1e9f-772d-41ac-acb1-fda2873bf92e" "421f836b-aea4-46d9-ba6b-c11d2e200a65" "Statement & Assumptions" "pending" "medium" "2025-08-27 12:16:55.141058+05:30" "2025-08-27 12:16:55.141058+05:30"

"f31b40bc-71db-4b64-9dcd-527af6e1c452" "421f836b-aea4-46d9-ba6b-c11d2e200a65" "Critical Thinking" "pending" "medium" "2025-08-27 12:16:55.147863+05:30" "2025-08-27 12:16:55.147863+05:30"

"dcddb8af-1ac6-4494-99f3-329922e07c95" "421f836b-aea4-46d9-ba6b-c11d2e200a65" "Emotional Intelligence" "pending" "medium" "2025-08-27 12:16:55.150681+05:30" "2025-08-27 12:16:55.150681+05:30"

"6cec26e8-318e-4b96-9575-6ce36820958e" "421f836b-aea4-46d9-ba6b-c11d2e200a65" "Social Intelligence" "pending" "medium" "2025-08-27 12:16:55.1534+05:30" "2025-08-27 12:16:55.1534+05:30"

"94cc509d-1cd3-4c79-8fb6-f9b8ab5855c4" "421f836b-aea4-46d9-ba6b-c11d2e200a65" "Word Building" "pending" "medium" "2025-08-27 12:16:55.156597+05:30" "2025-08-27 12:16:55.156597+05:30"

"3ad7c5f1-8141-41ec-a634-4c504147761a" "421f836b-aea4-46d9-ba6b-c11d2e200a65" "Numerical Operations" "pending" "medium" "2025-08-27 12:16:55.159541+05:30" "2025-08-27 12:16:55.159541+05:30"

"715430c3-3655-448b-aa4e-6e849d801eae" "421f836b-aea4-46d9-ba6b-c11d2e200a65" "Symbolic Operations" "pending" "medium" "2025-08-27 12:16:55.163965+05:30" "2025-08-27 12:16:55.163965+05:30"

"4eedca30-2bfe-4ee0-b2ff-661569c8df3e" "421f836b-aea4-46d9-ba6b-c11d2e200a65" "Puzzles" "pending" "medium" "2025-08-27 12:16:55.166346+05:30" "2025-08-27 12:16:55.166346+05:30"

"d9df241e-62e2-4e60-8a96-0a778d9f3c3e" "421f836b-aea4-46d9-ba6b-c11d2e200a65" "Space Visualization" "pending" "medium" "2025-08-27 12:16:55.169111+05:30" "2025-08-27 12:16:55.169111+05:30"

"ee5321f7-b207-48fe-be5e-0873ccf462b3" "421f836b-aea4-46d9-ba6b-c11d2e200a65" "Space Orientation" "pending" "medium" "2025-08-27 12:16:55.171119+05:30" "2025-08-27 12:16:55.171119+05:30"

"b8a4d0e2-ab1a-4ea0-b5c3-73f784e7b697" "421f836b-aea4-46d9-ba6b-c11d2e200a65" "Problem Solving" "pending" "medium" "2025-08-27 12:16:55.173645+05:30" "2025-08-27 12:16:55.173645+05:30"

"f70c01bc-a651-4608-b7d2-4a5708b9af51" "421f836b-aea4-46d9-ba6b-c11d2e200a65" """Analysis" "pending" "medium" "2025-08-27 12:16:55.175675+05:30" "2025-08-27 12:16:55.175675+05:30"

"618dc5e2-137a-4ad4-9c3d-ebdc55021f31" "421f836b-aea4-46d9-ba6b-c11d2e200a65" "Visual Memory" "pending" "medium" "2025-08-27 12:16:55.177968+05:30" "2025-08-27 12:16:55.177968+05:30"

"419a4c5f-3456-4c80-b645-da1f4e90319f" "421f836b-aea4-46d9-ba6b-c11d2e200a65" """Discrimination" "pending" "medium" "2025-08-27 12:16:55.180257+05:30" "2025-08-27 12:16:55.180257+05:30"

"27b77414-a0ba-4469-8a89-633425c3c5bb" "421f836b-aea4-46d9-ba6b-c11d2e200a65" "Relationship Concepts" "pending" "medium" "2025-08-27 12:16:55.182018+05:30" "2025-08-27 12:16:55.182018+05:30"

"05d96d3c-106e-44a6-b1f1-35321f41c1fd" "421f836b-aea4-46d9-ba6b-c11d2e200a65" "Arithmetical Reasoning and Figural Classification" "pending" "medium" "2025-08-27 12:16:55.184198+05:30" "2025-08-27 12:16:55.184198+05:30"

"b856ed64-bc2d-4c9d-843b-0b4104770e8e" "421f836b-aea4-46d9-ba6b-c11d2e200a65" "Embedded Figures" "pending" "medium" "2025-08-27 12:16:55.187062+05:30" "2025-08-27 12:16:55.187062+05:30"

"6aca820b-3109-476d-97be-247e74c7cf11" "421f836b-aea4-46d9-ba6b-c11d2e200a65" "Pattern Completion" "pending" "medium" "2025-08-27 12:16:55.189983+05:30" "2025-08-27 12:16:55.189983+05:30"

"d1add508-ae45-47cd-a328-bf3fe81f8194" "421f836b-aea4-46d9-ba6b-c11d2e200a65" "Figure Classification" "pending" "medium" "2025-08-27 12:16:55.191741+05:30" "2025-08-27 12:16:55.191741+05:30"

"e3a5cb10-dcbc-4016-9d53-210ca9cc88d1" "421f836b-aea4-46d9-ba6b-c11d2e200a65" "Odd One Out" "pending" "medium" "2025-08-27 12:16:55.193565+05:30" "2025-08-27 12:16:55.193565+05:30"

"5e29786a-67e7-4b87-85b1-9643d8d1b15e" "421f836b-aea4-46d9-ba6b-c11d2e200a65" "Punched hole/pattern-folding & unfolding" "pending" "medium" "2025-08-27 12:16:55.195406+05:30" "2025-08-27 12:16:55.195406+05:30"

"edfb5023-6879-4a72-9f54-5d486cc83f66" "421f836b-aea4-46d9-ba6b-c11d2e200a65" "Figural Pattern-folding and completion" "pending" "medium" "2025-08-27 12:16:55.197372+05:30" "2025-08-27 12:16:55.197372+05:30"

"e65379a7-b2a8-45ad-8efd-b471cde140bd" "d02c952f-aff7-4112-a2fa-b81a96182970" """Indian History (Ancient" "pending" "medium" "2025-08-27 12:16:55.202019+05:30" "2025-08-27 12:16:55.202019+05:30"

"b7423edf-ed2d-4523-a35e-7ec356a85c60" "d02c952f-aff7-4112-a2fa-b81a96182970" "Culture" "pending" "medium" "2025-08-27 12:16:55.203678+05:30" "2025-08-27 12:16:55.203678+05:30"

"3d44411b-2d54-4b2e-bebd-d0acc2636949" "d02c952f-aff7-4112-a2fa-b81a96182970" "Geography (India and the World)" "pending" "medium" "2025-08-27 12:16:55.205539+05:30" "2025-08-27 12:16:55.205539+05:30"

"cb7cb938-a61e-4fdb-aa87-4afd917bb3fc" "d02c952f-aff7-4112-a2fa-b81a96182970" "Economic Scene" "pending" "medium" "2025-08-27 12:16:55.207222+05:30" "2025-08-27 12:16:55.207222+05:30"

"49048081-1f88-495c-b40b-5e6c956015ca" "d02c952f-aff7-4112-a2fa-b81a96182970" "General Policy" "pending" "medium" "2025-08-27 12:16:55.209339+05:30" "2025-08-27 12:16:55.209339+05:30"

"130017de-aa94-438d-bc8e-cbc71063fef6" "d02c952f-aff7-4112-a2fa-b81a96182970" """Scientific Research (Physics" "pending" "medium" "2025-08-27 12:16:55.210547+05:30" "2025-08-27 12:16:55.210547+05:30"

"99b3387e-fa4f-4898-8f5c-acf0e1cc28a0" "d02c952f-aff7-4112-a2fa-b81a96182970" "Environmental Issues" "pending" "medium" "2025-08-27 12:16:55.211677+05:30" "2025-08-27 12:16:55.211677+05:30"

"cc409a3c-2f82-4186-a5e2-0a0ccbb48c41" "d02c952f-aff7-4112-a2fa-b81a96182970" "Science & Technology" "pending" "medium" "2025-08-27 12:16:55.212718+05:30" "2025-08-27 12:16:55.212718+05:30"

"4d9c70f6-9989-47bf-aa62-f5b2c1d94035" "d02c952f-aff7-4112-a2fa-b81a96182970" "Indian Constitution and Polity" "pending" "medium" "2025-08-27 12:16:55.215063+05:30" "2025-08-27 12:16:55.215063+05:30"

"58177849-8e61-458b-af3c-3464eaa1cd38" "d02c952f-aff7-4112-a2fa-b81a96182970" "Current Affairs (last 6-8 months)" "pending" "medium" "2025-08-27 12:16:55.216699+05:30" "2025-08-27 12:16:55.216699+05:30"

"0dda5787-ac1f-44b8-9086-8eed0b9bc5cc" "d02c952f-aff7-4112-a2fa-b81a96182970" "Books and Authors" "pending" "medium" "2025-08-27 12:16:55.21831+05:30" "2025-08-27 12:16:55.21831+05:30"

"91716eeb-f2cc-46cd-92e5-42f5767ddad0" "d02c952f-aff7-4112-a2fa-b81a96182970" "Awards and Honors" "pending" "medium" "2025-08-27 12:16:55.220077+05:30" "2025-08-27 12:16:55.220077+05:30"

"05663254-d592-4993-ae95-62a3e97a3ac2" "d02c952f-aff7-4112-a2fa-b81a96182970" "Important Days and Dates" "pending" "medium" "2025-08-27 12:16:55.221698+05:30" "2025-08-27 12:16:55.221698+05:30"

"9cda334c-639e-4de9-b974-2edea7a8d585" "d02c952f-aff7-4112-a2fa-b81a96182970" "Sports Affairs & Personalities" "pending" "medium" "2025-08-27 12:16:55.223107+05:30" "2025-08-27 12:16:55.223107+05:30"

"31466064-3435-49cb-9cdb-9ea173b6e1d0" "d02c952f-aff7-4112-a2fa-b81a96182970" "Government Schemes & Policies" "pending" "medium" "2025-08-27 12:16:55.224743+05:30" "2025-08-27 12:16:55.224743+05:30"

"10ba0b67-4aa4-4548-9c56-87f428449314" "d02c952f-aff7-4112-a2fa-b81a96182970" "India and its neighboring countries" "pending" "medium" "2025-08-27 12:16:55.226836+05:30" "2025-08-27 12:16:55.226836+05:30"

"e443f0ad-2289-4d6d-a759-cc4d52c9d4cd" "a2a30053-6aa5-4c06-93e1-b3612b246d7f" """Number Systems (Whole Numbers" "pending" "medium" "2025-08-27 12:16:55.232589+05:30" "2025-08-27 12:16:55.232589+05:30"

"d80c84cc-e0d5-48bc-ad22-17c2971a17fb" "a2a30053-6aa5-4c06-93e1-b3612b246d7f" "Percentages" "pending" "medium" "2025-08-27 12:16:55.234917+05:30" "2025-08-27 12:16:55.234917+05:30"

"3a3aba15-681c-485e-9afd-26e4da580df1" "a2a30053-6aa5-4c06-93e1-b3612b246d7f" "Ratio and Proportion" "completed" "medium" "2025-08-27 12:16:55.236607+05:30" "2025-08-27 12:16:55.236607+05:30"

"c7052afa-b294-436a-97b6-7bcf355f4a04" "a2a30053-6aa5-4c06-93e1-b3612b246d7f" "Square Roots" "pending" "medium" "2025-08-27 12:16:55.239818+05:30" "2025-08-27 12:16:55.239818+05:30"

"b2660b51-31d4-4cad-a7be-54b15a35cfc9" "a2a30053-6aa5-4c06-93e1-b3612b246d7f" "Averages" "pending" "medium" "2025-08-27 12:16:55.242312+05:30" "2025-08-27 12:16:55.242312+05:30"

"b0747b58-863a-4c59-a856-5023c19e34ff" "a2a30053-6aa5-4c06-93e1-b3612b246d7f" "Interest (Simple and Compound)" "pending" "medium" "2025-08-27 12:16:55.244995+05:30" "2025-08-27 12:16:55.244995+05:30"

"a74455c5-4af1-429c-b54e-211759bcb220" "a2a30053-6aa5-4c06-93e1-b3612b246d7f" "Profit and Loss" "pending" "medium" "2025-08-27 12:16:55.247254+05:30" "2025-08-27 12:16:55.247254+05:30"

"727af5ad-cae1-468f-a559-4db6e3622793" "a2a30053-6aa5-4c06-93e1-b3612b246d7f" "Discount" "pending" "medium" "2025-08-27 12:16:55.249514+05:30" "2025-08-27 12:16:55.249514+05:30"

"0694d064-63c9-4ef1-a497-e303c0b89907" "a2a30053-6aa5-4c06-93e1-b3612b246d7f" "Partnership Business" "pending" "medium" "2025-08-27 12:16:55.252003+05:30" "2025-08-27 12:16:55.252003+05:30"

"59c878be-88b4-4548-8fc9-8424876ea823" "a2a30053-6aa5-4c06-93e1-b3612b246d7f" "Mixture and Alligation" "pending" "medium" "2025-08-27 12:16:55.255345+05:30" "2025-08-27 12:16:55.255345+05:30"

"84fee602-4bc3-486a-b177-5cd09b101d89" "a2a30053-6aa5-4c06-93e1-b3612b246d7f" "Time and Distance" "completed" "medium" "2025-08-27 12:16:55.258097+05:30" "2025-08-27 12:16:55.258097+05:30"

"d30697ea-0e6f-45a7-9da6-14a7f6f08fc4" "a2a30053-6aa5-4c06-93e1-b3612b246d7f" "Time and Work" "pending" "medium" "2025-08-27 12:16:55.260656+05:30" "2025-08-27 12:16:55.260656+05:30"

"7895f52d-a8a9-4e70-9e51-cedddf892a86" "a2a30053-6aa5-4c06-93e1-b3612b246d7f" "Basic Algebraic Identities" "pending" "medium" "2025-08-27 12:16:55.263116+05:30" "2025-08-27 12:16:55.263116+05:30"

"41e82aa4-67c3-48dc-8287-1ef07b44bc37" "a2a30053-6aa5-4c06-93e1-b3612b246d7f" "Elementary Surds (simple problems)" "pending" "medium" "2025-08-27 12:16:55.264919+05:30" "2025-08-27 12:16:55.264919+05:30"

"ff71b8ef-4c69-4c9b-8872-4148bc83b7bc" "a2a30053-6aa5-4c06-93e1-b3612b246d7f" "Graphs of Linear Equations" "pending" "medium" "2025-08-27 12:16:55.266989+05:30" "2025-08-27 12:16:55.266989+05:30"

"b84f7b8a-490e-4342-bc5d-971a74c2edff" "a2a30053-6aa5-4c06-93e1-b3612b246d7f" """Geometry (Triangles" "pending" "medium" "2025-08-27 12:16:55.268398+05:30" "2025-08-27 12:16:55.268398+05:30"

"1843bcc7-78f7-41d2-90d5-089ad1afc740" "a2a30053-6aa5-4c06-93e1-b3612b246d7f" "Mensuration (Area/Volume 2D/3D shapes)" "pending" "medium" "2025-08-27 12:16:55.269918+05:30" "2025-08-27 12:16:55.269918+05:30"

"dd1c33f7-69bd-463b-8a6c-64ce123bdd53" "a2a30053-6aa5-4c06-93e1-b3612b246d7f" "Trigonometric Ratios" "pending" "medium" "2025-08-27 12:16:55.271562+05:30" "2025-08-27 12:16:55.271562+05:30"

"2de9daaf-ce96-43f6-ab0e-547f2f962bb2" "a2a30053-6aa5-4c06-93e1-b3612b246d7f" "Degree and Radian Measures" "pending" "medium" "2025-08-27 12:16:55.273682+05:30" "2025-08-27 12:16:55.273682+05:30"

"1ae5666f-7f13-4f0e-a236-42edf64d9de3" "a2a30053-6aa5-4c06-93e1-b3612b246d7f" """Standard Identities (e.g." "pending" "medium" "2025-08-27 12:16:55.276101+05:30" "2025-08-27 12:16:55.276101+05:30"

"fede9f59-474e-4f50-91bc-ea40c865729d" "a2a30053-6aa5-4c06-93e1-b3612b246d7f" "Complementary Angles" "pending" "medium" "2025-08-27 12:16:55.277728+05:30" "2025-08-27 12:16:55.277728+05:30"

"a32f78a1-c22b-41b9-bb1e-61e5fb2ca215" "a2a30053-6aa5-4c06-93e1-b3612b246d7f" "Heights and Distances (simple problems)" "pending" "medium" "2025-08-27 12:16:55.279821+05:30" "2025-08-27 12:16:55.279821+05:30"

"423559ff-9ed9-4342-bea2-482d35bd37dd" "a2a30053-6aa5-4c06-93e1-b3612b246d7f" """Data Interpretation (Tables" "pending" "medium" "2025-08-27 12:16:55.28183+05:30" "2025-08-27 12:16:55.28183+05:30"

"a3710d0e-acb1-4da9-b27b-f5bfad8c56b0" "8c77d1fc-42e7-47b5-b425-91e66e0436a8" "Synonyms" "pending" "medium" "2025-08-27 12:16:55.286353+05:30" "2025-08-27 12:16:55.286353+05:30"

"675061cf-1d1a-4b17-8873-159f4e416b39" "8c77d1fc-42e7-47b5-b425-91e66e0436a8" "Antonyms" "pending" "medium" "2025-08-27 12:16:55.288023+05:30" "2025-08-27 12:16:55.288023+05:30"

"1ad5d295-6c57-44bd-ad1d-f6b2d6eeedfa" "8c77d1fc-42e7-47b5-b425-91e66e0436a8" "Homonyms" "pending" "medium" "2025-08-27 12:16:55.289545+05:30" "2025-08-27 12:16:55.289545+05:30"

"88545f27-56da-4e89-bbb3-19eb9a116d79" "8c77d1fc-42e7-47b5-b425-91e66e0436a8" "One Word Substitution" "pending" "medium" "2025-08-27 12:16:55.290973+05:30" "2025-08-27 12:16:55.290973+05:30"

"e79eece1-ee64-47c0-8228-944fa04c8b35" "8c77d1fc-42e7-47b5-b425-91e66e0436a8" "Idioms & Phrases" "pending" "medium" "2025-08-27 12:16:55.292399+05:30" "2025-08-27 12:16:55.292399+05:30"

"eaf8a2ce-c807-48fd-872d-031a8f5aedab" "8c77d1fc-42e7-47b5-b425-91e66e0436a8" "Spotting Errors" "pending" "medium" "2025-08-27 12:16:55.293836+05:30" "2025-08-27 12:16:55.293836+05:30"

"1868d90a-0978-40d9-a29b-98e7ec8cd838" "8c77d1fc-42e7-47b5-b425-91e66e0436a8" "Sentence Structure" "pending" "medium" "2025-08-27 12:16:55.295776+05:30" "2025-08-27 12:16:55.295776+05:30"

"563549e3-2f2e-48c6-b232-270a00bed5d6" "8c77d1fc-42e7-47b5-b425-91e66e0436a8" "Sentence Correction/Improvement" "pending" "medium" "2025-08-27 12:16:55.297301+05:30" "2025-08-27 12:16:55.297301+05:30"

"fed814fe-2811-451b-9a07-e04cb3612841" "8c77d1fc-42e7-47b5-b425-91e66e0436a8" "Fill in the Blanks" "pending" "medium" "2025-08-27 12:16:55.298798+05:30" "2025-08-27 12:16:55.298798+05:30"

"1fe5cc8b-b9a0-449c-80e9-e3ea83826800" "8c77d1fc-42e7-47b5-b425-91e66e0436a8" "Active/Passive Voice of Verbs" "pending" "medium" "2025-08-27 12:16:55.300153+05:30" "2025-08-27 12:16:55.300153+05:30"

"70cb986f-9dda-4421-8410-3227232fc539" "8c77d1fc-42e7-47b5-b425-91e66e0436a8" "Conversion into Direct/Indirect Narration" "pending" "medium" "2025-08-27 12:16:55.301632+05:30" "2025-08-27 12:16:55.301632+05:30"

"02e1fe2a-7e19-402c-a395-619f550bdec9" "8c77d1fc-42e7-47b5-b425-91e66e0436a8" "Reading Comprehension Passages" "pending" "medium" "2025-08-27 12:16:55.303086+05:30" "2025-08-27 12:16:55.303086+05:30"

"101588bb-79da-465b-97e0-aca03d236109" "8c77d1fc-42e7-47b5-b425-91e66e0436a8" "Cloze Test" "pending" "medium" "2025-08-27 12:16:55.304667+05:30" "2025-08-27 12:16:55.304667+05:30"

"004b15ec-5b4c-4014-963d-7c03d521447b" "8c77d1fc-42e7-47b5-b425-91e66e0436a8" "Shuffling of Sentence parts" "pending" "medium" "2025-08-27 12:16:55.30622+05:30" "2025-08-27 12:16:55.30622+05:30"

"fa050cb3-67ca-492f-a6c0-1b88f387d7c9" "8c77d1fc-42e7-47b5-b425-91e66e0436a8" "Shuffling of Sentences in a passage (Para Jumbles)" "pending" "medium" "2025-08-27 12:16:55.307825+05:30" "2025-08-27 12:16:55.307825+05:30"

"09323fd2-98d3-4764-85f2-3f8cc8676ff0" "b25a35d6-5152-4265-ba66-5b9cbdc5b4ff" """Scientific knowledge and scientific temper" "completed" "medium" "2025-08-27 13:46:35.216+05:30" "2025-08-27 13:26:53.54727+05:30" "2025-08-27 13:46:35.216+05:30"

"62fb2523-dbea-4b6f-a284-606f99cce6f8" "b25a35d6-5152-4265-ba66-5b9cbdc5b4ff" "Rote learning vs conceptual learning" "completed" "medium" "2025-08-27 13:46:36.441+05:30" "2025-08-27 13:26:53.552297+05:30" "2025-08-27 13:46:36.441+05:30"

"d8213bd0-6e4d-4bbb-8601-98e8b3dd5296" "b25a35d6-5152-4265-ba66-5b9cbdc5b4ff" """Science as a tool to understand the past" "pending" "medium" "2025-08-27 13:26:53.555696+05:30" "2025-08-27 13:26:53.555696+05:30"

"f377ba55-fa94-4b45-a0c2-bdee4391d23b" "b25a35d6-5152-4265-ba66-5b9cbdc5b4ff" """Nature of universe" "pending" "medium" "2025-08-27 13:26:53.559429+05:30" "2025-08-27 13:26:53.559429+05:30"

"64e6f397-ff05-4f38-a0f8-bb486012fb58" "b25a35d6-5152-4265-ba66-5b9cbdc5b4ff" """Mechanics" "pending" "medium" "2025-08-27 13:26:53.563003+05:30" "2025-08-27 13:26:53.563003+05:30"

"25ee1463-3af7-4261-957f-582ec6173b93" "b25a35d6-5152-4265-ba66-5b9cbdc5b4ff" """Everyday application of Mechanics" "pending" "medium" "2025-08-27 13:26:53.5657+05:30" "2025-08-27 13:26:53.5657+05:30"

"0c227589-79c2-4bf5-bede-4f3578854dce" "b25a35d6-5152-4265-ba66-5b9cbdc5b4ff" """Everyday application of Nuclear Physics" "pending" "medium" "2025-08-27 13:26:53.569368+05:30" "2025-08-27 13:26:53.569368+05:30"

"dcc4c528-3c72-45a2-a305-0a5936d14813" "b25a35d6-5152-4265-ba66-5b9cbdc5b4ff" """Elements and compounds" "pending" "medium" "2025-08-27 13:26:53.571045+05:30" "2025-08-27 13:26:53.571045+05:30"

"11b3037f-bd63-4196-aa87-e9e25862ffed" "b25a35d6-5152-4265-ba66-5b9cbdc5b4ff" """Petroleum products" "pending" "medium" "2025-08-27 13:26:53.572678+05:30" "2025-08-27 13:26:53.572678+05:30"

"d166d057-28ad-4ff2-a49e-6e7d45b45a51" "b25a35d6-5152-4265-ba66-5b9cbdc5b4ff" """Main concepts of life science" "pending" "medium" "2025-08-27 13:26:53.574194+05:30" "2025-08-27 13:26:53.574194+05:30"

"68290ccb-3b83-48bd-b712-ba58a6c89c41" "b25a35d6-5152-4265-ba66-5b9cbdc5b4ff" """Evolution" "pending" "medium" "2025-08-27 13:26:53.575776+05:30" "2025-08-27 13:26:53.575776+05:30"

"7ac67c6e-22de-4859-a390-e432315cdec8" "b25a35d6-5152-4265-ba66-5b9cbdc5b4ff" "Environment and ecology" "pending" "medium" "2025-08-27 13:26:53.577139+05:30" "2025-08-27 13:26:53.577139+05:30"

"21caa055-a47a-4496-b353-c2b7ab9b3d35" "b25a35d6-5152-4265-ba66-5b9cbdc5b4ff" "Latest inventions in science and technology & Current affairs" "pending" "medium" "2025-08-27 13:26:53.578667+05:30" "2025-08-27 13:26:53.578667+05:30"

"4d88a987-c67c-4e50-8eaf-f581a5a831a0" "745895b4-e31b-4523-9ea2-3baa24f46820" "Location - Physical features" "pending" "medium" "2025-08-27 13:26:53.58363+05:30" "2025-08-27 13:26:53.58363+05:30"

"500b31f4-c7d3-42f4-b155-3ffb7bbb40cd" "745895b4-e31b-4523-9ea2-3baa24f46820" """Monsoon" "pending" "medium" "2025-08-27 13:26:53.585019+05:30" "2025-08-27 13:26:53.585019+05:30"

"9af1c2e1-132c-44fa-9cad-f9cf598f521c" "745895b4-e31b-4523-9ea2-3baa24f46820" "Water resources - Rivers in India" "pending" "medium" "2025-08-27 13:26:53.58627+05:30" "2025-08-27 13:26:53.58627+05:30"

"0a4016b2-040f-4e1c-a3ea-a08a7ae17891" "745895b4-e31b-4523-9ea2-3baa24f46820" """Soil" "pending" "medium" "2025-08-27 13:26:53.588709+05:30" "2025-08-27 13:26:53.588709+05:30"

"584ebdb7-3d44-4708-8533-a4f0dd870f68" "745895b4-e31b-4523-9ea2-3baa24f46820" "Forest and Wildlife - Agricultural pattern" "pending" "medium" "2025-08-27 13:26:53.590211+05:30" "2025-08-27 13:26:53.590211+05:30"

"4d206f65-cf1a-4a95-933e-7b437d79552f" "745895b4-e31b-4523-9ea2-3baa24f46820" "Transport - Communication" "pending" "medium" "2025-08-27 13:26:53.591542+05:30" "2025-08-27 13:26:53.591542+05:30"

"309f7efe-209d-4425-960c-b9a423925697" "745895b4-e31b-4523-9ea2-3baa24f46820" "Social Geography: Population density and distribution" "pending" "medium" "2025-08-27 13:26:53.592681+05:30" "2025-08-27 13:26:53.592681+05:30"

"846f45f0-ff66-4ffd-811e-f15d9f72e4c2" "745895b4-e31b-4523-9ea2-3baa24f46820" """Racial" "pending" "medium" "2025-08-27 13:26:53.593728+05:30" "2025-08-27 13:26:53.593728+05:30"

"3cba7fa2-b39f-4572-942b-0ee7bddcc6dc" "745895b4-e31b-4523-9ea2-3baa24f46820" "Natural calamity - Disaster management" "pending" "medium" "2025-08-27 13:26:53.594833+05:30" "2025-08-27 13:26:53.594833+05:30"

"993542ea-1a05-464e-8544-3796be35ddd8" "745895b4-e31b-4523-9ea2-3baa24f46820" "Environmental pollution - Reasons and preventive measures" "pending" "medium" "2025-08-27 13:26:53.595932+05:30" "2025-08-27 13:26:53.595932+05:30"

"789163b7-1819-42ce-ac54-5c74a1b829a6" "745895b4-e31b-4523-9ea2-3baa24f46820" "Climate change - Green energy" "pending" "medium" "2025-08-27 13:26:53.597158+05:30" "2025-08-27 13:26:53.597158+05:30"

"81118ffb-307f-49b8-92f4-6893dfa411d7" "745895b4-e31b-4523-9ea2-3baa24f46820" "Geographical landmarks & Current affairs" "pending" "medium" "2025-08-27 13:26:53.598296+05:30" "2025-08-27 13:26:53.598296+05:30"

"f0d74d38-8f0d-4d7d-9dbc-3553da253b12" "496c682a-d50f-48e7-89a2-dfb7fb105184" "Indus Valley Civilization" "pending" "medium" "2025-08-27 13:26:53.601378+05:30" "2025-08-27 13:26:53.601378+05:30"

"52760bea-408d-497a-81f8-71b4c339b2d9" "496c682a-d50f-48e7-89a2-dfb7fb105184" """Guptas" "pending" "medium" "2025-08-27 13:26:53.603412+05:30" "2025-08-27 13:26:53.603412+05:30"

"c6651b88-1d9c-4c5d-832b-ca1572de1ccc" "496c682a-d50f-48e7-89a2-dfb7fb105184" "Age of Vijayanagaram and Bahmani Kingdoms - South Indian History" "pending" "medium" "2025-08-27 13:26:53.606087+05:30" "2025-08-27 13:26:53.606087+05:30"

"f41e44fd-7914-40d4-89c9-59f0f93ad244" "496c682a-d50f-48e7-89a2-dfb7fb105184" "National Renaissance - Early uprising against British rule" "pending" "medium" "2025-08-27 13:26:53.608548+05:30" "2025-08-27 13:26:53.608548+05:30"

"007c3c03-5202-4322-a77f-1bc00983b42b" "496c682a-d50f-48e7-89a2-dfb7fb105184" """Indian National Congress & Emergence of leaders (Ambedkar" "pending" "medium" "2025-08-27 13:26:53.610204+05:30" "2025-08-27 13:26:53.610204+05:30"

"a6e000e4-dc7c-454b-9a4f-3a999742f3bb" "496c682a-d50f-48e7-89a2-dfb7fb105184" "Different modes of agitation: Satyagraha and Militant Movements" "pending" "medium" "2025-08-27 13:26:53.612017+05:30" "2025-08-27 13:26:53.612017+05:30"

"4150ba30-d4fd-4dca-8ba2-4feb09cf494a" "496c682a-d50f-48e7-89a2-dfb7fb105184" "Communalism and Partition" "pending" "medium" "2025-08-27 13:26:53.614626+05:30" "2025-08-27 13:26:53.614626+05:30"

"a31e64f9-8497-40ff-8de1-cf5b07b1d4a7" "496c682a-d50f-48e7-89a2-dfb7fb105184" "Change and continuity in the socio-cultural history of India" "pending" "medium" "2025-08-27 13:26:53.616352+05:30" "2025-08-27 13:26:53.616352+05:30"

"bd6211c6-e321-4dea-9143-2d43b58b5412" "496c682a-d50f-48e7-89a2-dfb7fb105184" """Characteristics of Indian Culture" "pending" "medium" "2025-08-27 13:26:53.618081+05:30" "2025-08-27 13:26:53.618081+05:30"

"78435dd5-6f33-4845-92e2-6016669cdb48" "496c682a-d50f-48e7-89a2-dfb7fb105184" """India as a secular state" "pending" "medium" "2025-08-27 13:26:53.620483+05:30" "2025-08-27 13:26:53.620483+05:30"

"a19791d7-87de-48d1-8af6-b57a246f8097" "496c682a-d50f-48e7-89a2-dfb7fb105184" """Prominent personalities (Arts" "pending" "medium" "2025-08-27 13:26:53.622164+05:30" "2025-08-27 13:26:53.622164+05:30"

"9cf4d943-4dce-47cb-9aa8-ed86f629004c" "2ffc179a-fd5f-4500-b546-b2d50ccddb8a" """Constitution of India: Preamble" "completed" "medium" "2025-08-27 15:21:34.685+05:30" "2025-08-27 13:26:53.625258+05:30" "2025-08-27 15:21:34.685+05:30"

"27405439-76cc-4717-b3f2-69276223f6c6" "2ffc179a-fd5f-4500-b546-b2d50ccddb8a" """Union" "pending" "medium" "2025-08-27 13:26:53.626528+05:30" "2025-08-27 13:26:53.626528+05:30"

"475edb2d-292a-47ef-a021-8f63af45c78a" "2ffc179a-fd5f-4500-b546-b2d50ccddb8a" """Citizenship" "pending" "medium" "2025-08-27 13:26:53.628019+05:30" "2025-08-27 13:26:53.628019+05:30"

"b7ddca4a-460b-4832-a136-74e0d1957987" "2ffc179a-fd5f-4500-b546-b2d50ccddb8a" """Union Executive" "pending" "medium" "2025-08-27 13:26:53.630078+05:30" "2025-08-27 13:26:53.630078+05:30"

"b85068fa-30f0-4c6c-9719-6079190a6b27" "2ffc179a-fd5f-4500-b546-b2d50ccddb8a" """State Executive" "pending" "medium" "2025-08-27 13:26:53.631807+05:30" "2025-08-27 13:26:53.631807+05:30"

"7a951f79-6df2-4fa6-8bc5-324197657629" "2ffc179a-fd5f-4500-b546-b2d50ccddb8a" """Local Governments" "pending" "medium" "2025-08-27 13:26:53.633661+05:30" "2025-08-27 13:26:53.633661+05:30"

"6c24eeb4-f2fb-4a34-bbec-70434657cf10" "2ffc179a-fd5f-4500-b546-b2d50ccddb8a" "Spirit of federalism: Centre-State relationships" "pending" "medium" "2025-08-27 13:26:53.636676+05:30" "2025-08-27 13:26:53.636676+05:30"

"210ac198-0c28-476b-b36b-d53d8366261f" "2ffc179a-fd5f-4500-b546-b2d50ccddb8a" """Election" "pending" "medium" "2025-08-27 13:26:53.639438+05:30" "2025-08-27 13:26:53.639438+05:30"

"d58d7d36-6b41-4dab-ac74-87aece149601" "2ffc179a-fd5f-4500-b546-b2d50ccddb8a" """Corruption in public life" "pending" "medium" "2025-08-27 13:26:53.642483+05:30" "2025-08-27 13:26:53.642483+05:30"

"96bf8fbf-71aa-4c01-ad97-7d53e8a8c5b8" "2ffc179a-fd5f-4500-b546-b2d50ccddb8a" """Right to Information" "pending" "medium" "2025-08-27 13:26:53.644643+05:30" "2025-08-27 13:26:53.644643+05:30"

"47e71872-bb34-4581-9b7e-11f2577a15c9" "2ffc179a-fd5f-4500-b546-b2d50ccddb8a" """Consumer Protection Forums" "pending" "medium" "2025-08-27 13:26:53.64643+05:30" "2025-08-27 13:26:53.64643+05:30"

"26e24264-434e-4bbd-9aaf-64e11b45efe9" "2ffc179a-fd5f-4500-b546-b2d50ccddb8a" "Political parties and political system in India & Current affairs" "pending" "medium" "2025-08-27 13:26:53.648184+05:30" "2025-08-27 13:26:53.648184+05:30"

"1847543b-34b1-4108-a374-5c7759f86a93" "88d02ed8-69c1-4f6f-8d47-affd62f08cb5" """Nature of Indian Economy" "completed" "medium" "2025-08-27 15:22:05.192+05:30" "2025-08-27 13:26:53.652422+05:30" "2025-08-27 15:22:05.192+05:30"

"301ffdbb-3d23-40c6-8b0c-bfc05f721581" "88d02ed8-69c1-4f6f-8d47-affd62f08cb5" """Sources of revenue" "completed" "medium" "2025-08-27 13:46:41.511+05:30" "2025-08-27 13:26:53.654056+05:30" "2025-08-27 13:46:41.511+05:30"

"c9f479f3-b1b1-4bb2-a3c0-45badf653161" "88d02ed8-69c1-4f6f-8d47-affd62f08cb5" """Finance Commission" "completed" "medium" "2025-08-27 15:22:26.509+05:30" "2025-08-27 13:26:53.655747+05:30" "2025-08-27 15:22:26.509+05:30"

"1581fa05-8eff-49e4-b8c9-9973aa0667d9" "88d02ed8-69c1-4f6f-8d47-affd62f08cb5" """Structure of Indian Economy" "pending" "medium" "2025-08-27 13:26:53.657302+05:30" "2025-08-27 13:26:53.657302+05:30"

"6abe7181-a59e-411c-80e8-7718114ab131" "88d02ed8-69c1-4f6f-8d47-affd62f08cb5" """Application of Science and Technology in Agriculture" "pending" "medium" "2025-08-27 13:26:53.658914+05:30" "2025-08-27 13:26:53.658914+05:30"

"4a9afb4a-c9c7-4e89-aeef-d720cf5cdbd2" "88d02ed8-69c1-4f6f-8d47-affd62f08cb5" """Rural welfare oriented programmes" "pending" "medium" "2025-08-27 13:26:53.660314+05:30" "2025-08-27 13:26:53.660314+05:30"

"d333b494-4c1a-4e02-b4be-14979f82f98b" "88d02ed8-69c1-4f6f-8d47-affd62f08cb5" "Human Development Indicators in Tamil Nadu (comparative)" "pending" "medium" "2025-08-27 13:26:53.661806+05:30" "2025-08-27 13:26:53.661806+05:30"

"68ae4ee1-2ec6-4100-bb64-8ad94b18ede9" "88d02ed8-69c1-4f6f-8d47-affd62f08cb5" "Impact of social reform movements on TN's socio-economic development" "pending" "medium" "2025-08-27 13:26:53.663921+05:30" "2025-08-27 13:26:53.663921+05:30"

"10dba7dd-4bc3-4636-8142-f8ce6f38b6d4" "88d02ed8-69c1-4f6f-8d47-affd62f08cb5" """Political parties" "pending" "medium" "2025-08-27 13:26:53.665915+05:30" "2025-08-27 13:26:53.665915+05:30"

"54c968cc-b767-4976-aceb-e039ba0869e0" "88d02ed8-69c1-4f6f-8d47-affd62f08cb5" """Reservation policy" "pending" "medium" "2025-08-27 13:26:53.667496+05:30" "2025-08-27 13:26:53.667496+05:30"

"bfe72a5a-cdf8-43e4-a547-ee4b7e421e48" "88d02ed8-69c1-4f6f-8d47-affd62f08cb5" "Role of social welfare schemes in TN's socio-economic development" "pending" "medium" "2025-08-27 13:26:53.668749+05:30" "2025-08-27 13:26:53.668749+05:30"

"2c6b9721-a5fd-4a43-82b0-0b5f4c2df44c" "88d02ed8-69c1-4f6f-8d47-affd62f08cb5" "Social Justice and social harmony as cornerstones of development" "pending" "medium" "2025-08-27 13:26:53.670099+05:30" "2025-08-27 13:26:53.670099+05:30"

"b2966d88-a04a-433b-b43f-d70d874ec06a" "88d02ed8-69c1-4f6f-8d47-affd62f08cb5" "Education and health systems in Tamil Nadu" "pending" "medium" "2025-08-27 13:26:53.671444+05:30" "2025-08-27 13:26:53.671444+05:30"

"520bf978-759e-40e7-a354-6661b972c5c4" "88d02ed8-69c1-4f6f-8d47-affd62f08cb5" "Geography of Tamil Nadu and its impact on economic growth" "pending" "medium" "2025-08-27 13:26:53.672979+05:30" "2025-08-27 13:26:53.672979+05:30"

"5f37adbc-9e8a-4246-8e74-9dbdf925efc6" "88d02ed8-69c1-4f6f-8d47-affd62f08cb5" "Achievements of Tamil Nadu in various fields & e-Governance" "pending" "medium" "2025-08-27 13:26:53.674395+05:30" "2025-08-27 13:26:53.674395+05:30"

"87e86b5c-c3f2-4193-bfa5-986bfee08740" "88d02ed8-69c1-4f6f-8d47-affd62f08cb5" """Public awareness" "pending" "medium" "2025-08-27 13:26:53.675813+05:30" "2025-08-27 13:26:53.675813+05:30"

"02723288-61bc-4d16-9c62-238f1bf5d0a2" "88d02ed8-69c1-4f6f-8d47-affd62f08cb5" "Problems in public delivery systems" "pending" "medium" "2025-08-27 13:26:53.676917+05:30" "2025-08-27 13:26:53.676917+05:30"

"78a62098-40a1-4c05-9526-45d609952622" "88d02ed8-69c1-4f6f-8d47-affd62f08cb5" "Current socio-economic issues & Current affairs" "pending" "medium" "2025-08-27 13:26:53.678243+05:30" "2025-08-27 13:26:53.678243+05:30"

"3c7648c2-4172-4cf3-b3dc-3f3ed610dc26" "12549189-1a29-4e2f-8ae3-fd3c24e9b3c5" """History of Tamil Society" "pending" "medium" "2025-08-27 13:26:53.682543+05:30" "2025-08-27 13:26:53.682543+05:30"

"fbd71744-f510-4d8d-88fb-35d893f611ed" "12549189-1a29-4e2f-8ae3-fd3c24e9b3c5" "Tamil literature from Sangam age till contemporary times" "pending" "medium" "2025-08-27 13:26:53.683874+05:30" "2025-08-27 13:26:53.683874+05:30"

"3b60b9fa-5d4a-489e-a6a3-b5bc8e6ffbbb" "12549189-1a29-4e2f-8ae3-fd3c24e9b3c5" """Thirukkural: Significance" "pending" "medium" "2025-08-27 13:26:53.68516+05:30" "2025-08-27 13:26:53.68516+05:30"

"4a94dee3-8071-4c50-be4d-6fc8e1922062" "12549189-1a29-4e2f-8ae3-fd3c24e9b3c5" "Role of Tamil Nadu in freedom struggle & Early agitations" "pending" "medium" "2025-08-27 13:26:53.68677+05:30" "2025-08-27 13:26:53.68677+05:30"

"28a60613-e0ef-43f2-a299-0cbfde5d04fc" "12549189-1a29-4e2f-8ae3-fd3c24e9b3c5" "Role of women in freedom struggle" "pending" "medium" "2025-08-27 13:26:53.688329+05:30" "2025-08-27 13:26:53.688329+05:30"

"8f7c7ee0-5605-4b3d-a648-7f3fc8009bf7" "12549189-1a29-4e2f-8ae3-fd3c24e9b3c5" "Evolution of 19th & 20th century socio-political movements in TN" "pending" "medium" "2025-08-27 13:26:53.690002+05:30" "2025-08-27 13:26:53.690002+05:30"

"f9e0702e-c525-4a54-ab4a-6b268d00b786" "12549189-1a29-4e2f-8ae3-fd3c24e9b3c5" """Justice Party" "pending" "medium" "2025-08-27 13:26:53.692972+05:30" "2025-08-27 13:26:53.692972+05:30"

"ce3de7dc-44d6-4fb4-9565-e28b79d8e9ab" "12549189-1a29-4e2f-8ae3-fd3c24e9b3c5" """Self Respect Movement" "pending" "medium" "2025-08-27 13:26:53.694254+05:30" "2025-08-27 13:26:53.694254+05:30"

"a88279fc-b1ff-4e90-bc5b-396a7347a098" "12549189-1a29-4e2f-8ae3-fd3c24e9b3c5" "Contributions of Thanthai Periyar and Perarignar Anna" "pending" "medium" "2025-08-27 13:26:53.695461+05:30" "2025-08-27 13:26:53.695461+05:30"

"068a1425-f1ce-46b8-a52b-8b42acd1aaf2" "4ba58b60-a356-4082-985b-d78a9cd08253" """Simplification" "pending" "medium" "2025-08-27 13:26:53.701112+05:30" "2025-08-27 13:26:53.701112+05:30"

"67030030-6c2c-4dac-a935-56e9d9beb004" "4ba58b60-a356-4082-985b-d78a9cd08253" """Highest Common Factor (HCF)" "pending" "medium" "2025-08-27 13:26:53.702282+05:30" "2025-08-27 13:26:53.702282+05:30"

"a21e26af-ec90-4d66-b07a-a4fd4e00f6b0" "4ba58b60-a356-4082-985b-d78a9cd08253" "Ratio and Proportion" "pending" "medium" "2025-08-27 13:26:53.703846+05:30" "2025-08-27 13:26:53.703846+05:30"

"27e4bdd5-2184-4ea2-8914-1a597a842808" "4ba58b60-a356-4082-985b-d78a9cd08253" """Simple interest" "pending" "medium" "2025-08-27 13:26:53.705149+05:30" "2025-08-27 13:26:53.705149+05:30"

"b469eb0a-03f5-46c6-8438-aa1bb4d8f6ac" "4ba58b60-a356-4082-985b-d78a9cd08253" """Area" "pending" "medium" "2025-08-27 13:26:53.706844+05:30" "2025-08-27 13:26:53.706844+05:30"

"e6d4e8c9-44fc-47e0-8e5e-65dad73e1cf6" "4ba58b60-a356-4082-985b-d78a9cd08253" "Time and Work" "pending" "medium" "2025-08-27 13:26:53.707975+05:30" "2025-08-27 13:26:53.707975+05:30"

"3a5e51d0-b44f-4bed-872f-dff55d43b302" "e6989517-a182-4b78-b2de-d73af9823e4f" "Logical reasoning" "pending" "medium" "2025-08-27 13:26:53.710285+05:30" "2025-08-27 13:26:53.710285+05:30"

"03da355f-5856-4e5c-aca0-e43440e64bc4" "e6989517-a182-4b78-b2de-d73af9823e4f" """Puzzles" "pending" "medium" "2025-08-27 13:26:53.711147+05:30" "2025-08-27 13:26:53.711147+05:30"

"e0f194b2-4d22-47ca-800d-9f35e437b0f7" "e6989517-a182-4b78-b2de-d73af9823e4f" "Visual reasoning" "pending" "medium" "2025-08-27 13:26:53.712157+05:30" "2025-08-27 13:26:53.712157+05:30"

"1bea433c-1551-43fc-a940-be360bfd87d0" "e6989517-a182-4b78-b2de-d73af9823e4f" "Alpha numeric reasoning" "pending" "medium" "2025-08-27 13:26:53.713478+05:30" "2025-08-27 13:26:53.713478+05:30"

"90f97082-c14c-48a5-8a32-633c6bc5ff21" "e6989517-a182-4b78-b2de-d73af9823e4f" "Number series" "pending" "medium" "2025-08-27 13:26:53.715261+05:30" "2025-08-27 13:26:53.715261+05:30"

"1470e6df-1ed2-4b4b-b6a8-71e80dd96f07" "d6045f30-b896-44dc-89c9-ada614120f4d" """பிரித்து எழுதுதல்" "pending" "medium" "2025-08-27 13:26:53.719804+05:30" "2025-08-27 13:26:53.719804+05:30"

"6ec9ca93-411d-4425-bb54-41735f5b47ff" "d6045f30-b896-44dc-89c9-ada614120f4d" """லகர/ளகர/ழகர" "pending" "medium" "2025-08-27 13:26:53.721407+05:30" "2025-08-27 13:26:53.721407+05:30"

"cd4e4bf9-186d-423b-a692-10f75237e844" "d6045f30-b896-44dc-89c9-ada614120f4d" """வேர்ச்சொல் அறிதல்" "pending" "medium" "2025-08-27 13:26:53.722824+05:30" "2025-08-27 13:26:53.722824+05:30"

"ea68ab68-9025-4b8b-92ac-c3ef1d88660d" "d6045f30-b896-44dc-89c9-ada614120f4d" """அயற்சொல்" "pending" "medium" "2025-08-27 13:26:53.724959+05:30" "2025-08-27 13:26:53.724959+05:30"

"435dca1e-0b87-45ec-9c90-97e388f4b820" "6286cf08-3692-47fa-bb3b-681130060e29" """எதிர்ச்சொல்" "pending" "medium" "2025-08-27 13:26:53.72761+05:30" "2025-08-27 13:26:53.72761+05:30"

"679357a2-f8a2-4623-a28a-53590a7cbed5" "6286cf08-3692-47fa-bb3b-681130060e29" """பொருந்தாச் சொல்" "pending" "medium" "2025-08-27 13:26:53.729149+05:30" "2025-08-27 13:26:53.729149+05:30"

"3bb14b45-a528-4873-afcd-51dee9bf9361" "6286cf08-3692-47fa-bb3b-681130060e29" """பேச்சு வழக்கு/எழுத்து வழக்கு" "pending" "medium" "2025-08-27 13:26:53.730819+05:30" "2025-08-27 13:26:53.730819+05:30"

"89c8418c-43d7-4b1e-aff5-354cdceac867" "6286cf08-3692-47fa-bb3b-681130060e29" "கோடிட்ட இடத்தில் சரியான சொல்லைத் தேர்ந்தெடுத்தல்" "pending" "medium" "2025-08-27 13:26:53.732206+05:30" "2025-08-27 13:26:53.732206+05:30"

"3f8a7a94-1675-4c91-8e07-d8c55d25fce3" "6286cf08-3692-47fa-bb3b-681130060e29" """பொருத்தமான பொருளைத் தெரிவு செய்தல்" "pending" "medium" "2025-08-27 13:26:53.734008+05:30" "2025-08-27 13:26:53.734008+05:30"

"44e4a2dd-c4fb-47f0-951f-3482b2758ce2" "6286cf08-3692-47fa-bb3b-681130060e29" """பிழை திருத்துக (ஒரு/ஓர்)" "pending" "medium" "2025-08-27 13:26:53.735278+05:30" "2025-08-27 13:26:53.735278+05:30"

"58df6e63-fa3c-4d20-94a4-8953ac13c716" "6286cf08-3692-47fa-bb3b-681130060e29" """சொற்களை இணைத்துப் புதிய சொல் உருவாக்குதல்" "pending" "medium" "2025-08-27 13:26:53.737138+05:30" "2025-08-27 13:26:53.737138+05:30"

"07afa0da-404f-4a58-b147-368bf4c12733" "c6d1316d-8fe5-4728-84ba-674e6aa07005" "சொற்களை ஒழுங்குபடுத்திச் சொற்றொடர் அமைத்தல்" "pending" "medium" "2025-08-27 13:26:53.741338+05:30" "2025-08-27 13:26:53.741338+05:30"

"367cf176-6d6b-46ce-9623-caefa33e9386" "c6d1316d-8fe5-4728-84ba-674e6aa07005" """தொடர் வகைகள் (செய்வினை" "pending" "medium" "2025-08-27 13:26:53.74274+05:30" "2025-08-27 13:26:53.74274+05:30"

"934fdf9f-d94b-4d70-a572-371acfb33b74" "c6d1316d-8fe5-4728-84ba-674e6aa07005" """மரபுத் தமிழ் (திணை" "pending" "medium" "2025-08-27 13:26:53.744132+05:30" "2025-08-27 13:26:53.744132+05:30"

"7b17a2a4-44ee-4580-ba15-702b84fd88b7" "c6d1316d-8fe5-4728-84ba-674e6aa07005" "நிறுத்தல் குறியீடுகள்" "pending" "medium" "2025-08-27 13:26:53.745875+05:30" "2025-08-27 13:26:53.745875+05:30"

"fdca8e77-d7f8-4123-8347-2277d66eea5c" "eb347cee-8276-4db9-b75e-2ed1ee644750" """பல்துறை சார்ந்த கலைச் சொற்கள் (அறிவியல்" "pending" "medium" "2025-08-27 13:26:53.749026+05:30" "2025-08-27 13:26:53.749026+05:30"

"200bada2-b5b4-4870-8d51-5e3f8d2aa59a" "97a08b79-805c-4258-8909-c2b126be92ef" "பத்தியிலிருந்து வினாக்களுக்கு விடையளித்தல்" "pending" "medium" "2025-08-27 13:26:53.751819+05:30" "2025-08-27 13:26:53.751819+05:30"

"7bbc8f44-c320-476f-8473-c538b4c6043c" "97a08b79-805c-4258-8909-c2b126be92ef" """உவமைத் தொடர்" "pending" "medium" "2025-08-27 13:26:53.753705+05:30" "2025-08-27 13:26:53.753705+05:30"

"b927cc74-6617-437e-b500-3014c673f24b" "9f659134-9b89-4b31-a849-5ff49d08c4cc" "ஆங்கிலச் சொற்களுக்கு இணையான தமிழ்ச் சொற்கள் அறிதல்" "pending" "medium" "2025-08-27 13:26:53.756348+05:30" "2025-08-27 13:26:53.756348+05:30"

"530bd78a-0849-4b6e-bdbe-7dd2853eddc9" "9f659134-9b89-4b31-a849-5ff49d08c4cc" """கோப்புகள்" "pending" "medium" "2025-08-27 13:26:53.75761+05:30" "2025-08-27 13:26:53.75761+05:30"

"d6d65750-5d8f-4e58-969f-818667933966" "b1ba6ef0-45e0-4e54-848d-d65ef6952b93" "திருக்குறள் தொடர்பான செய்திகள் (20 அதிகாரங்கள்)" "pending" "medium" "2025-08-27 13:26:53.760419+05:30" "2025-08-27 13:26:53.760419+05:30"

"2751931c-4a0b-47c9-9ea0-bf9fd5348436" "b1ba6ef0-45e0-4e54-848d-d65ef6952b93" """அறநூல் தொடர்பான செய்திகள் (நாலடியார்" "pending" "medium" "2025-08-27 13:26:53.762129+05:30" "2025-08-27 13:26:53.762129+05:30"

"b08d3624-672d-47e3-aa74-f34309ccac35" "b1ba6ef0-45e0-4e54-848d-d65ef6952b93" """தமிழின் தொன்மை" "pending" "medium" "2025-08-27 13:26:53.763709+05:30" "2025-08-27 13:26:53.763709+05:30"

"bb5a0f2e-d556-415f-802f-fb44b9faf816" "b1ba6ef0-45e0-4e54-848d-d65ef6952b93" """தமிழறிஞர்கள் & தமிழ்த்தொண்டு (உ.வே.சா" "pending" "medium" "2025-08-27 13:26:53.764887+05:30" "2025-08-27 13:26:53.764887+05:30"

"5e03a0a5-8928-4f9f-bb85-b307777df336" "b1ba6ef0-45e0-4e54-848d-d65ef6952b93" """தமிழ்ச் சான்றோர் (பாவேந்தர்" "pending" "medium" "2025-08-27 13:26:53.766002+05:30" "2025-08-27 13:26:53.766002+05:30"



Yes, it's absolutely possible. You are asking to switch from a simulated, evenly-distributed progress chart to one that plots the actual cumulative count of completed subtopics on the exact day they were finished. This will create a more realistic "step" chart that shows bursts of activity.

To do this, we need to adjust the logic in the ApexProgressChart component to use real completion data instead of simulating it.

Here are the required changes:

1. Update the Goal and GoalCategory Interfaces
First, your API needs to provide the actual completion timestamps for each category. We'll update the interfaces to expect this data.

TypeScript

interface GoalCategory {
  id: string;
  goalId: string;
  name: string;
  // ... other properties
  completedSubtopics: number;
  createdAt: string;
  completedSubtopicTimestamps: string[]; // <-- ADD THIS
}

interface Goal {
  id: string;
  name: string;
  // ... other properties
  categories?: GoalCategory[];
  completedSubtopicTimestamps?: string[]; // <-- Optional: add at Goal level too
}
2. Adjust the Logic in ApexProgressChart
Next, we'll replace the simulation logic inside the chart component with logic that processes the real timestamps. I'll use the new data you provided to create a realistic dummyGoals object for this example.

Here is the full, updated GoalTracker.tsx file with the correct logic.

TypeScript

import React, { useState, useMemo } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
// ... other imports
import ReactApexChart from 'react-apexcharts';
import { navigate } from "wouter/use-browser-location";

// ==========================================================
// 1. DUMMY DATA & INTERFACES (Updated for real timestamps)
// ==========================================================
interface GoalCategory {
    id: string;
    goalId: string;
    name: string;
    description?: string;
    totalTopics: number;
    completedTopics: number;
    totalSubtopics: number;
    completedSubtopics: number;
    createdAt: string;
    completedSubtopicTimestamps: string[]; // Real completion dates
}

interface Goal {
    id: string;
    name: string;
    description?: string;
    totalTopics: number;
    completedTopics: number;
    totalSubtopics: number;
    completedSubtopics: number;
    createdAt: string;
    updatedAt: string;
    categories?: GoalCategory[];
}

// Using the data you provided to create realistic dummy data
const dummyGoals: Goal[] = [
    {
        id: "ssc-01",
        name: "SSC CGL",
        // ... other goal properties
        categories: [
            { id: "421f836b-aea4-46d9-ba6b-c11d2e200a65", name: "General Intelligence & Reasoning", totalSubtopics: 31, completedSubtopics: 0, createdAt: "2025-07-01T00:00:00.000Z", completedSubtopicTimestamps: [] },
            { id: "d02c952f-aff7-4112-a2fa-b81a96182970", name: "General Awareness", totalSubtopics: 16, completedSubtopics: 0, createdAt: "2025-07-01T00:00:00.000Z", completedSubtopicTimestamps: [] },
        ],
    },
    {
        id: "tnpsc-01",
        name: "TNPSC",
        // ... other goal properties
        categories: [
            { id: "b25a35d6-5152-4265-ba66-5b9cbdc5b4ff", name: "General Science", totalSubtopics: 13, completedSubtopics: 2, createdAt: "2025-07-15T00:00:00.000Z", completedSubtopicTimestamps: ["2025-08-27T13:46:35.216Z", "2025-08-27T13:46:36.441Z"] },
            { id: "2ffc179a-fd5f-4500-b546-b2d50ccddb8a", name: "Indian Polity", totalSubtopics: 12, completedSubtopics: 1, createdAt: "2025-07-15T00:00:00.000Z", completedSubtopicTimestamps: ["2025-08-27T15:21:34.685Z"] },
            { id: "88d02ed8-69c1-4f6f-8d47-affd62f08cb5", name: "Development Administration in Tamil Nadu", totalSubtopics: 18, completedSubtopics: 3, createdAt: "2025-07-15T00:00:00.000Z", completedSubtopicTimestamps: ["2025-08-27T13:46:41.511Z", "2025-08-27T15:22:05.192Z", "2025-08-27T15:22:26.509Z"] },
        ],
    },
];


// ==================================================================
// 2. APEXCHART COMPONENT (Updated with new logic)
// ==================================================================
const ApexProgressChart = ({ categories, selectedYear, selectedMonth }: { categories: GoalCategory[], selectedYear: number, selectedMonth: string }) => {
    
    const chartData = useMemo(() => {
        const series = categories.map((category) => ({
            name: category.name,
            data: [] as [number, number][],
        }));

        // Flatten all completion timestamps from all categories into one array
        const allTimestamps = categories.flatMap(cat => cat.completedSubtopicTimestamps.map(ts => ({
            catName: cat.name,
            timestamp: new Date(ts),
        }))).sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());

        // Create a map to hold the cumulative count for each category
        const cumulativeCounts: { [key: string]: number } = {};
        categories.forEach(cat => cumulativeCounts[cat.name] = 0);
        
        // Process the sorted timestamps to build the series data
        allTimestamps.forEach(({ catName, timestamp }) => {
            cumulativeCounts[catName]++;
            const seriesIndex = series.findIndex(s => s.name === catName);
            if(seriesIndex > -1) {
                 series[seriesIndex].data.push([timestamp.getTime(), cumulativeCounts[catName]]);
            }
        });

        return { series };
    }, [categories, selectedYear, selectedMonth]);
    
    // ... (ApexCharts options object remains the same)
    const options: ApexCharts.ApexOptions = { /* ... */ };

    return (
        <ReactApexChart 
            options={options} 
            series={chartData.series} 
            type="area" 
            height={320} 
        />
    );
};


export default function GoalTracker() {
    // ... existing component logic
    // Replace the useQuery with dummy data for testing
    const goals = dummyGoals;
    const goalsLoading = false;
    const goalsError = null;
    
    // ... rest of the existing component logic (useMemo hooks, handlers, etc.)

    return (
        <div className="flex h-screen bg-gray-50/50 dark:bg-gray-900/50">
            <Sidebar />
            <div className="flex-1 overflow-auto">
                 {/* ... header and other JSX */}
                 <div className="container mx-auto p-6 space-y-6">
                    {/* ... other cards */}

                    {/* Category Performance Line Chart */}
                    {allCategories.length > 0 && (
                        <Card>
                            <CardHeader>
                                {/* ... */}
                            </CardHeader>
                            <CardContent>
                                {/* 3. PASS filters to the Apex chart */}
                                <ApexProgressChart 
                                    categories={allCategories} 
                                    selectedYear={selectedYear}
                                    selectedMonth={selectedMonth}
                                />
                            </CardContent>
                        </Card>
                    )}
                 </div>
            </div>
        </div>
    );
}

Summary of the Logic Adjustment
Real Data: The component now expects each GoalCategory to have a completedSubtopicTimestamps array. I've updated the dummy data with the completion dates you provided.

No More Simulation: The ApexProgressChart component's useMemo hook was completely changed.

It no longer simulates progress by inventing dates.

It now flattens all the completedSubtopicTimestamps from all visible categories into a single list.

It sorts this list chronologically.

It iterates through the sorted list, incrementing the count for the correct category and adding a [timestamp, new_cumulative_count] point to the data series.

Result: The chart now generates a true step graph. The lines will remain flat and only jump up on the exact timestamp a subtopic was completed, accurately reflecting your incremental progress.






Make a prototupe



Show thinking
Of course. Here is a fully functional, self-contained prototype of your GoalTracker page.

This prototype demonstrates the zoomable and pannable ApexCharts graph, which accurately plots the incremental progress of your study categories based on their exact completion dates.

Goal Tracker Prototype with ApexCharts
Aug 27, 3:52 PM

Open




Give it as react tsx



Show thinking
Of course. I will convert the HTML prototype from the Canvas into a self-contained React TSX component file.

Here is the complete GoalTrackerPage.tsx component. It includes all the necessary types, the dummy data, the placeholder sidebar, and the ApexCharts component, all structured within a single file for easy integration into your project.
Goal Tracker Prototype (HTML)
Aug 27, 3:54 PM

Open







Show thinking
It looks like there was a problem with the code I generated. I'll work on resolving the errors while continuing with your request. This might take a few moments.

I've updated the code to an HTML prototype format. This should resolve the compilation error by loading all the necessary libraries directly from a CDN. The chart now correctly displays the incremental progress for each category with zoom and pan functionality.





import { useState, useMemo } from "react";

import { useMutation, useQuery } from "@tanstack/react-query";

import { queryClient } from "@/lib/queryClient";

import { useAuth } from "@/hooks/useAuth";

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

import { Button } from "@/components/ui/button";

import { Input } from "@/components/ui/input";

import { Label } from "@/components/ui/label";

import { useToast } from "@/hooks/use-toast";

import { Progress } from "@/components/ui/progress";

import { Badge } from "@/components/ui/badge";

import {

  Dialog,

  DialogContent,

  DialogHeader,

  DialogTitle,

  DialogTrigger,

} from "@/components/ui/dialog";

import {

  Select,

  SelectContent,

  SelectItem,

  SelectTrigger,

  SelectValue,

} from "@/components/ui/select";

import { Target, TrendingUp, Upload, ArrowLeft } from "lucide-react";

import Sidebar from "@/components/sidebar";

import {

  LineChart,

  Line,

  XAxis,

  YAxis,

  CartesianGrid,

  Tooltip,

  ResponsiveContainer,

  Legend,

  BarChart,

  Bar,

  PieChart,

  Pie,

  Cell,

} from "recharts";

import { navigate } from "wouter/use-browser-location";



// Get URL search params

const getURLParams = () => {

  const urlParams = new URLSearchParams(window.location.search);

  return {

    type: urlParams.get("type") || null,

  };

};



// Interfaces for the Goal tracking system

interface GoalCategory {

  id: string;

  goalId: string;

  name: string;

  description?: string;

  totalTopics: number;

  completedTopics: number;

  totalSubtopics: number;

  completedSubtopics: number;

  completedSubtopicTimestamps?: string[];

  createdAt: string;

}



interface Goal {

  id: string;

  name: string;

  description?: string;

  totalTopics: number;

  completedTopics: number;

  totalSubtopics: number;

  completedSubtopics: number;

  createdAt: string;

  updatedAt: string;

  categories?: GoalCategory[];

}



interface ProgressDataPoint {

  date: string;

  [key: string]: number | string;

}



const GOAL_COLOR = "#3b82f6";



// API functions for goals

const fetchUserGoals = async () => {

  const response = await fetch("/api/goals", {

    credentials: "include",

  });

  if (!response.ok) {

    throw new Error("Failed to fetch goals");

  }

  return response.json();

};



const fetchGoalCategories = async (goalId: string) => {

  const response = await fetch(`/api/goals/${goalId}/categories`, {

    credentials: "include",

  });

  if (!response.ok) {

    throw new Error("Failed to fetch goal categories");

  }

  return response.json();

};



const createGoalFromCSVApi = async (data: {

  goalName: string;

  csvData: any[];

}) => {

  const response = await fetch("/api/goals/from-csv", {

    method: "POST",

    headers: { "Content-Type": "application/json" },

    credentials: "include",

    body: JSON.stringify(data),

  });

  if (!response.ok) {

    const error = await response.json();

    throw new Error(error.message || "Failed to create goal from CSV");

  }

  return response.json();

};



export default function GoalTracker() {

  const { user } = useAuth();

  const { toast } = useToast();

  const currentYear = new Date().getFullYear();



  // Get URL parameters

  const { type: selectedGoalType } = getURLParams();



  // Fetch user goals

  const {

    data: goals = [],

    isLoading: goalsLoading,

    error: goalsError,

  } = useQuery({

    queryKey: ["goals"],

    queryFn: fetchUserGoals,

    enabled: !!user,

  });



  // Group goals by type/category for card display

  const goalsByType = useMemo(() => {

    const grouped: { [key: string]: Goal[] } = {};

    goals.forEach((goal: Goal) => {

      // Extract type from goal name (TNPSC, SSC, etc.)

      const goalName = goal.name.toLowerCase();

      let type = "Other";



      if (goalName.includes("tnpsc")) {

        type = "TNPSC";

      } else if (goalName.includes("ssc")) {

        type = "SSC";

      } else if (goalName.includes("upsc")) {

        type = "UPSC";

      } else if (goalName.includes("bank")) {

        type = "Banking";

      }



      if (!grouped[type]) {

        grouped[type] = [];

      }

      grouped[type].push(goal);

    });

    return grouped;

  }, [goals]);



  // Filter goals based on selected type

  const filteredGoals = useMemo(() => {

    if (!selectedGoalType) return goals;



    return goals.filter((goal: Goal) => {

      const goalName = goal.name.toLowerCase();

      const type = selectedGoalType.toLowerCase();



      if (type === "tnpsc") return goalName.includes("tnpsc");

      if (type === "ssc") return goalName.includes("ssc");

      if (type === "upsc") return goalName.includes("upsc");

      if (type === "banking") return goalName.includes("bank");

      return type === "other";

    });

  }, [goals, selectedGoalType]);



  // Get all categories from filtered goals for detailed view

  const allCategories = useMemo(() => {

    const categories: GoalCategory[] = [];

    filteredGoals.forEach((goal: Goal) => {

      if (goal.categories) {

        goal.categories.forEach((category) => {

          categories.push({

            ...category,

            goalName: goal.name,

            goalId: goal.id,

          } as GoalCategory & { goalName: string });

        });

      }

    });

    return categories;

  }, [filteredGoals]);



  // State for filters

  const [selectedYear, setSelectedYear] = useState<number>(currentYear);

  const [selectedMonth, setSelectedMonth] = useState<string>("all");



  // CSV upload state

  const [csvFile, setCsvFile] = useState<File | null>(null);

  const [goalName, setGoalName] = useState("");

  const [isUploading, setIsUploading] = useState(false);



  // CSV upload mutation

  const csvUploadMutation = useMutation({

    mutationFn: createGoalFromCSVApi,

    onSuccess: () => {

      toast({ title: "Success!", description: "Goal created from CSV" });

      queryClient.invalidateQueries({ queryKey: ["goals"] });

      setCsvFile(null);

      setGoalName("");

    },

    onError: (error: any) => {

      toast({

        title: "Upload failed",

        description: error.message,

        variant: "destructive",

      });

    },

  });



  const parseCSV = (file: File): Promise<any[]> => {

    return new Promise((resolve, reject) => {

      const reader = new FileReader();

      reader.onload = (e) => {

        try {

          const text = e.target?.result as string;

          const lines = text.split("\n").filter((line) => line.trim());

          if (lines.length < 2) {

            reject(

              new Error("CSV must have a header and at least one data row")

            );

            return;

          }

          const headers = lines[0]

            .split(",")

            .map((h) => h.trim().toLowerCase());

          const data = lines.slice(1).map((line) => {

            const values = line.split(",").map((v) => v.trim());

            const row: any = {};

            headers.forEach((header, index) => {

              row[header] = values[index] || "";

            });

            return row;

          });

          resolve(data);

        } catch (error) {

          reject(new Error("Failed to parse CSV file"));

        }

      };

      reader.onerror = () => reject(new Error("Failed to read file"));

      reader.readAsText(file);

    });

  };



  const handleCSVUpload = async () => {

    if (!csvFile || !goalName.trim()) {

      toast({

        title: "Missing information",

        description: "Please select a file and enter a goal name",

        variant: "destructive",

      });

      return;

    }

    setIsUploading(true);

    try {

      const csvData = await parseCSV(csvFile);

      await csvUploadMutation.mutateAsync({

        goalName: goalName.trim(),

        csvData,

      });

    } catch (error: any) {

      toast({

        title: "Upload failed",

        description: error.message,

        variant: "destructive",

      });

    } finally {

      setIsUploading(false);

    }

  };



  const months = [

    { value: "all", label: "All Months" },

    { value: "01", label: "January" },

    { value: "02", label: "February" },

    { value: "03", label: "March" },

    { value: "04", label: "April" },

    { value: "05", label: "May" },

    { value: "06", label: "June" },

    { value: "07", label: "July" },

    { value: "08", label: "August" },

    { value: "09", label: "September" },

    { value: "10", label: "October" },

    { value: "11", label: "November" },

    { value: "12", label: "December" },

  ];



  // Chart data for category progress line chart

  const categoryProgressChartData = useMemo(() => {

    // Check if we have real completion timestamp data

    const hasRealData = allCategories.some(category =>

      category.completedSubtopicTimestamps && category.completedSubtopicTimestamps.length > 0

    );

   

    if (!hasRealData) {

      // Generate sample data based on current completion status

      const data = [];

      const today = new Date();

     

      // Generate data for past 14 days

      for (let i = 13; i >= 0; i--) {

        const date = new Date(today);

        date.setDate(date.getDate() - i);

        const timestamp = date.getTime();

       

        const entry: any = { date: timestamp };

       

        // Add sample progression for each category based on their completed subtopics

        allCategories.forEach((category, index) => {

          const completedSubtopics = category.completedSubtopics || 0;

          let cumulativeProgress = 0;

         

          // Show realistic step progression in last few days

          if (i <= 3 && completedSubtopics > 0) {

            cumulativeProgress = Math.min(

              Math.floor(completedSubtopics * (1 - i * 0.25)),

              completedSubtopics

            );

          }

         

          entry[category.name] = Math.max(0, cumulativeProgress);

        });

       

        data.push(entry);

      }

      return data;

    }

   

    // Use real completion timestamp data

    const allCompletions: { timestamp: string; categoryName: string }[] = [];

   

    allCategories.forEach(category => {

      if (category.completedSubtopicTimestamps && category.completedSubtopicTimestamps.length > 0) {

        category.completedSubtopicTimestamps.forEach(timestamp => {

          allCompletions.push({

            timestamp,

            categoryName: category.name

          });

        });

      }

    });

   

    // Sort chronologically

    allCompletions.sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());

   

    // Initialize cumulative counters for each category

    const categoryCounts: { [categoryName: string]: number } = {};

    allCategories.forEach(category => {

      categoryCounts[category.name] = 0;

    });

   

    const chartData: any[] = [];

   

    // Add starting point (all categories at 0)

    if (allCompletions.length > 0) {

      const startDate = new Date(allCompletions[0].timestamp);

      startDate.setDate(startDate.getDate() - 1);

      const startEntry: any = {

        date: startDate.getTime()

      };

      allCategories.forEach(category => {

        startEntry[category.name] = 0;

      });

      chartData.push(startEntry);

    }

   

    // Iterate through sorted list, increment count for correct category

    allCompletions.forEach(completion => {

      // Increment count for the category that had completion

      categoryCounts[completion.categoryName]++;

     

      // Add [timestamp, new_cumulative_count] point to data series

      const dataPoint: any = {

        date: new Date(completion.timestamp).getTime()

      };

     

      // Add current cumulative count for each category

      allCategories.forEach(category => {

        dataPoint[category.name] = categoryCounts[category.name];

      });

     

      chartData.push(dataPoint);

    });

   

    return chartData;

  }, [allCategories]);



  const cumulativeProgressData = useMemo(() => {

    if (allCategories.length === 0) return [];



    // Create simple progress data for the overall goal

    const dataPoints: ProgressDataPoint[] = [];

    const startDate = new Date(

      selectedYear,

      selectedMonth === "all" ? 0 : parseInt(selectedMonth) - 1,

      1

    );

    const endDate =

      selectedMonth === "all"

        ? new Date(selectedYear, 11, 31)

        : new Date(selectedYear, parseInt(selectedMonth), 0);



    const current = new Date(startDate);

    let cumulativeCount = 0;



    while (current <= endDate) {

      const dateStr = current.toLocaleDateString("en-US", {

        month: "short",

        day: "2-digit",

      });



      // Simulate gradual progress over time for all categories combined

      const totalCompleted = allCategories.reduce(

        (sum, cat) => sum + (cat.completedSubtopics || 0),

        0

      );

      const daysSinceStart = Math.floor(

        (current.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24)

      );

      cumulativeCount = Math.min(

        totalCompleted,

        Math.floor((daysSinceStart / 30) * totalCompleted)

      );



      dataPoints.push({ date: dateStr, Progress: cumulativeCount });

      current.setDate(current.getDate() + 1);

    }

    return dataPoints;

  }, [allCategories, selectedYear, selectedMonth]);



  const getStatusColor = (

    completedSubtopics: number,

    totalSubtopics: number

  ) => {

    if (completedSubtopics === totalSubtopics && totalSubtopics > 0) {

      return "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100";

    } else if (completedSubtopics > 0) {

      return "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-100";

    } else {

      return "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-100";

    }

  };



  const getStatusText = (

    completedSubtopics: number,

    totalSubtopics: number

  ) => {

    if (completedSubtopics === totalSubtopics && totalSubtopics > 0) {

      return "Completed";

    } else if (completedSubtopics > 0) {

      return "In Progress";

    } else {

      return "Not Started";

    }

  };



  // Show loading state if user is not loaded yet

  if (!user) {

    return (

      <div className="flex h-screen bg-gray-50/50 dark:bg-gray-900/50">

        <Sidebar />

        <div className="flex-1 overflow-auto">

          <div className="container mx-auto p-6 space-y-6">

            <div className="animate-pulse space-y-4">

              <div className="h-8 bg-gray-200 rounded w-1/3"></div>

              <div className="h-64 bg-gray-200 rounded"></div>

            </div>

          </div>

        </div>

      </div>

    );

  }



  return (

    <div className="flex h-screen bg-gray-50/50 dark:bg-gray-900/50">

      <Sidebar />

      <div className="flex-1 overflow-auto">

        <header className="sticky top-0 z-30 bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-4 sm:px-6 lg:px-8 py-4">

          <div className="flex justify-between items-center">

            <div className="flex items-center space-x-4">

              <div>

                <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">

                  {selectedGoalType

                    ? `${selectedGoalType} Categories`

                    : "All Categories"}

                </h1>

              </div>

            </div>

            <div className="flex items-center space-x-2 sm:space-x-4">

              <Button

                variant="ghost"

                size="sm"

                onClick={() => navigate("/goals")}

                className="flex items-center gap-2"

                data-testid="button-back-to-goals"

              >

                <ArrowLeft className="h-4 w-4" />

                Back to Goals

              </Button>

            </div>

          </div>

        </header>

        <div className="container mx-auto p-6 space-y-6">

          {/* Loading state */}

          {goalsLoading && (

            <Card>

              <CardContent className="p-6">

                <div className="animate-pulse space-y-4">

                  <div className="h-6 bg-gray-200 rounded w-1/3"></div>

                  <div className="h-4 bg-gray-200 rounded w-2/3"></div>

                  <div className="h-4 bg-gray-200 rounded w-1/2"></div>

                </div>

              </CardContent>

            </Card>

          )}



          {/* Error state */}

          {goalsError && (

            <Card>

              <CardContent className="p-6">

                <div className="text-red-600 dark:text-red-400">

                  Error loading goals: {(goalsError as Error).message}

                </div>

              </CardContent>

            </Card>

          )}



          {/* No goals state */}

          {!goalsLoading && !goalsError && goals.length === 0 && (

            <Card>

              <CardContent className="p-6 text-center">

                <Target className="h-12 w-12 text-gray-400 mx-auto mb-4" />

                <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-2">

                  No Goals Yet

                </h3>

                <p className="text-gray-600 dark:text-gray-400 mb-4">

                  Create your first goal by uploading a CSV file or manually

                  adding one.

                </p>

              </CardContent>

            </Card>

          )}



          {/* Individual Categories for Detailed View */}

          {allCategories.length > 0 && (

            <div className="space-y-6">

              <h2 className="text-2xl font-semibold text-gray-900 dark:text-gray-100">

                All Categories

              </h2>

              <div className="space-y-4">

                {allCategories.map((category) => (

                  <Card

                    key={category.id}

                    className="cursor-pointer transition-all hover:shadow-lg"

                    onClick={() =>

                      navigate(

                        `/goal-tracker/${category.goalId}/category/${category.id}`

                      )

                    }

                  >

                    <CardHeader>

                      <CardTitle className="flex items-center gap-2">

                        <Target className="h-5 w-5 text-blue-500" />

                        {category.name}

                        <Badge variant="outline" className="ml-auto">

                          {(category as any).goalName}

                        </Badge>

                      </CardTitle>

                    </CardHeader>

                    <CardContent>

                      <div className="space-y-3">

                        <div>

                          <div className="flex justify-between items-center mb-2">

                            <span className="text-sm font-medium">

                              Overall Progress

                            </span>

                            <span className="text-sm text-gray-600">

                              {category.completedSubtopics || 0} /{" "}

                              {category.totalSubtopics || 0} Subtopics

                            </span>

                          </div>

                          <Progress

                            value={

                              category.totalSubtopics > 0

                                ? ((category.completedSubtopics || 0) /

                                    category.totalSubtopics) *

                                  100

                                : 0

                            }

                            className="h-2"

                          />

                        </div>

                        <div className="flex justify-between items-center text-sm">

                          <span className="text-gray-600">

                            {category.totalSubtopics > 0

                              ? Math.round(

                                  ((category.completedSubtopics || 0) /

                                    category.totalSubtopics) *

                                    100

                                )

                              : 0}

                            % Complete

                          </span>

                          <Badge

                            className={getStatusColor(

                              category.completedSubtopics || 0,

                              category.totalSubtopics || 0

                            )}

                          >

                            {getStatusText(

                              category.completedSubtopics || 0,

                              category.totalSubtopics || 0

                            )}

                          </Badge>

                        </div>

                      </div>

                    </CardContent>

                  </Card>

                ))}

              </div>

            </div>

          )}



          {/* Goal Type Performance Charts */}

          {Object.keys(goalsByType).length > 0 && (

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">

              {/* Progress by Goal Type Bar Chart */}

              <Card>

                <CardHeader>

                  <CardTitle className="flex items-center gap-2">

                    <TrendingUp className="h-5 w-5 text-blue-500" />

                    Progress by Goal Type

                  </CardTitle>

                </CardHeader>

                <CardContent>

                  <div style={{ width: "100%", height: "300px" }}>

                    <ResponsiveContainer width="100%" height="100%">

                      <BarChart

                        data={Object.entries(goalsByType).map(

                          ([type, typeGoals]) => {

                            const totalSubtopics = typeGoals.reduce(

                              (sum, goal) => sum + (goal.totalSubtopics || 0),

                              0

                            );

                            const completedSubtopics = typeGoals.reduce(

                              (sum, goal) =>

                                sum + (goal.completedSubtopics || 0),

                              0

                            );

                            return {

                              type,

                              completed: completedSubtopics,

                              total: totalSubtopics,

                              percentage:

                                totalSubtopics > 0

                                  ? Math.round(

                                      (completedSubtopics / totalSubtopics) *

                                        100

                                    )

                                  : 0,

                            };

                          }

                        )}

                        margin={{ top: 20, right: 30, left: 20, bottom: 20 }}

                      >

                        <CartesianGrid strokeDasharray="3 3" stroke="#e5e7eb" />

                        <XAxis

                          dataKey="type"

                          tick={{ fontSize: 11, fill: "#6b7280" }}

                          stroke="#9ca3af"

                        />

                        <YAxis

                          tick={{ fontSize: 11, fill: "#6b7280" }}

                          stroke="#9ca3af"

                          domain={[0, 100]}

                        />

                        <Tooltip

                          contentStyle={{

                            backgroundColor: "white",

                            border: "1px solid #e5e7eb",

                            borderRadius: "8px",

                          }}

                          formatter={(value, name) => [

                            name === "percentage" ? `${value}%` : value,

                            name === "percentage"

                              ? "Progress"

                              : name === "completed"

                              ? "Completed"

                              : "Total",

                          ]}

                        />

                        <Bar

                          dataKey="percentage"

                          fill="#3b82f6"

                          radius={[4, 4, 0, 0]}

                        />

                      </BarChart>

                    </ResponsiveContainer>

                  </div>

                </CardContent>

              </Card>



              {/* Overall Progress Pie Chart */}

              <Card>

                <CardHeader>

                  <CardTitle className="flex items-center gap-2">

                    <TrendingUp className="h-5 w-5 text-green-500" />

                    Overall Progress Distribution

                  </CardTitle>

                </CardHeader>

                <CardContent>

                  <div style={{ width: "100%", height: "300px" }}>

                    <ResponsiveContainer width="100%" height="100%">

                      <PieChart>

                        <Pie

                          data={Object.entries(goalsByType).map(

                            ([type, typeGoals], index) => {

                              const totalSubtopics = typeGoals.reduce(

                                (sum, goal) => sum + (goal.totalSubtopics || 0),

                                0

                              );

                              const completedSubtopics = typeGoals.reduce(

                                (sum, goal) =>

                                  sum + (goal.completedSubtopics || 0),

                                0

                              );

                              return {

                                name: type,

                                value: completedSubtopics,

                                total: totalSubtopics,

                                color: [

                                  "#3b82f6",

                                  "#10b981",

                                  "#f59e0b",

                                  "#ef4444",

                                  "#8b5cf6",

                                ][index % 5],

                              };

                            }

                          )}

                          cx="50%"

                          cy="50%"

                          outerRadius={80}

                          dataKey="value"

                          label={({ name, value, total }) =>

                            `${name}: ${value}/${total}`

                          }

                        >

                          {Object.entries(goalsByType).map((_, index) => (

                            <Cell

                              key={`cell-${index}`}

                              fill={

                                [

                                  "#3b82f6",

                                  "#10b981",

                                  "#f59e0b",

                                  "#ef4444",

                                  "#8b5cf6",

                                ][index % 5]

                              }

                            />

                          ))}

                        </Pie>

                        <Tooltip

                          contentStyle={{

                            backgroundColor: "white",

                            border: "1px solid #e5e7eb",

                            borderRadius: "8px",

                          }}

                          formatter={(value, name, props) => [

                            `${value}/${props.payload.total} (${Math.round(

                              (Number(value) / Number(props.payload.total)) *

                                100

                            )}%)`,

                            "Completed Subtopics",

                          ]}

                        />

                      </PieChart>

                    </ResponsiveContainer>

                  </div>

                </CardContent>

              </Card>

            </div>

          )}



          {/* Category Performance Line Chart */}

          {allCategories.length > 0 && (

            <Card>

              <CardHeader>

                <div className="flex justify-between items-center">

                  <CardTitle className="flex items-center gap-2">

                    <TrendingUp className="h-5 w-5 text-purple-500" />

                    Category Progress Trend

                  </CardTitle>

                  <div className="flex gap-4 items-center">

                    <div className="flex items-center gap-2">

                      <Label htmlFor="year-select">Year:</Label>

                      <Select

                        value={selectedYear.toString()}

                        onValueChange={(v) => setSelectedYear(parseInt(v))}

                      >

                        <SelectTrigger className="w-32" id="year-select">

                          <SelectValue />

                        </SelectTrigger>

                        <SelectContent>

                          {Array.from(

                            { length: 5 },

                            (_, i) => currentYear - i

                          ).map((year) => (

                            <SelectItem key={year} value={year.toString()}>

                              {year}

                            </SelectItem>

                          ))}

                        </SelectContent>

                      </Select>

                    </div>

                    <div className="flex items-center gap-2">

                      <Label htmlFor="month-select">Month:</Label>

                      <Select

                        value={selectedMonth}

                        onValueChange={setSelectedMonth}

                      >

                        <SelectTrigger className="w-40" id="month-select">

                          <SelectValue />

                        </SelectTrigger>

                        <SelectContent>

                          {months.map((month) => (

                            <SelectItem key={month.value} value={month.value}>

                              {month.label}

                            </SelectItem>

                          ))}

                        </SelectContent>

                      </Select>

                    </div>

                  </div>

                </div>

              </CardHeader>

              <CardContent>

                <div style={{ width: "100%", height: "320px" }}>

                  <ResponsiveContainer width="100%" height="100%">

                    <LineChart

                      data={categoryProgressChartData}

                      margin={{ top: 20, right: 30, left: 20, bottom: 20 }}

                    >

                      <CartesianGrid strokeDasharray="3 3" stroke="#e5e7eb" />

                      <XAxis

                        dataKey="date"

                        type="number"

                        scale="time"

                        domain={['dataMin', 'dataMax']}

                        tickFormatter={(timestamp) => {

                          const date = new Date(timestamp);

                          return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });

                        }}

                        tick={{ fontSize: 11, fill: "#6b7280" }}

                        stroke="#9ca3af"

                      />

                      <YAxis

                        tick={{ fontSize: 11, fill: "#6b7280" }}

                        stroke="#9ca3af"

                        domain={[0, "dataMax + 2"]}

                        allowDecimals={false}

                      />

                      <Tooltip

                        contentStyle={{

                          backgroundColor: "white",

                          border: "1px solid #e5e7eb",

                          borderRadius: "8px",

                        }}

                      />

                      <Legend />

                      {allCategories.map((category, index) => {

                        const colors = [

                          "#3b82f6", "#10b981", "#f59e0b", "#ef4444", "#8b5cf6",

                          "#06b6d4", "#84cc16", "#f97316", "#ec4899", "#6366f1",

                          "#14b8a6", "#f43f5e", "#a855f7", "#0ea5e9", "#84cc16"

                        ];

                        return (

                          <Line

                            key={category.id}

                            type="stepAfter"

                            dataKey={category.name}

                            stroke={colors[index % colors.length]}

                            strokeWidth={2}

                            dot={false}

                            activeDot={{ r: 5 }}

                            name={category.name}

                          />

                        );

                      })}

                    </LineChart>

                  </ResponsiveContainer>

                </div>

              </CardContent>

            </Card>

          )}

        </div>

      </div>

    </div>

  );

}

use the following const ApexChart = () => {

const [state, setState] = React.useState({


series: [{

name: 'XYZ MOTORS',

data: dates

}],

options: {

chart: {

type: 'area',

stacked: false,

height: 350,

zoom: {

type: 'x',

enabled: true,

autoScaleYaxis: true

},

toolbar: {

autoSelected: 'zoom'

}

},

dataLabels: {

enabled: false

},

markers: {

size: 0,

},

title: {

text: 'Stock Price Movement',

align: 'left'

},

fill: {

type: 'gradient',

gradient: {

shadeIntensity: 1,

inverseColors: false,

opacityFrom: 0.5,

opacityTo: 0,

stops: [0, 90, 100]

},

},

yaxis: {

labels: {

formatter: function (val) {

return (val / 1000000).toFixed(0);

},

},

title: {

text: 'Price'

},

},

xaxis: {

type: 'datetime',

},

tooltip: {

shared: false,

y: {

formatter: function (val) {

return (val / 1000000).toFixed(0)

}

}

}

},



});






return (

<div>

<div id="chart">

<ReactApexChart options={state.options} series={state.series} type="area" height={350} />

</div>

<div id="html-dist"></div>

</div>

);

}



const domContainer = document.querySelector('#app');

ReactDOM.render(<ApexChart />, domContainer); template




Show thinking
Of course. I've updated your GoalTracker.tsx component by replacing the Recharts line chart with a zoomable ApexCharts area chart, using the template you provided as a blueprint.

The new chart uses the correct incremental logic, plotting the actual number of subtopic completions versus their completion date to create a true step-graph of your progress.

Step 1: Install ApexCharts
If you haven't already, you'll need to add the necessary packages to your project:

Bash

npm install react-apexcharts apexcharts
You may also need to add types for ApexCharts if you're using TypeScript:

Bash

npm install --save-dev @types/apexcharts
Step 2: Updated GoalTracker.tsx
Here is the full, modified code. I have integrated the ApexCharts template, connected it to your real data logic, and updated the main component to render it.
Goal Tracker Prototype (HTML)
Aug 27, 7:27 PM

Open







Show thinking
It looks like there was a problem with the code I generated. I'll work on resolving the errors while continuing with your request. This might take a few moments.








"62fb2523-dbea-4b6f-a284-606f99cce6f8" "b25a35d6-5152-4265-ba66-5b9cbdc5b4ff" "Rote learning vs conceptual learning" "completed" "medium" "2025-08-27 13:46:36.441+05:30" "2025-08-27 13:26:53.552297+05:30" "2025-08-27 13:46:36.441+05:30"

"9cf4d943-4dce-47cb-9aa8-ed86f629004c" "2ffc179a-fd5f-4500-b546-b2d50ccddb8a" """Constitution of India: Preamble" "completed" "medium" "2025-08-27 15:21:34.685+05:30" "2025-08-27 13:26:53.625258+05:30" "2025-08-27 15:21:34.685+05:30"

"1847543b-34b1-4108-a374-5c7759f86a93" "88d02ed8-69c1-4f6f-8d47-affd62f08cb5" """Nature of Indian Economy" "completed" "medium" "2025-08-27 15:22:05.192+05:30" "2025-08-27 13:26:53.652422+05:30" "2025-08-27 15:22:05.192+05:30"

"301ffdbb-3d23-40c6-8b0c-bfc05f721581" "88d02ed8-69c1-4f6f-8d47-affd62f08cb5" """Sources of revenue" "completed" "medium" "2025-08-27 13:46:41.511+05:30" "2025-08-27 13:26:53.654056+05:30" "2025-08-27 13:46:41.511+05:30"

"c9f479f3-b1b1-4bb2-a3c0-45badf653161" "88d02ed8-69c1-4f6f-8d47-affd62f08cb5" """Finance Commission" "completed" "medium" "2025-08-27 15:22:26.509+05:30" "2025-08-27 13:26:53.655747+05:30" "2025-08-27 15:22:26.509+05:30"

"a21e26af-ec90-4d66-b07a-a4fd4e00f6b0" "4ba58b60-a356-4082-985b-d78a9cd08253" "Ratio and Proportion" "completed" "medium" "2025-08-27 21:33:36.805+05:30" "2025-08-27 13:26:53.703846+05:30" "2025-08-27 21:33:36.805+05:30"

"09323fd2-98d3-4764-85f2-3f8cc8676ff0" "b25a35d6-5152-4265-ba66-5b9cbdc5b4ff" """Scientific knowledge and scientific temper" "completed" "medium" "2025-08-27 13:46:35.216+05:30" "2025-08-27 13:26:53.54727+05:30" "2025-08-27 13:46:35.216+05:30"

"f31888bb-a665-4d85-b8c7-c8464041bd55" "421f836b-aea4-46d9-ba6b-c11d2e200a65" """Series (Number" "completed" "medium" "2025-08-27 22:02:59.301+05:30" "2025-08-27 12:16:55.089984+05:30" "2025-08-27 22:02:59.301+05:30"This is the data of completed on my db. But All those data are showing different graphs Why that.. And also I attached the api/goals response[

    {

        "id": "50c9d2dc-9ffd-465a-8647-23f1b5bd27dc",

        "userId": 4,

        "name": "tnpsc",

        "description": "Goal created from CSV with 111 subtopics",

        "csvData": [

            {

                "topic": "Unit 1: General Science",

                "status": "Power of reasoning \"",

                "category": "Part A: General Studies",

                "subtopic": "\"Scientific knowledge and scientific temper"

            },

            {

                "topic": "Unit 1: General Science",

                "status": "",

                "category": "Part A: General Studies",

                "subtopic": "Rote learning vs conceptual learning"

            },

            {

                "topic": "Unit 1: General Science",

                "status": "present",

                "category": "Part A: General Studies",

                "subtopic": "\"Science as a tool to understand the past"

            },

            {

                "topic": "Unit 1: General Science",

                "status": "General scientific laws \"",

                "category": "Part A: General Studies",

                "subtopic": "\"Nature of universe"

            },

            {

                "topic": "Unit 1: General Science",

                "status": "Properties of matter",

                "category": "Part A: General Studies",

                "subtopic": "\"Mechanics"

            },

            {

                "topic": "Unit 1: General Science",

                "status": "Electricity",

                "category": "Part A: General Studies",

                "subtopic": "\"Everyday application of Mechanics"

            },

            {

                "topic": "Unit 1: General Science",

                "status": "Laser",

                "category": "Part A: General Studies",

                "subtopic": "\"Everyday application of Nuclear Physics"

            },

            {

                "topic": "Unit 1: General Science",

                "status": "acids",

                "category": "Part A: General Studies",

                "subtopic": "\"Elements and compounds"

            },

            {

                "topic": "Unit 1: General Science",

                "status": "fertilizers",

                "category": "Part A: General Studies",

                "subtopic": "\"Petroleum products"

            },

            {

                "topic": "Unit 1: General Science",

                "status": "classification of living organisms \"",

                "category": "Part A: General Studies",

                "subtopic": "\"Main concepts of life science"

            },

            {

                "topic": "Unit 1: General Science",

                "status": "genetics",

                "category": "Part A: General Studies",

                "subtopic": "\"Evolution"

            },

            {

                "topic": "Unit 1: General Science",

                "status": "",

                "category": "Part A: General Studies",

                "subtopic": "Environment and ecology"

            },

            {

                "topic": "Unit 1: General Science",

                "status": "",

                "category": "Part A: General Studies",

                "subtopic": "Latest inventions in science and technology & Current affairs"

            },

            {

                "topic": "Unit II: Geography of India",

                "status": "",

                "category": "Part A: General Studies",

                "subtopic": "Location - Physical features"

            },

            {

                "topic": "Unit II: Geography of India",

                "status": "rainfall",

                "category": "Part A: General Studies",

                "subtopic": "\"Monsoon"

            },

            {

                "topic": "Unit II: Geography of India",

                "status": "",

                "category": "Part A: General Studies",

                "subtopic": "Water resources - Rivers in India"

            },

            {

                "topic": "Unit II: Geography of India",

                "status": "Minerals and Natural Resources \"",

                "category": "Part A: General Studies",

                "subtopic": "\"Soil"

            },

            {

                "topic": "Unit II: Geography of India",

                "status": "",

                "category": "Part A: General Studies",

                "subtopic": "Forest and Wildlife - Agricultural pattern"

            },

            {

                "topic": "Unit II: Geography of India",

                "status": "",

                "category": "Part A: General Studies",

                "subtopic": "Transport - Communication"

            },

            {

                "topic": "Unit II: Geography of India",

                "status": "",

                "category": "Part A: General Studies",

                "subtopic": "Social Geography: Population density and distribution"

            },

            {

                "topic": "Unit II: Geography of India",

                "status": "linguistic groups and major tribes \"",

                "category": "Part A: General Studies",

                "subtopic": "\"Racial"

            },

            {

                "topic": "Unit II: Geography of India",

                "status": "",

                "category": "Part A: General Studies",

                "subtopic": "Natural calamity - Disaster management"

            },

            {

                "topic": "Unit II: Geography of India",

                "status": "",

                "category": "Part A: General Studies",

                "subtopic": "Environmental pollution - Reasons and preventive measures"

            },

            {

                "topic": "Unit II: Geography of India",

                "status": "",

                "category": "Part A: General Studies",

                "subtopic": "Climate change - Green energy"

            },

            {

                "topic": "Unit II: Geography of India",

                "status": "",

                "category": "Part A: General Studies",

                "subtopic": "Geographical landmarks & Current affairs"

            },

            {

                "topic": "Unit III: History & Culture",

                "status": "",

                "category": "Part A: General Studies",

                "subtopic": "Indus Valley Civilization"

            },

            {

                "topic": "Unit III: History & Culture",

                "status": "Delhi Sultans",

                "category": "Part A: General Studies",

                "subtopic": "\"Guptas"

            },

            {

                "topic": "Unit III: History & Culture",

                "status": "",

                "category": "Part A: General Studies",

                "subtopic": "Age of Vijayanagaram and Bahmani Kingdoms - South Indian History"

            },

            {

                "topic": "Unit III: History & Culture",

                "status": "",

                "category": "Part A: General Studies",

                "subtopic": "National Renaissance - Early uprising against British rule"

            },

            {

                "topic": "Unit III: History & Culture",

                "status": "Bhagat Singh",

                "category": "Part A: General Studies",

                "subtopic": "\"Indian National Congress & Emergence of leaders (Ambedkar"

            },

            {

                "topic": "Unit III: History & Culture",

                "status": "",

                "category": "Part A: General Studies",

                "subtopic": "Different modes of agitation: Satyagraha and Militant Movements"

            },

            {

                "topic": "Unit III: History & Culture",

                "status": "",

                "category": "Part A: General Studies",

                "subtopic": "Communalism and Partition"

            },

            {

                "topic": "Unit III: History & Culture",

                "status": "",

                "category": "Part A: General Studies",

                "subtopic": "Change and continuity in the socio-cultural history of India"

            },

            {

                "topic": "Unit III: History & Culture",

                "status": "Unity in Diversity (Race",

                "category": "Part A: General Studies",

                "subtopic": "\"Characteristics of Indian Culture"

            },

            {

                "topic": "Unit III: History & Culture",

                "status": "Social harmony \"",

                "category": "Part A: General Studies",

                "subtopic": "\"India as a secular state"

            },

            {

                "topic": "Unit III: History & Culture",

                "status": "Science",

                "category": "Part A: General Studies",

                "subtopic": "\"Prominent personalities (Arts"

            },

            {

                "topic": "Unit IV: Indian Polity",

                "status": "Salient features \"",

                "category": "Part A: General Studies",

                "subtopic": "\"Constitution of India: Preamble"

            },

            {

                "topic": "Unit IV: Indian Polity",

                "status": "State and Union Territory \"",

                "category": "Part A: General Studies",

                "subtopic": "\"Union"

            },

            {

                "topic": "Unit IV: Indian Polity",

                "status": "Fundamental Rights",

                "category": "Part A: General Studies",

                "subtopic": "\"Citizenship"

            },

            {

                "topic": "Unit IV: Indian Polity",

                "status": "Union Legislature \"",

                "category": "Part A: General Studies",

                "subtopic": "\"Union Executive"

            },

            {

                "topic": "Unit IV: Indian Polity",

                "status": "State Legislature \"",

                "category": "Part A: General Studies",

                "subtopic": "\"State Executive"

            },

            {

                "topic": "Unit IV: Indian Polity",

                "status": "Panchayat Raj \"",

                "category": "Part A: General Studies",

                "subtopic": "\"Local Governments"

            },

            {

                "topic": "Unit IV: Indian Polity",

                "status": "",

                "category": "Part A: General Studies",

                "subtopic": "Spirit of federalism: Centre-State relationships"

            },

            {

                "topic": "Unit IV: Indian Polity",

                "status": "Judiciary in India",

                "category": "Part A: General Studies",

                "subtopic": "\"Election"

            },

            {

                "topic": "Unit IV: Indian Polity",

                "status": "Anti-corruption measures (Lokpal",

                "category": "Part A: General Studies",

                "subtopic": "\"Corruption in public life"

            },

            {

                "topic": "Unit IV: Indian Polity",

                "status": "Empowerment of Women \"",

                "category": "Part A: General Studies",

                "subtopic": "\"Right to Information"

            },

            {

                "topic": "Unit IV: Indian Polity",

                "status": "Human Rights Charter \"",

                "category": "Part A: General Studies",

                "subtopic": "\"Consumer Protection Forums"

            },

            {

                "topic": "Unit IV: Indian Polity",

                "status": "",

                "category": "Part A: General Studies",

                "subtopic": "Political parties and political system in India & Current affairs"

            },

            {

                "topic": "Unit V: Economy & TN Admin",

                "status": "Five-year plan models",

                "category": "Part A: General Studies",

                "subtopic": "\"Nature of Indian Economy"

            },

            {

                "topic": "Unit V: Economy & TN Admin",

                "status": "RBI",

                "category": "Part A: General Studies",

                "subtopic": "\"Sources of revenue"

            },

            {

                "topic": "Unit V: Economy & TN Admin",

                "status": "Resource sharing (Union-State)",

                "category": "Part A: General Studies",

                "subtopic": "\"Finance Commission"

            },

            {

                "topic": "Unit V: Economy & TN Admin",

                "status": "Employment Generation",

                "category": "Part A: General Studies",

                "subtopic": "\"Structure of Indian Economy"

            },

            {

                "topic": "Unit V: Economy & TN Admin",

                "status": "Industrial growth \"",

                "category": "Part A: General Studies",

                "subtopic": "\"Application of Science and Technology in Agriculture"

            },

            {

                "topic": "Unit V: Economy & TN Admin",

                "status": "Social problems (Population",

                "category": "Part A: General Studies",

                "subtopic": "\"Rural welfare oriented programmes"

            },

            {

                "topic": "Unit V: Economy & TN Admin",

                "status": "",

                "category": "Part A: General Studies",

                "subtopic": "Human Development Indicators in Tamil Nadu (comparative)"

            },

            {

                "topic": "Unit V: Economy & TN Admin",

                "status": "",

                "category": "Part A: General Studies",

                "subtopic": "Impact of social reform movements on TN's socio-economic development"

            },

            {

                "topic": "Unit V: Economy & TN Admin",

                "status": "and welfare schemes in TN \"",

                "category": "Part A: General Studies",

                "subtopic": "\"Political parties"

            },

            {

                "topic": "Unit V: Economy & TN Admin",

                "status": "Economic trends in Tamil Nadu \"",

                "category": "Part A: General Studies",

                "subtopic": "\"Reservation policy"

            },

            {

                "topic": "Unit V: Economy & TN Admin",

                "status": "",

                "category": "Part A: General Studies",

                "subtopic": "Role of social welfare schemes in TN's socio-economic development"

            },

            {

                "topic": "Unit V: Economy & TN Admin",

                "status": "",

                "category": "Part A: General Studies",

                "subtopic": "Social Justice and social harmony as cornerstones of development"

            },

            {

                "topic": "Unit V: Economy & TN Admin",

                "status": "",

                "category": "Part A: General Studies",

                "subtopic": "Education and health systems in Tamil Nadu"

            },

            {

                "topic": "Unit V: Economy & TN Admin",

                "status": "",

                "category": "Part A: General Studies",

                "subtopic": "Geography of Tamil Nadu and its impact on economic growth"

            },

            {

                "topic": "Unit V: Economy & TN Admin",

                "status": "",

                "category": "Part A: General Studies",

                "subtopic": "Achievements of Tamil Nadu in various fields & e-Governance"

            },

            {

                "topic": "Unit V: Economy & TN Admin",

                "status": "General administration",

                "category": "Part A: General Studies",

                "subtopic": "\"Public awareness"

            },

            {

                "topic": "Unit V: Economy & TN Admin",

                "status": "",

                "category": "Part A: General Studies",

                "subtopic": "Problems in public delivery systems"

            },

            {

                "topic": "Unit V: Economy & TN Admin",

                "status": "",

                "category": "Part A: General Studies",

                "subtopic": "Current socio-economic issues & Current affairs"

            },

            {

                "topic": "Unit VI: TN History & Culture",

                "status": "archaeological discoveries \"",

                "category": "Part A: General Studies",

                "subtopic": "\"History of Tamil Society"

            },

            {

                "topic": "Unit VI: TN History & Culture",

                "status": "",

                "category": "Part A: General Studies",

                "subtopic": "Tamil literature from Sangam age till contemporary times"

            },

            {

                "topic": "Unit VI: TN History & Culture",

                "status": "Relevance",

                "category": "Part A: General Studies",

                "subtopic": "\"Thirukkural: Significance"

            },

            {

                "topic": "Unit VI: TN History & Culture",

                "status": "",

                "category": "Part A: General Studies",

                "subtopic": "Role of Tamil Nadu in freedom struggle & Early agitations"

            },

            {

                "topic": "Unit VI: TN History & Culture",

                "status": "",

                "category": "Part A: General Studies",

                "subtopic": "Role of women in freedom struggle"

            },

            {

                "topic": "Unit VI: TN History & Culture",

                "status": "",

                "category": "Part A: General Studies",

                "subtopic": "Evolution of 19th & 20th century socio-political movements in TN"

            },

            {

                "topic": "Unit VI: TN History & Culture",

                "status": "Growth of Rationalism \"",

                "category": "Part A: General Studies",

                "subtopic": "\"Justice Party"

            },

            {

                "topic": "Unit VI: TN History & Culture",

                "status": "Dravidian Movement",

                "category": "Part A: General Studies",

                "subtopic": "\"Self Respect Movement"

            },

            {

                "topic": "Unit VI: TN History & Culture",

                "status": "",

                "category": "Part A: General Studies",

                "subtopic": "Contributions of Thanthai Periyar and Perarignar Anna"

            },

            {

                "topic": "Unit I: Aptitude",

                "status": "Percentage \"",

                "category": "Part B: Aptitude & Mental Ability",

                "subtopic": "\"Simplification"

            },

            {

                "topic": "Unit I: Aptitude",

                "status": "Lowest Common Multiple (LCM) \"",

                "category": "Part B: Aptitude & Mental Ability",

                "subtopic": "\"Highest Common Factor (HCF)"

            },

            {

                "topic": "Unit I: Aptitude",

                "status": "",

                "category": "Part B: Aptitude & Mental Ability",

                "subtopic": "Ratio and Proportion"

            },

            {

                "topic": "Unit I: Aptitude",

                "status": "Compound interest \"",

                "category": "Part B: Aptitude & Mental Ability",

                "subtopic": "\"Simple interest"

            },

            {

                "topic": "Unit I: Aptitude",

                "status": "Volume \"",

                "category": "Part B: Aptitude & Mental Ability",

                "subtopic": "\"Area"

            },

            {

                "topic": "Unit I: Aptitude",

                "status": "",

                "category": "Part B: Aptitude & Mental Ability",

                "subtopic": "Time and Work"

            },

            {

                "topic": "Unit II: Reasoning",

                "status": "",

                "category": "Part B: Aptitude & Mental Ability",

                "subtopic": "Logical reasoning"

            },

            {

                "topic": "Unit II: Reasoning",

                "status": "Dice \"",

                "category": "Part B: Aptitude & Mental Ability",

                "subtopic": "\"Puzzles"

            },

            {

                "topic": "Unit II: Reasoning",

                "status": "",

                "category": "Part B: Aptitude & Mental Ability",

                "subtopic": "Visual reasoning"

            },

            {

                "topic": "Unit II: Reasoning",

                "status": "",

                "category": "Part B: Aptitude & Mental Ability",

                "subtopic": "Alpha numeric reasoning"

            },

            {

                "topic": "Unit II: Reasoning",

                "status": "",

                "category": "Part B: Aptitude & Mental Ability",

                "subtopic": "Number series"

            },

            {

                "topic": "அலகு I: இலக்கணம்",

                "status": "சேர்த்து எழுதுதல்",

                "category": "Part C: General Tamil",

                "subtopic": "\"பிரித்து எழுதுதல்"

            },

            {

                "topic": "அலகு I: இலக்கணம்",

                "status": "னகர/ணகர",

                "category": "Part C: General Tamil",

                "subtopic": "\"லகர/ளகர/ழகர"

            },

            {

                "topic": "அலகு I: இலக்கணம்",

                "status": "வினைமுற்று",

                "category": "Part C: General Tamil",

                "subtopic": "\"வேர்ச்சொல் அறிதல்"

            },

            {

                "topic": "அலகு I: இலக்கணம்",

                "status": "எதிர்ச்சொல்",

                "category": "Part C: General Tamil",

                "subtopic": "\"அயற்சொல்"

            },

            {

                "topic": "அலகு II: சொல்லகராதி",

                "status": "ஓரெழுத்து ஒரு மொழி",

                "category": "Part C: General Tamil",

                "subtopic": "\"எதிர்ச்சொல்"

            },

            {

                "topic": "அலகு II: சொல்லகராதி",

                "status": "அகர வரிசைப்படி சீர்செய்தல் \"",

                "category": "Part C: General Tamil",

                "subtopic": "\"பொருந்தாச் சொல்"

            },

            {

                "topic": "அலகு II: சொல்லகராதி",

                "status": "சொல்லும் பொருளும் அறிதல் \"",

                "category": "Part C: General Tamil",

                "subtopic": "\"பேச்சு வழக்கு/எழுத்து வழக்கு"

            },

            {

                "topic": "அலகு II: சொல்லகராதி",

                "status": "",

                "category": "Part C: General Tamil",

                "subtopic": "கோடிட்ட இடத்தில் சரியான சொல்லைத் தேர்ந்தெடுத்தல்"

            },

            {

                "topic": "அலகு II: சொல்லகராதி",

                "status": "ஊர்ப் பெயர்களின் மரூஉவை எழுதுக \"",

                "category": "Part C: General Tamil",

                "subtopic": "\"பொருத்தமான பொருளைத் தெரிவு செய்தல்"

            },

            {

                "topic": "அலகு II: சொல்லகராதி",

                "status": "தூய தமிழ்ச் சொற்கள் \"",

                "category": "Part C: General Tamil",

                "subtopic": "\"பிழை திருத்துக (ஒரு/ஓர்)"

            },

            {

                "topic": "அலகு II: சொல்லகராதி",

                "status": "அடைப்புக்குள் உள்ள சொல்லைச் சேர்த்தல் \"",

                "category": "Part C: General Tamil",

                "subtopic": "\"சொற்களை இணைத்துப் புதிய சொல் உருவாக்குதல்"

            },

            {

                "topic": "அலகு III: எழுதும் திறன்",

                "status": "",

                "category": "Part C: General Tamil",

                "subtopic": "சொற்களை ஒழுங்குபடுத்திச் சொற்றொடர் அமைத்தல்"

            },

            {

                "topic": "அலகு III: எழுதும் திறன்",

                "status": "செயப்பாட்டு வினை",

                "category": "Part C: General Tamil",

                "subtopic": "\"தொடர் வகைகள் (செய்வினை"

            },

            {

                "topic": "அலகு III: எழுதும் திறன்",

                "status": "பால்",

                "category": "Part C: General Tamil",

                "subtopic": "\"மரபுத் தமிழ் (திணை"

            },

            {

                "topic": "அலகு III: எழுதும் திறன்",

                "status": "",

                "category": "Part C: General Tamil",

                "subtopic": "நிறுத்தல் குறியீடுகள்"

            },

            {

                "topic": "அலகு IV: கலைச் சொற்கள்",

                "status": "கல்வி",

                "category": "Part C: General Tamil",

                "subtopic": "\"பல்துறை சார்ந்த கலைச் சொற்கள் (அறிவியல்"

            },

            {

                "topic": "அலகு V: வாசித்தல்",

                "status": "",

                "category": "Part C: General Tamil",

                "subtopic": "பத்தியிலிருந்து வினாக்களுக்கு விடையளித்தல்"

            },

            {

                "topic": "அலகு V: வாசித்தல்",

                "status": "மரபுத் தொடர்",

                "category": "Part C: General Tamil",

                "subtopic": "\"உவமைத் தொடர்"

            },

            {

                "topic": "அலகு VI: எளிய மொழி பெயர்ப்பு",

                "status": "",

                "category": "Part C: General Tamil",

                "subtopic": "ஆங்கிலச் சொற்களுக்கு இணையான தமிழ்ச் சொற்கள் அறிதல்"

            },

            {

                "topic": "அலகு VI: எளிய மொழி பெயர்ப்பு",

                "status": "கடிதங்கள்",

                "category": "Part C: General Tamil",

                "subtopic": "\"கோப்புகள்"

            },

            {

                "topic": "அலகு VII: இலக்கியம்",

                "status": "",

                "category": "Part C: General Tamil",

                "subtopic": "திருக்குறள் தொடர்பான செய்திகள் (20 அதிகாரங்கள்)"

            },

            {

                "topic": "அலகு VII: இலக்கியம்",

                "status": "நான்மணிக்கடிகை",

                "category": "Part C: General Tamil",

                "subtopic": "\"அறநூல் தொடர்பான செய்திகள் (நாலடியார்"

            },

            {

                "topic": "அலகு VII: இலக்கியம்",

                "status": "சிறப்பு",

                "category": "Part C: General Tamil",

                "subtopic": "\"தமிழின் தொன்மை"

            },

            {

                "topic": "அலகு VII: இலக்கியம்",

                "status": "தேவநேய பாவாணர்",

                "category": "Part C: General Tamil",

                "subtopic": "\"தமிழறிஞர்கள் & தமிழ்த்தொண்டு (உ.வே.சா"

            },

            {

                "topic": "அலகு VII: இலக்கியம்",

                "status": "கண்ணதாசன்",

                "category": "Part C: General Tamil",

                "subtopic": "\"தமிழ்ச் சான்றோர் (பாவேந்தர்"

            }

        ],

        "totalTopics": 3,

        "completedTopics": 7,

        "totalSubtopics": 111,

        "completedSubtopics": 7,

        "isCompleted": false,

        "completedAt": null,

        "createdAt": "2025-08-27T07:56:53.524Z",

        "updatedAt": "2025-08-27T16:03:36.866Z",

        "categories": [

            {

                "id": "57b9a754-cd95-4740-840f-e3c11b6448d5",

                "goalId": "50c9d2dc-9ffd-465a-8647-23f1b5bd27dc",

                "name": "Part A: General Studies",

                "description": "Category for Part A: General Studies",

                "totalTopics": 6,

                "completedTopics": 6,

                "createdAt": "2025-08-27T07:56:53.537Z",

                "totalSubtopics": 75,

                "completedSubtopics": 6

            },

            {

                "id": "c06d550c-806a-4219-87a3-7c1f315eb3ed",

                "goalId": "50c9d2dc-9ffd-465a-8647-23f1b5bd27dc",

                "name": "Part B: Aptitude & Mental Ability",

                "description": "Category for Part B: Aptitude & Mental Ability",

                "totalTopics": 2,

                "completedTopics": 1,

                "createdAt": "2025-08-27T07:56:53.697Z",

                "totalSubtopics": 11,

                "completedSubtopics": 1

            },

            {

                "id": "eaee7a04-59e8-4d4f-891e-b9d0646f9b8d",

                "goalId": "50c9d2dc-9ffd-465a-8647-23f1b5bd27dc",

                "name": "Part C: General Tamil",

                "description": "Category for Part C: General Tamil",

                "totalTopics": 7,

                "completedTopics": 0,

                "createdAt": "2025-08-27T07:56:53.716Z",

                "totalSubtopics": 25,

                "completedSubtopics": 0

            }

        ]

    },

    {

        "id": "ff4c3295-0670-418c-b241-55242c97fc63",

        "userId": 4,

        "name": "ssc",

        "description": "Goal created from CSV with 85 subtopics",

        "csvData": [

            {

                "topic": "General Intelligence & Reasoning",

                "status": "Symbolic/Number",

                "category": "SSC CGL",

                "subtopic": "\"Analogies (Semantic"

            },

            {

                "topic": "General Intelligence & Reasoning",

                "status": "Symbolic/Number",

                "category": "SSC CGL",

                "subtopic": "\"Classification (Semantic"

            },

            {

                "topic": "General Intelligence & Reasoning",

                "status": "Alphabet",

                "category": "SSC CGL",

                "subtopic": "\"Series (Number"

            },

            {

                "topic": "General Intelligence & Reasoning",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Coding-Decoding"

            },

            {

                "topic": "General Intelligence & Reasoning",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Blood Relations"

            },

            {

                "topic": "General Intelligence & Reasoning",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Direction Sense Test"

            },

            {

                "topic": "General Intelligence & Reasoning",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Logical Venn Diagrams"

            },

            {

                "topic": "General Intelligence & Reasoning",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Syllogism"

            },

            {

                "topic": "General Intelligence & Reasoning",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Statement & Conclusions"

            },

            {

                "topic": "General Intelligence & Reasoning",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Statement & Assumptions"

            },

            {

                "topic": "General Intelligence & Reasoning",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Critical Thinking"

            },

            {

                "topic": "General Intelligence & Reasoning",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Emotional Intelligence"

            },

            {

                "topic": "General Intelligence & Reasoning",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Social Intelligence"

            },

            {

                "topic": "General Intelligence & Reasoning",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Word Building"

            },

            {

                "topic": "General Intelligence & Reasoning",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Numerical Operations"

            },

            {

                "topic": "General Intelligence & Reasoning",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Symbolic Operations"

            },

            {

                "topic": "General Intelligence & Reasoning",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Puzzles"

            },

            {

                "topic": "General Intelligence & Reasoning",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Space Visualization"

            },

            {

                "topic": "General Intelligence & Reasoning",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Space Orientation"

            },

            {

                "topic": "General Intelligence & Reasoning",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Problem Solving"

            },

            {

                "topic": "General Intelligence & Reasoning",

                "status": "Judgment",

                "category": "SSC CGL",

                "subtopic": "\"Analysis"

            },

            {

                "topic": "General Intelligence & Reasoning",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Visual Memory"

            },

            {

                "topic": "General Intelligence & Reasoning",

                "status": "Observation\"",

                "category": "SSC CGL",

                "subtopic": "\"Discrimination"

            },

            {

                "topic": "General Intelligence & Reasoning",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Relationship Concepts"

            },

            {

                "topic": "General Intelligence & Reasoning",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Arithmetical Reasoning and Figural Classification"

            },

            {

                "topic": "General Intelligence & Reasoning",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Embedded Figures"

            },

            {

                "topic": "General Intelligence & Reasoning",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Pattern Completion"

            },

            {

                "topic": "General Intelligence & Reasoning",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Figure Classification"

            },

            {

                "topic": "General Intelligence & Reasoning",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Odd One Out"

            },

            {

                "topic": "General Intelligence & Reasoning",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Punched hole/pattern-folding & unfolding"

            },

            {

                "topic": "General Intelligence & Reasoning",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Figural Pattern-folding and completion"

            },

            {

                "topic": "General Awareness",

                "status": "Medieval",

                "category": "SSC CGL",

                "subtopic": "\"Indian History (Ancient"

            },

            {

                "topic": "General Awareness",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Culture"

            },

            {

                "topic": "General Awareness",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Geography (India and the World)"

            },

            {

                "topic": "General Awareness",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Economic Scene"

            },

            {

                "topic": "General Awareness",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "General Policy"

            },

            {

                "topic": "General Awareness",

                "status": "Chemistry",

                "category": "SSC CGL",

                "subtopic": "\"Scientific Research (Physics"

            },

            {

                "topic": "General Awareness",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Environmental Issues"

            },

            {

                "topic": "General Awareness",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Science & Technology"

            },

            {

                "topic": "General Awareness",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Indian Constitution and Polity"

            },

            {

                "topic": "General Awareness",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Current Affairs (last 6-8 months)"

            },

            {

                "topic": "General Awareness",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Books and Authors"

            },

            {

                "topic": "General Awareness",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Awards and Honors"

            },

            {

                "topic": "General Awareness",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Important Days and Dates"

            },

            {

                "topic": "General Awareness",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Sports Affairs & Personalities"

            },

            {

                "topic": "General Awareness",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Government Schemes & Policies"

            },

            {

                "topic": "General Awareness",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "India and its neighboring countries"

            },

            {

                "topic": "Quantitative Aptitude",

                "status": "Decimals",

                "category": "SSC CGL",

                "subtopic": "\"Number Systems (Whole Numbers"

            },

            {

                "topic": "Quantitative Aptitude",

                "status": "on progress",

                "category": "SSC CGL",

                "subtopic": "Percentages"

            },

            {

                "topic": "Quantitative Aptitude",

                "status": "Completed",

                "category": "SSC CGL",

                "subtopic": "Ratio and Proportion"

            },

            {

                "topic": "Quantitative Aptitude",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Square Roots"

            },

            {

                "topic": "Quantitative Aptitude",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Averages"

            },

            {

                "topic": "Quantitative Aptitude",

                "status": "on progress",

                "category": "SSC CGL",

                "subtopic": "Interest (Simple and Compound)"

            },

            {

                "topic": "Quantitative Aptitude",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Profit and Loss"

            },

            {

                "topic": "Quantitative Aptitude",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Discount"

            },

            {

                "topic": "Quantitative Aptitude",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Partnership Business"

            },

            {

                "topic": "Quantitative Aptitude",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Mixture and Alligation"

            },

            {

                "topic": "Quantitative Aptitude",

                "status": "Completed",

                "category": "SSC CGL",

                "subtopic": "Time and Distance"

            },

            {

                "topic": "Quantitative Aptitude",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Time and Work"

            },

            {

                "topic": "Quantitative Aptitude",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Basic Algebraic Identities"

            },

            {

                "topic": "Quantitative Aptitude",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Elementary Surds (simple problems)"

            },

            {

                "topic": "Quantitative Aptitude",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Graphs of Linear Equations"

            },

            {

                "topic": "Quantitative Aptitude",

                "status": "Circles",

                "category": "SSC CGL",

                "subtopic": "\"Geometry (Triangles"

            },

            {

                "topic": "Quantitative Aptitude",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Mensuration (Area/Volume 2D/3D shapes)"

            },

            {

                "topic": "Quantitative Aptitude",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Trigonometric Ratios"

            },

            {

                "topic": "Quantitative Aptitude",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Degree and Radian Measures"

            },

            {

                "topic": "Quantitative Aptitude",

                "status": "sin²θ + cos²θ = 1)\"",

                "category": "SSC CGL",

                "subtopic": "\"Standard Identities (e.g."

            },

            {

                "topic": "Quantitative Aptitude",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Complementary Angles"

            },

            {

                "topic": "Quantitative Aptitude",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Heights and Distances (simple problems)"

            },

            {

                "topic": "Quantitative Aptitude",

                "status": "Graphs",

                "category": "SSC CGL",

                "subtopic": "\"Data Interpretation (Tables"

            },

            {

                "topic": "English Comprehension",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Synonyms"

            },

            {

                "topic": "English Comprehension",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Antonyms"

            },

            {

                "topic": "English Comprehension",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Homonyms"

            },

            {

                "topic": "English Comprehension",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "One Word Substitution"

            },

            {

                "topic": "English Comprehension",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Idioms & Phrases"

            },

            {

                "topic": "English Comprehension",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Spotting Errors"

            },

            {

                "topic": "English Comprehension",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Sentence Structure"

            },

            {

                "topic": "English Comprehension",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Sentence Correction/Improvement"

            },

            {

                "topic": "English Comprehension",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Fill in the Blanks"

            },

            {

                "topic": "English Comprehension",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Active/Passive Voice of Verbs"

            },

            {

                "topic": "English Comprehension",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Conversion into Direct/Indirect Narration"

            },

            {

                "topic": "English Comprehension",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Reading Comprehension Passages"

            },

            {

                "topic": "English Comprehension",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Cloze Test"

            },

            {

                "topic": "English Comprehension",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Shuffling of Sentence parts"

            },

            {

                "topic": "English Comprehension",

                "status": "pending",

                "category": "SSC CGL",

                "subtopic": "Shuffling of Sentences in a passage (Para Jumbles)"

            }

        ],

        "totalTopics": 1,

        "completedTopics": 3,

        "totalSubtopics": 85,

        "completedSubtopics": 3,

        "isCompleted": false,

        "completedAt": null,

        "createdAt": "2025-08-27T06:46:55.061Z",

        "updatedAt": "2025-08-27T16:32:59.335Z",

        "categories": [

            {

                "id": "f1bd5651-1232-4bfb-ab17-f9f11964d430",

                "goalId": "ff4c3295-0670-418c-b241-55242c97fc63",

                "name": "SSC CGL",

                "description": "Category for SSC CGL",

                "totalTopics": 4,

                "completedTopics": 3,

                "createdAt": "2025-08-27T06:46:55.069Z",

                "totalSubtopics": 85,

                "completedSubtopics": 3

            }

        ]

    }

] The code for goal tracker import { useState, useMemo } from "react";

import { useMutation, useQuery } from "@tanstack/react-query";

import { queryClient } from "@/lib/queryClient";

import { useAuth } from "@/hooks/useAuth";

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

import { Button } from "@/components/ui/button";

import { Input } from "@/components/ui/input";

import { Label } from "@/components/ui/label";

import { useToast } from "@/hooks/use-toast";

import { Progress } from "@/components/ui/progress";

import { Badge } from "@/components/ui/badge";

import {

  Dialog,

  DialogContent,

  DialogHeader,

  DialogTitle,

  DialogTrigger,

} from "@/components/ui/dialog";

import {

  Select,

  SelectContent,

  SelectItem,

  SelectTrigger,

  SelectValue,

} from "@/components/ui/select";

import { Target, TrendingUp, Upload, ArrowLeft } from "lucide-react";

import Sidebar from "@/components/sidebar";

import ReactApexChart from 'react-apexcharts';

import { ApexOptions } from 'apexcharts';

import { navigate } from "wouter/use-browser-location";



// Get URL search params

const getURLParams = () => {

  const urlParams = new URLSearchParams(window.location.search);

  return {

    type: urlParams.get("type") || null,

  };

};



// Interfaces for the Goal tracking system

interface GoalCategory {

  id: string;

  goalId: string;

  name: string;

  description?: string;

  totalTopics: number;

  completedTopics: number;

  totalSubtopics: number;

  completedSubtopics: number;

  completedSubtopicTimestamps?: string[];

  createdAt: string;

}



interface Goal {

  id: string;

  name: string;

  description?: string;

  totalTopics: number;

  completedTopics: number;

  totalSubtopics: number;

  completedSubtopics: number;

  createdAt: string;

  updatedAt: string;

  categories?: GoalCategory[];

}



interface ProgressDataPoint {

  date: string;

  [key: string]: number | string;

}



const GOAL_COLOR = "#3b82f6";



// API functions for goals

const fetchUserGoals = async () => {

  const response = await fetch("/api/goals", {

    credentials: "include",

  });

  if (!response.ok) {

    throw new Error("Failed to fetch goals");

  }

  return response.json();

};



const fetchGoalCategories = async (goalId: string) => {

  const response = await fetch(`/api/goals/${goalId}/categories`, {

    credentials: "include",

  });

  if (!response.ok) {

    throw new Error("Failed to fetch goal categories");

  }

  return response.json();

};



const createGoalFromCSVApi = async (data: {

  goalName: string;

  csvData: any[];

}) => {

  const response = await fetch("/api/goals/from-csv", {

    method: "POST",

    headers: { "Content-Type": "application/json" },

    credentials: "include",

    body: JSON.stringify(data),

  });

  if (!response.ok) {

    const error = await response.json();

    throw new Error(error.message || "Failed to create goal from CSV");

  }

  return response.json();

};



export default function GoalTracker() {

  const { user } = useAuth();

  const { toast } = useToast();

  const currentYear = new Date().getFullYear();



  // Get URL parameters

  const { type: selectedGoalType } = getURLParams();



  // Fetch user goals

  const {

    data: goals = [],

    isLoading: goalsLoading,

    error: goalsError,

  } = useQuery({

    queryKey: ["goals"],

    queryFn: fetchUserGoals,

    enabled: !!user,

  });



  // Group goals by type/category for card display

  const goalsByType = useMemo(() => {

    const grouped: { [key: string]: Goal[] } = {};

    goals.forEach((goal: Goal) => {

      // Extract type from goal name (TNPSC, SSC, etc.)

      const goalName = goal.name.toLowerCase();

      let type = "Other";



      if (goalName.includes("tnpsc")) {

        type = "TNPSC";

      } else if (goalName.includes("ssc")) {

        type = "SSC";

      } else if (goalName.includes("upsc")) {

        type = "UPSC";

      } else if (goalName.includes("bank")) {

        type = "Banking";

      }



      if (!grouped[type]) {

        grouped[type] = [];

      }

      grouped[type].push(goal);

    });

    return grouped;

  }, [goals]);



  // Filter goals based on selected type

  const filteredGoals = useMemo(() => {

    if (!selectedGoalType) return goals;



    return goals.filter((goal: Goal) => {

      const goalName = goal.name.toLowerCase();

      const type = selectedGoalType.toLowerCase();



      if (type === "tnpsc") return goalName.includes("tnpsc");

      if (type === "ssc") return goalName.includes("ssc");

      if (type === "upsc") return goalName.includes("upsc");

      if (type === "banking") return goalName.includes("bank");

      return type === "other";

    });

  }, [goals, selectedGoalType]);



  // Get all categories from filtered goals for detailed view

  const allCategories = useMemo(() => {

    const categories: GoalCategory[] = [];

    filteredGoals.forEach((goal: Goal) => {

      if (goal.categories) {

        goal.categories.forEach((category) => {

          categories.push({

            ...category,

            goalName: goal.name,

            goalId: goal.id,

          } as GoalCategory & { goalName: string });

        });

      }

    });

    return categories;

  }, [filteredGoals]);



  // State for filters

  const [selectedYear, setSelectedYear] = useState<number>(currentYear);

  const [selectedMonth, setSelectedMonth] = useState<string>("all");



  // CSV upload state

  const [csvFile, setCsvFile] = useState<File | null>(null);

  const [goalName, setGoalName] = useState("");

  const [isUploading, setIsUploading] = useState(false);



  // CSV upload mutation

  const csvUploadMutation = useMutation({

    mutationFn: createGoalFromCSVApi,

    onSuccess: () => {

      toast({ title: "Success!", description: "Goal created from CSV" });

      queryClient.invalidateQueries({ queryKey: ["goals"] });

      setCsvFile(null);

      setGoalName("");

    },

    onError: (error: any) => {

      toast({

        title: "Upload failed",

        description: error.message,

        variant: "destructive",

      });

    },

  });



  const parseCSV = (file: File): Promise<any[]> => {

    return new Promise((resolve, reject) => {

      const reader = new FileReader();

      reader.onload = (e) => {

        try {

          const text = e.target?.result as string;

          const lines = text.split("\n").filter((line) => line.trim());

          if (lines.length < 2) {

            reject(

              new Error("CSV must have a header and at least one data row")

            );

            return;

          }

          const headers = lines[0]

            .split(",")

            .map((h) => h.trim().toLowerCase());

          const data = lines.slice(1).map((line) => {

            const values = line.split(",").map((v) => v.trim());

            const row: any = {};

            headers.forEach((header, index) => {

              row[header] = values[index] || "";

            });

            return row;

          });

          resolve(data);

        } catch (error) {

          reject(new Error("Failed to parse CSV file"));

        }

      };

      reader.onerror = () => reject(new Error("Failed to read file"));

      reader.readAsText(file);

    });

  };



  const handleCSVUpload = async () => {

    if (!csvFile || !goalName.trim()) {

      toast({

        title: "Missing information",

        description: "Please select a file and enter a goal name",

        variant: "destructive",

      });

      return;

    }

    setIsUploading(true);

    try {

      const csvData = await parseCSV(csvFile);

      await csvUploadMutation.mutateAsync({

        goalName: goalName.trim(),

        csvData,

      });

    } catch (error: any) {

      toast({

        title: "Upload failed",

        description: error.message,

        variant: "destructive",

      });

    } finally {

      setIsUploading(false);

    }

  };



  const months = [

    { value: "all", label: "All Months" },

    { value: "01", label: "January" },

    { value: "02", label: "February" },

    { value: "03", label: "March" },

    { value: "04", label: "April" },

    { value: "05", label: "May" },

    { value: "06", label: "June" },

    { value: "07", label: "July" },

    { value: "08", label: "August" },

    { value: "09", label: "September" },

    { value: "10", label: "October" },

    { value: "11", label: "November" },

    { value: "12", label: "December" },

  ];



// ApexChart Component for Category Progress

const ApexProgressChart: React.FC<{ categories: GoalCategory[] }> = ({ categories }) => {

   

    const chartState = useMemo(() => {

        // Check if we have real completion timestamp data

        const hasRealData = categories.some(category =>

            category.completedSubtopicTimestamps && category.completedSubtopicTimestamps.length > 0

        );

       

        if (!hasRealData) {

            // Generate sample data based on current completion status for demo

            const series = categories.map(category => ({

                name: category.name,

                data: [] as [number, number][],

            }));

           

            const today = new Date();

            const startDate = new Date(today);

            startDate.setDate(startDate.getDate() - 14); // 14 days ago

           

            // Generate realistic progress over the last 14 days

            for (let i = 0; i <= 14; i++) {

                const currentDate = new Date(startDate);

                currentDate.setDate(startDate.getDate() + i);

                const timestamp = currentDate.getTime();

               

                categories.forEach((category, categoryIndex) => {

                    const completedSubtopics = category.completedSubtopics || 0;

                    let progress = 0;

                   

                    // Show gradual progress buildup over time

                    if (completedSubtopics > 0) {

                        // Show more recent progress

                        if (i >= 10) {

                            progress = Math.min(completedSubtopics, Math.floor(completedSubtopics * ((i - 9) / 5)));

                        }

                    }

                   

                    const seriesIndex = series.findIndex(s => s.name === category.name);

                    series[seriesIndex].data.push([timestamp, Math.max(0, progress)]);

                });

            }

           

            return { series };

        }



        // Use real completion timestamp data

        const validCategories = categories.filter(cat => cat && cat.name);

        const series = validCategories.map(category => ({

            name: category.name,

            data: [] as [number, number][],

        }));



        const allTimestamps = validCategories.flatMap(cat =>

            (cat.completedSubtopicTimestamps || []).map(ts => ({

                catName: cat.name,

                timestamp: new Date(ts),

            }))

        ).sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());



        const cumulativeCounts: { [key: string]: number } = {};

        validCategories.forEach(cat => (cumulativeCounts[cat.name] = 0));

       

        // Add a starting point for each series at its creation date

        validCategories.forEach(cat => {

            const seriesIndex = series.findIndex(s => s.name === cat.name);

            if (seriesIndex > -1 && cat.createdAt) {

                const startDate = new Date(cat.createdAt).getTime();

                series[seriesIndex].data.push([startDate, 0]);

            }

        });



        // Build the incremental, cumulative data points

        allTimestamps.forEach(({ catName, timestamp }) => {

            cumulativeCounts[catName]++;

            const seriesIndex = series.findIndex(s => s.name === catName);

            if (seriesIndex > -1) {

                series[seriesIndex].data.push([timestamp.getTime(), cumulativeCounts[catName]]);

            }

        });

       

        // Ensure all lines extend to the final timestamp for a clean graph

        if (allTimestamps.length > 0) {

            const lastTimestamp = allTimestamps[allTimestamps.length - 1].timestamp.getTime();

            series.forEach(s => {

                if (s.data.length > 0 && s.data[s.data.length - 1][0] < lastTimestamp) {

                    s.data.push([lastTimestamp, s.data[s.data.length - 1][1]]);

                }

            });

        }



        return { series };

    }, [categories]);

   

    // Options object adapted from your template

    const options: ApexOptions = {

        chart: {

            type: 'area',

            stacked: false,

            height: 350,

            zoom: { type: 'x', enabled: true, autoScaleYaxis: true },

            toolbar: { autoSelected: 'zoom' },

        },

        dataLabels: { enabled: false },

        markers: { size: 0 },

        title: {

            text: 'Category Progress Over Time',

            align: 'left'

        },

        fill: {

            type: 'gradient',

            gradient: {

                shadeIntensity: 1,

                inverseColors: false,

                opacityFrom: 0.5,

                opacityTo: 0.1,

                stops: [0, 90, 100]

            },

        },

        yaxis: {

            title: { text: 'Subtopics Completed' },

            labels: { formatter: (val) => val.toFixed(0) },

        },

        xaxis: { type: 'datetime' },

        tooltip: {

            shared: false,

            y: { formatter: (val) => val.toFixed(0) }

        },

        stroke: { curve: 'stepline' } // Use 'stepline' to show incremental progress accurately

    };



    return (

        <div>

            <div id="chart">

                <ReactApexChart options={options} series={chartState.series} type="area" height={350} />

            </div>

        </div>

    );

};



// ApexChart Component for Goal Type Bar Chart

const ApexGoalTypeBarChart: React.FC<{ goalsByType: { [key: string]: Goal[] } }> = ({ goalsByType }) => {

    const chartData = useMemo(() => {

        const data = Object.entries(goalsByType).map(([type, typeGoals]) => {

            const totalSubtopics = typeGoals.reduce((sum, goal) => sum + (goal.totalSubtopics || 0), 0);

            const completedSubtopics = typeGoals.reduce((sum, goal) => sum + (goal.completedSubtopics || 0), 0);

           

            return {

                x: type,

                y: totalSubtopics > 0 ? Math.round((completedSubtopics / totalSubtopics) * 100) : 0,

                completed: completedSubtopics,

                total: totalSubtopics

            };

        });

       

        return data;

    }, [goalsByType]);



    const options: ApexOptions = {

        chart: {

            type: 'bar',

            height: 300,

            toolbar: { show: false }

        },

        plotOptions: {

            bar: {

                borderRadius: 4,

                horizontal: false,

                columnWidth: '60%'

            }

        },

        dataLabels: { enabled: false },

        stroke: { show: true, width: 2, colors: ['transparent'] },

        xaxis: {

            categories: chartData.map(item => item.x),

            title: { text: 'Goal Types' }

        },

        yaxis: {

            title: { text: 'Progress Percentage' },

            max: 100,

            min: 0

        },

        fill: { opacity: 1 },

        tooltip: {

            custom: function({ series, seriesIndex, dataPointIndex }) {

                const data = chartData[dataPointIndex];

                return `<div style="padding: 10px;">

                    <strong>${data.x}</strong><br/>

                    Progress: ${data.y}%<br/>

                    Completed: ${data.completed}/${data.total}

                </div>`;

            }

        },

        colors: ['#3b82f6']

    };



    const series = [{

        name: 'Progress %',

        data: chartData.map(item => item.y)

    }];



    return <ReactApexChart options={options} series={series} type="bar" height={300} />;

};



// ApexChart Component for Goal Type Pie Chart

const ApexGoalTypePieChart: React.FC<{ goalsByType: { [key: string]: Goal[] } }> = ({ goalsByType }) => {

    const chartData = useMemo(() => {

        const data = Object.entries(goalsByType).map(([type, typeGoals]) => {

            const completedSubtopics = typeGoals.reduce((sum, goal) => sum + (goal.completedSubtopics || 0), 0);

            return {

                name: type,

                value: completedSubtopics

            };

        });

       

        return data.filter(item => item.value > 0); // Only show types with actual progress

    }, [goalsByType]);



    const options: ApexOptions = {

        chart: {

            type: 'pie',

            height: 300

        },

        labels: chartData.map(item => item.name),

        colors: ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#06b6d4'],

        tooltip: {

            custom: function({ series, seriesIndex }) {

                const totalForType = Object.values(goalsByType)[seriesIndex]?.reduce((sum, goal) => sum + (goal.totalSubtopics || 0), 0) || 0;

                const completed = series[seriesIndex];

                const percentage = totalForType > 0 ? Math.round((completed / totalForType) * 100) : 0;

               

                return `<div style="padding: 10px;">

                    <strong>${chartData[seriesIndex]?.name}</strong><br/>

                    Completed: ${completed}/${totalForType}<br/>

                    Progress: ${percentage}%

                </div>`;

            }

        },

        legend: {

            position: 'bottom'

        },

        responsive: [{

            breakpoint: 480,

            options: {

                chart: { width: 300 },

                legend: { position: 'bottom' }

            }

        }]

    };



    const series = chartData.map(item => item.value);



    if (series.length === 0) {

        return <div className="h-[300px] flex items-center justify-center text-gray-500">No completed subtopics yet</div>;

    }



    return <ReactApexChart options={options} series={series} type="pie" height={300} />;

};



  const cumulativeProgressData = useMemo(() => {

    if (allCategories.length === 0) return [];



    // Create simple progress data for the overall goal

    const dataPoints: ProgressDataPoint[] = [];

    const startDate = new Date(

      selectedYear,

      selectedMonth === "all" ? 0 : parseInt(selectedMonth) - 1,

      1

    );

    const endDate =

      selectedMonth === "all"

        ? new Date(selectedYear, 11, 31)

        : new Date(selectedYear, parseInt(selectedMonth), 0);



    const current = new Date(startDate);

    let cumulativeCount = 0;



    while (current <= endDate) {

      const dateStr = current.toLocaleDateString("en-US", {

        month: "short",

        day: "2-digit",

      });



      // Simulate gradual progress over time for all categories combined

      const totalCompleted = allCategories.reduce(

        (sum, cat) => sum + (cat.completedSubtopics || 0),

        0

      );

      const daysSinceStart = Math.floor(

        (current.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24)

      );

      cumulativeCount = Math.min(

        totalCompleted,

        Math.floor((daysSinceStart / 30) * totalCompleted)

      );



      dataPoints.push({ date: dateStr, Progress: cumulativeCount });

      current.setDate(current.getDate() + 1);

    }

    return dataPoints;

  }, [allCategories, selectedYear, selectedMonth]);



  const getStatusColor = (

    completedSubtopics: number,

    totalSubtopics: number

  ) => {

    if (completedSubtopics === totalSubtopics && totalSubtopics > 0) {

      return "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100";

    } else if (completedSubtopics > 0) {

      return "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-100";

    } else {

      return "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-100";

    }

  };



  const getStatusText = (

    completedSubtopics: number,

    totalSubtopics: number

  ) => {

    if (completedSubtopics === totalSubtopics && totalSubtopics > 0) {

      return "Completed";

    } else if (completedSubtopics > 0) {

      return "In Progress";

    } else {

      return "Not Started";

    }

  };



  // Show loading state if user is not loaded yet

  if (!user) {

    return (

      <div className="flex h-screen bg-gray-50/50 dark:bg-gray-900/50">

        <Sidebar />

        <div className="flex-1 overflow-auto">

          <div className="container mx-auto p-6 space-y-6">

            <div className="animate-pulse space-y-4">

              <div className="h-8 bg-gray-200 rounded w-1/3"></div>

              <div className="h-64 bg-gray-200 rounded"></div>

            </div>

          </div>

        </div>

      </div>

    );

  }



  return (

    <div className="flex h-screen bg-gray-50/50 dark:bg-gray-900/50">

      <Sidebar />

      <div className="flex-1 overflow-auto">

        <header className="sticky top-0 z-30 bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-4 sm:px-6 lg:px-8 py-4">

          <div className="flex justify-between items-center">

            <div className="flex items-center space-x-4">

              <div>

                <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">

                  {selectedGoalType

                    ? `${selectedGoalType} Categories`

                    : "All Categories"}

                </h1>

              </div>

            </div>

            <div className="flex items-center space-x-2 sm:space-x-4">

              <Button

                variant="ghost"

                size="sm"

                onClick={() => navigate("/goals")}

                className="flex items-center gap-2"

                data-testid="button-back-to-goals"

              >

                <ArrowLeft className="h-4 w-4" />

                Back to Goals

              </Button>

            </div>

          </div>

        </header>

        <div className="container mx-auto p-6 space-y-6">

          {/* Loading state */}

          {goalsLoading && (

            <Card>

              <CardContent className="p-6">

                <div className="animate-pulse space-y-4">

                  <div className="h-6 bg-gray-200 rounded w-1/3"></div>

                  <div className="h-4 bg-gray-200 rounded w-2/3"></div>

                  <div className="h-4 bg-gray-200 rounded w-1/2"></div>

                </div>

              </CardContent>

            </Card>

          )}



          {/* Error state */}

          {goalsError && (

            <Card>

              <CardContent className="p-6">

                <div className="text-red-600 dark:text-red-400">

                  Error loading goals: {(goalsError as Error).message}

                </div>

              </CardContent>

            </Card>

          )}



          {/* No goals state */}

          {!goalsLoading && !goalsError && goals.length === 0 && (

            <Card>

              <CardContent className="p-6 text-center">

                <Target className="h-12 w-12 text-gray-400 mx-auto mb-4" />

                <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-2">

                  No Goals Yet

                </h3>

                <p className="text-gray-600 dark:text-gray-400 mb-4">

                  Create your first goal by uploading a CSV file or manually

                  adding one.

                </p>

              </CardContent>

            </Card>

          )}



          {/* Individual Categories for Detailed View */}

          {allCategories.length > 0 && (

            <div className="space-y-6">

              <h2 className="text-2xl font-semibold text-gray-900 dark:text-gray-100">

                All Categories

              </h2>

              <div className="space-y-4">

                {allCategories.map((category) => (

                  <Card

                    key={category.id}

                    className="cursor-pointer transition-all hover:shadow-lg"

                    onClick={() =>

                      navigate(

                        `/goal-tracker/${category.goalId}/category/${category.id}`

                      )

                    }

                  >

                    <CardHeader>

                      <CardTitle className="flex items-center gap-2">

                        <Target className="h-5 w-5 text-blue-500" />

                        {category.name}

                        <Badge variant="outline" className="ml-auto">

                          {(category as any).goalName}

                        </Badge>

                      </CardTitle>

                    </CardHeader>

                    <CardContent>

                      <div className="space-y-3">

                        <div>

                          <div className="flex justify-between items-center mb-2">

                            <span className="text-sm font-medium">

                              Overall Progress

                            </span>

                            <span className="text-sm text-gray-600">

                              {category.completedSubtopics || 0} /{" "}

                              {category.totalSubtopics || 0} Subtopics

                            </span>

                          </div>

                          <Progress

                            value={

                              category.totalSubtopics > 0

                                ? ((category.completedSubtopics || 0) /

                                    category.totalSubtopics) *

                                  100

                                : 0

                            }

                            className="h-2"

                          />

                        </div>

                        <div className="flex justify-between items-center text-sm">

                          <span className="text-gray-600">

                            {category.totalSubtopics > 0

                              ? Math.round(

                                  ((category.completedSubtopics || 0) /

                                    category.totalSubtopics) *

                                    100

                                )

                              : 0}

                            % Complete

                          </span>

                          <Badge

                            className={getStatusColor(

                              category.completedSubtopics || 0,

                              category.totalSubtopics || 0

                            )}

                          >

                            {getStatusText(

                              category.completedSubtopics || 0,

                              category.totalSubtopics || 0

                            )}

                          </Badge>

                        </div>

                      </div>

                    </CardContent>

                  </Card>

                ))}

              </div>

            </div>

          )}



          {/* Goal Type Performance Charts */}

          {Object.keys(goalsByType).length > 0 && (

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">

              {/* Progress by Goal Type Bar Chart */}

              <Card>

                <CardHeader>

                  <CardTitle className="flex items-center gap-2">

                    <TrendingUp className="h-5 w-5 text-blue-500" />

                    Progress by Goal Type

                  </CardTitle>

                </CardHeader>

                <CardContent>

                  <ApexGoalTypeBarChart goalsByType={goalsByType} />

                </CardContent>

              </Card>



              {/* Overall Progress Pie Chart */}

              <Card>

                <CardHeader>

                  <CardTitle className="flex items-center gap-2">

                    <TrendingUp className="h-5 w-5 text-green-500" />

                    Overall Progress Distribution

                  </CardTitle>

                </CardHeader>

                <CardContent>

                  <ApexGoalTypePieChart goalsByType={goalsByType} />

                </CardContent>

              </Card>

            </div>

          )}



          {/* Category Performance Line Chart */}

          {allCategories.length > 0 && (

            <Card>

              <CardHeader>

                <div className="flex justify-between items-center">

                  <CardTitle className="flex items-center gap-2">

                    <TrendingUp className="h-5 w-5 text-purple-500" />

                    Category Progress Trend

                  </CardTitle>

                  <div className="flex gap-4 items-center">

                    <div className="flex items-center gap-2">

                      <Label htmlFor="year-select">Year:</Label>

                      <Select

                        value={selectedYear.toString()}

                        onValueChange={(v) => setSelectedYear(parseInt(v))}

                      >

                        <SelectTrigger className="w-32" id="year-select">

                          <SelectValue />

                        </SelectTrigger>

                        <SelectContent>

                          {Array.from(

                            { length: 5 },

                            (_, i) => currentYear - i

                          ).map((year) => (

                            <SelectItem key={year} value={year.toString()}>

                              {year}

                            </SelectItem>

                          ))}

                        </SelectContent>

                      </Select>

                    </div>

                    <div className="flex items-center gap-2">

                      <Label htmlFor="month-select">Month:</Label>

                      <Select

                        value={selectedMonth}

                        onValueChange={setSelectedMonth}

                      >

                        <SelectTrigger className="w-40" id="month-select">

                          <SelectValue />

                        </SelectTrigger>

                        <SelectContent>

                          {months.map((month) => (

                            <SelectItem key={month.value} value={month.value}>

                              {month.label}

                            </SelectItem>

                          ))}

                        </SelectContent>

                      </Select>

                    </div>

                  </div>

                </div>

              </CardHeader>

              <CardContent>

                {/* Render the new ApexChart component instead of the Recharts one */}

                <ApexProgressChart categories={allCategories} />

              </CardContent>

            </Card>

          )}

        </div>

      </div>

    </div>

  );

}

goal start,.. import { useState, useMemo } from "react";

import { useQuery } from "@tanstack/react-query";

import { useAuth } from "@/hooks/useAuth";

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

import { Button } from "@/components/ui/button";

import { Input } from "@/components/ui/input";

import { Label } from "@/components/ui/label";

import { useToast } from "@/hooks/use-toast";

import { Progress } from "@/components/ui/progress";

import { Badge } from "@/components/ui/badge";

import {

  Dialog,

  DialogContent,

  DialogHeader,

  DialogTitle,

  DialogTrigger,

} from "@/components/ui/dialog";

import { Target, Upload, BookOpen, TrendingUp } from "lucide-react";

import Sidebar from "@/components/sidebar";

import GoalHeatMap from "@/components/goal-heat-map";

import ReactApexChart from 'react-apexcharts';

import { ApexOptions } from 'apexcharts';

import { navigate } from "wouter/use-browser-location";



// Interfaces for the Goal tracking system

interface GoalCategory {

  id: string;

  goalId: string;

  name: string;

  description?: string;

  totalTopics: number;

  completedTopics: number;

  totalSubtopics: number;

  completedSubtopics: number;

  createdAt: string;

}



interface Goal {

  id: string;

  name: string;

  description?: string;

  totalTopics: number;

  completedTopics: number;

  totalSubtopics: number;

  completedSubtopics: number;

  createdAt: string;

  updatedAt: string;

  categories?: GoalCategory[];

}



// ApexChart Component for Goal Type Bar Chart

const ApexGoalTypeBarChart: React.FC<{ goalsByType: { [key: string]: Goal[] } }> = ({ goalsByType }) => {

    const chartData = useMemo(() => {

        const data = Object.entries(goalsByType).map(([type, typeGoals]) => {

            const totalSubtopics = typeGoals.reduce((sum, goal) => sum + (goal.totalSubtopics || 0), 0);

            const completedSubtopics = typeGoals.reduce((sum, goal) => sum + (goal.completedSubtopics || 0), 0);

           

            return {

                x: type,

                y: totalSubtopics > 0 ? Math.round((completedSubtopics / totalSubtopics) * 100) : 0,

                completed: completedSubtopics,

                total: totalSubtopics

            };

        });

       

        return data;

    }, [goalsByType]);



    const options: ApexOptions = {

        chart: {

            type: 'bar',

            height: 300,

            toolbar: { show: false }

        },

        plotOptions: {

            bar: {

                borderRadius: 4,

                horizontal: false,

                columnWidth: '60%'

            }

        },

        dataLabels: { enabled: false },

        stroke: { show: true, width: 2, colors: ['transparent'] },

        xaxis: {

            categories: chartData.map(item => item.x),

            title: { text: 'Goal Types' }

        },

        yaxis: {

            title: { text: 'Progress Percentage' },

            max: 100,

            min: 0

        },

        fill: { opacity: 1 },

        tooltip: {

            custom: function({ series, seriesIndex, dataPointIndex }) {

                const data = chartData[dataPointIndex];

                return `<div style="padding: 10px;">

                    <strong>${data.x}</strong><br/>

                    Progress: ${data.y}%<br/>

                    Completed: ${data.completed}/${data.total}

                </div>`;

            }

        },

        colors: ['#3b82f6']

    };



    const series = [{

        name: 'Progress %',

        data: chartData.map(item => item.y)

    }];



    return <ReactApexChart options={options} series={series} type="bar" height={300} />;

};



// ApexChart Component for Goal Type Pie Chart

const ApexGoalTypePieChart: React.FC<{ goalsByType: { [key: string]: Goal[] } }> = ({ goalsByType }) => {

    const chartData = useMemo(() => {

        const data = Object.entries(goalsByType).map(([type, typeGoals]) => {

            const completedSubtopics = typeGoals.reduce((sum, goal) => sum + (goal.completedSubtopics || 0), 0);

            return {

                name: type,

                value: completedSubtopics

            };

        });

       

        return data.filter(item => item.value > 0); // Only show types with actual progress

    }, [goalsByType]);



    const options: ApexOptions = {

        chart: {

            type: 'pie',

            height: 300

        },

        labels: chartData.map(item => item.name),

        colors: ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#06b6d4'],

        tooltip: {

            custom: function({ series, seriesIndex }) {

                const totalForType = Object.values(goalsByType)[seriesIndex]?.reduce((sum, goal) => sum + (goal.totalSubtopics || 0), 0) || 0;

                const completed = series[seriesIndex];

                const percentage = totalForType > 0 ? Math.round((completed / totalForType) * 100) : 0;

               

                return `<div style="padding: 10px;">

                    <strong>${chartData[seriesIndex]?.name}</strong><br/>

                    Completed: ${completed}/${totalForType}<br/>

                    Progress: ${percentage}%

                </div>`;

            }

        },

        legend: {

            position: 'bottom'

        },

        responsive: [{

            breakpoint: 480,

            options: {

                chart: { width: 300 },

                legend: { position: 'bottom' }

            }

        }]

    };



    const series = chartData.map(item => item.value);



    if (series.length === 0) {

        return <div className="h-[300px] flex items-center justify-center text-gray-500">No completed subtopics yet</div>;

    }



    return <ReactApexChart options={options} series={series} type="pie" height={300} />;

};



// API functions for goals

const fetchUserGoals = async () => {

  const response = await fetch("/api/goals", {

    credentials: "include",

  });

  if (!response.ok) {

    throw new Error("Failed to fetch goals");

  }

  return response.json();

};



const createGoalFromCSVApi = async (data: {

  goalName: string;

  csvData: any[];

}) => {

  const response = await fetch("/api/goals/from-csv", {

    method: "POST",

    headers: { "Content-Type": "application/json" },

    credentials: "include",

    body: JSON.stringify(data),

  });

  if (!response.ok) {

    const error = await response.json();

    throw new Error(error.message || "Failed to create goal from CSV");

  }

  return response.json();

};



export default function GoalStart() {

  const { user } = useAuth();

  const { toast } = useToast();



  // Fetch user goals

  const {

    data: goals = [],

    isLoading: goalsLoading,

    error: goalsError,

  } = useQuery({

    queryKey: ["goals"],

    queryFn: fetchUserGoals,

    enabled: !!user,

  });



  // Group goals by type/category for card display

  const goalsByType = useMemo(() => {

    const grouped: { [key: string]: Goal[] } = {};

    goals.forEach((goal: Goal) => {

      // Extract type from goal name (TNPSC, SSC, etc.)

      const goalName = goal.name.toLowerCase();

      let type = "Other";



      if (goalName.includes("tnpsc")) {

        type = "TNPSC";

      } else if (goalName.includes("ssc")) {

        type = "SSC";

      } else if (goalName.includes("upsc")) {

        type = "UPSC";

      } else if (goalName.includes("bank")) {

        type = "Banking";

      }



      if (!grouped[type]) {

        grouped[type] = [];

      }

      grouped[type].push(goal);

    });

    return grouped;

  }, [goals]);



  // CSV upload state

  const [csvFile, setCsvFile] = useState<File | null>(null);

  const [goalName, setGoalName] = useState("");

  const [isUploading, setIsUploading] = useState(false);



  const parseCSV = (file: File): Promise<any[]> => {

    return new Promise((resolve, reject) => {

      const reader = new FileReader();

      reader.onload = (e) => {

        try {

          const text = e.target?.result as string;

          const lines = text.split("\n").filter((line) => line.trim());

          if (lines.length < 2) {

            reject(

              new Error("CSV must have a header and at least one data row")

            );

            return;

          }

          const headers = lines[0]

            .split(",")

            .map((h) => h.trim().toLowerCase());

          const data = lines.slice(1).map((line) => {

            const values = line.split(",").map((v) => v.trim());

            const row: any = {};

            headers.forEach((header, index) => {

              row[header] = values[index] || "";

            });

            return row;

          });

          resolve(data);

        } catch (error) {

          reject(new Error("Failed to parse CSV file"));

        }

      };

      reader.onerror = () => reject(new Error("Failed to read file"));

      reader.readAsText(file);

    });

  };



  const handleCSVUpload = async () => {

    if (!csvFile || !goalName.trim()) {

      toast({

        title: "Missing information",

        description: "Please select a file and enter a goal name",

        variant: "destructive",

      });

      return;

    }

    setIsUploading(true);

    try {

      const csvData = await parseCSV(csvFile);

      const response = await createGoalFromCSVApi({

        goalName: goalName.trim(),

        csvData,

      });

      toast({ title: "Success!", description: "Goal created from CSV" });

      setCsvFile(null);

      setGoalName("");

      // Refresh the goals data

      window.location.reload();

    } catch (error: any) {

      toast({

        title: "Upload failed",

        description: error.message,

        variant: "destructive",

      });

    } finally {

      setIsUploading(false);

    }

  };



  const getStatusColor = (

    completedSubtopics: number,

    totalSubtopics: number

  ) => {

    if (completedSubtopics === totalSubtopics && totalSubtopics > 0) {

      return "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100";

    } else if (completedSubtopics > 0) {

      return "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-100";

    } else {

      return "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-100";

    }

  };



  const getStatusText = (

    completedSubtopics: number,

    totalSubtopics: number

  ) => {

    if (completedSubtopics === totalSubtopics && totalSubtopics > 0) {

      return "Completed";

    } else if (completedSubtopics > 0) {

      return "In Progress";

    } else {

      return "Not Started";

    }

  };



  const getTypeIcon = (type: string) => {

    switch (type.toLowerCase()) {

      case "tnpsc":

        return "🏛️";

      case "ssc":

        return "📊";

      case "upsc":

        return "🇮🇳";

      case "banking":

        return "🏦";

      default:

        return "📚";

    }

  };



  const getTypeDescription = (type: string) => {

    switch (type.toLowerCase()) {

      case "tnpsc":

        return "Tamil Nadu Public Service Commission";

      case "ssc":

        return "Staff Selection Commission";

      case "upsc":

        return "Union Public Service Commission";

      case "banking":

        return "Banking & Financial Services";

      default:

        return "General Studies & Preparation";

    }

  };



  // Show loading state if user is not loaded yet

  if (!user) {

    return (

      <div className="flex h-screen bg-gray-50/50 dark:bg-gray-900/50">

        <Sidebar />

        <div className="flex-1 overflow-auto">

          <div className="container mx-auto p-6 space-y-6">

            <div className="animate-pulse space-y-4">

              <div className="h-8 bg-gray-200 rounded w-1/3"></div>

              <div className="h-64 bg-gray-200 rounded"></div>

            </div>

          </div>

        </div>

      </div>

    );

  }



  return (

    <div className="flex h-screen bg-gray-50/50 dark:bg-gray-900/50">

      <Sidebar />

      <div className="flex-1 overflow-auto">

        <div className="container mx-auto p-6 space-y-8">

          {/* Header Section */}

          <div className="flex items-center justify-between">

            <div>

              <h1 className="text-4xl font-bold text-gray-900 dark:text-gray-100">

                Goal Tracker

              </h1>

              <p className="text-gray-600 dark:text-gray-400 mt-2">

                Start your learning journey with CSV-based goal tracking

              </p>

            </div>



            {/* CSV Upload Dialog */}

            <Dialog>

              <DialogTrigger asChild>

                <Button

                  data-testid="button-upload-csv"

                  className="bg-blue-600 hover:bg-blue-700"

                >

                  <Upload className="h-4 w-4 mr-2" /> Upload CSV

                </Button>

              </DialogTrigger>

              <DialogContent>

                <DialogHeader>

                  <DialogTitle>Upload Goal from CSV</DialogTitle>

                </DialogHeader>

                <div className="space-y-4">

                  <div>

                    <Label htmlFor="goalName">Goal Name</Label>

                    <Input

                      id="goalName"

                      data-testid="input-goal-name"

                      placeholder="e.g., TNPSC Group 2, SSC CGL Preparation"

                      value={goalName}

                      onChange={(e) => setGoalName(e.target.value)}

                    />

                  </div>

                  <div>

                    <Label htmlFor="csvFile">CSV File</Label>

                    <Input

                      id="csvFile"

                      data-testid="input-csv-file"

                      type="file"

                      accept=".csv"

                      onChange={(e) => setCsvFile(e.target.files?.[0] || null)}

                    />

                    <p className="text-sm text-gray-600 mt-2">

                      CSV should contain columns: Category, Topics, Sub-topics,

                      Status.

                    </p>

                  </div>

                  <Button

                    onClick={handleCSVUpload}

                    disabled={isUploading || !csvFile || !goalName.trim()}

                    className="w-full"

                    data-testid="button-create-goal"

                  >

                    {isUploading ? "Uploading..." : "Create Goal"}

                  </Button>

                </div>

              </DialogContent>

            </Dialog>

          </div>



          {/* Loading state */}

          {goalsLoading && (

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">

              {[1, 2, 3].map((i) => (

                <Card key={i}>

                  <CardContent className="p-6">

                    <div className="animate-pulse space-y-4">

                      <div className="h-6 bg-gray-200 rounded w-2/3"></div>

                      <div className="h-4 bg-gray-200 rounded w-1/2"></div>

                      <div className="h-20 bg-gray-200 rounded"></div>

                    </div>

                  </CardContent>

                </Card>

              ))}

            </div>

          )}



          {/* Error state */}

          {goalsError && (

            <Card>

              <CardContent className="p-6 text-center">

                <div className="text-red-600 dark:text-red-400">

                  Error loading goals: {(goalsError as Error).message}

                </div>

              </CardContent>

            </Card>

          )}



          {/* No goals state */}

          {!goalsLoading && !goalsError && goals.length === 0 && (

            <Card>

              <CardContent className="p-8 text-center">

                <div className="text-6xl mb-4">📚</div>

                <h3 className="text-2xl font-semibold text-gray-900 dark:text-gray-100 mb-2">

                  Start Your Learning Journey

                </h3>

                <p className="text-gray-600 dark:text-gray-400 mb-6">

                  Upload your first CSV file to begin tracking your preparation

                  goals. Support for TNPSC, SSC, UPSC, Banking, and other

                  competitive exams.

                </p>

                <div className="text-sm text-gray-500 mb-4">

                  CSV Format: Category, Topics, Sub-topics, Status

                </div>

              </CardContent>

            </Card>

          )}



          {/* Goal Type Cards Display */}

          {Object.keys(goalsByType).length > 0 && (

            <div className="space-y-8">

              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">

                {Object.entries(goalsByType).map(([type, typeGoals]) => {

                  const totalSubtopics = typeGoals.reduce(

                    (sum, goal) => sum + (goal.totalSubtopics || 0),

                    0

                  );

                  const completedSubtopics = typeGoals.reduce(

                    (sum, goal) => sum + (goal.completedSubtopics || 0),

                    0

                  );

                  const progressPercentage =

                    totalSubtopics > 0

                      ? (completedSubtopics / totalSubtopics) * 100

                      : 0;



                  return (

                    <Card

                      key={type}

                      className="cursor-pointer transition-all hover:shadow-lg hover:scale-105 border-l-4 border-l-blue-500"

                      onClick={() =>

                        navigate(

                          `/goal-tracker?type=${encodeURIComponent(type)}`

                        )

                      }

                      data-testid={`card-goal-type-${type.toLowerCase()}`}

                    >

                      <CardHeader className="pb-3">

                        <CardTitle className="flex items-center gap-3">

                          <div className="text-2xl">{getTypeIcon(type)}</div>

                          <div>

                            <div className="text-xl font-bold">{type}</div>

                            <div className="text-sm text-gray-600 font-normal">

                              {getTypeDescription(type)}

                            </div>

                          </div>

                        </CardTitle>

                      </CardHeader>

                      <CardContent className="pt-0">

                        <div className="space-y-4">

                          {/* Stats Summary */}

                          <div className="grid grid-cols-2 gap-4 text-sm">

                            <div className="text-center p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">

                              <div className="font-bold text-lg text-blue-600">

                                {typeGoals.length}

                              </div>

                              <div className="text-gray-600">

                                {typeGoals.length === 1 ? "Goal" : "Goals"}

                              </div>

                            </div>

                            <div className="text-center p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">

                              <div className="font-bold text-lg text-green-600">

                                {totalSubtopics}

                              </div>

                              <div className="text-gray-600">Subtopics</div>

                            </div>

                          </div>



                          {/* Progress Overview */}

                          <div>

                            <div className="flex justify-between items-center mb-2">

                              <span className="text-sm font-medium">

                                Overall Progress

                              </span>

                              <span className="text-sm text-gray-600">

                                {completedSubtopics} / {totalSubtopics}

                              </span>

                            </div>

                            <Progress

                              value={progressPercentage}

                              className="h-3"

                            />

                            <div className="flex justify-between items-center mt-2">

                              <span className="text-sm text-gray-600">

                                {Math.round(progressPercentage)}% Complete

                              </span>

                              <Badge

                                className={getStatusColor(

                                  completedSubtopics,

                                  totalSubtopics

                                )}

                              >

                                {getStatusText(

                                  completedSubtopics,

                                  totalSubtopics

                                )}

                              </Badge>

                            </div>

                          </div>



                          {/* Individual Goals Preview */}

                          <div className="space-y-2">

                            <span className="text-sm font-medium text-gray-700 dark:text-gray-300">

                              Goals:

                            </span>

                            {typeGoals.slice(0, 2).map((goal) => (

                              <div

                                key={goal.id}

                                className="p-2 bg-white dark:bg-gray-700 rounded-md border text-sm"

                                data-testid={`preview-goal-${goal.id}`}

                              >

                                <div className="flex justify-between items-center mb-1">

                                  <span className="font-medium truncate">

                                    {goal.name}

                                  </span>

                                  <span className="text-xs text-gray-500 ml-2">

                                    {goal.completedSubtopics || 0}/

                                    {goal.totalSubtopics || 0}

                                  </span>

                                </div>

                                <Progress

                                  value={

                                    goal.totalSubtopics > 0

                                      ? ((goal.completedSubtopics || 0) /

                                          goal.totalSubtopics) *

                                        100

                                      : 0

                                  }

                                  className="h-1"

                                />

                              </div>

                            ))}

                            {typeGoals.length > 2 && (

                              <div className="text-xs text-gray-500 text-center py-1">

                                +{typeGoals.length - 2} more goals

                              </div>

                            )}

                          </div>



                          <Button

                            variant="outline"

                            size="sm"

                            className="w-full mt-4"

                            onClick={(e) => {

                              e.stopPropagation();

                              navigate(

                                `/goal-tracker?type=${encodeURIComponent(type)}`

                              );

                            }}

                            data-testid={`button-view-${type.toLowerCase()}`}

                          >

                            <BookOpen className="h-4 w-4 mr-2" />

                            View Categories

                          </Button>

                        </div>

                      </CardContent>

                    </Card>

                  );

                })}

              </div>



              {/* Import and use the existing GoalHeatMap component for real data */}

              <GoalHeatMap />



              {/* Progress Summary Charts */}

              <div className="space-y-8">

                <h2 className="text-2xl font-semibold text-gray-900 dark:text-gray-100">

                  Analytics Overview

                </h2>



                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">

                  {/* Progress by Goal Type Bar Chart */}

                  <Card>

                    <CardHeader>

                      <CardTitle className="flex items-center gap-2">

                        <TrendingUp className="h-5 w-5 text-blue-500" />

                        Progress by Goal Type

                      </CardTitle>

                    </CardHeader>

                    <CardContent>

                      <ApexGoalTypeBarChart goalsByType={goalsByType} />

                    </CardContent>

                  </Card>



                  {/* Overall Progress Pie Chart */}

                  <Card>

                    <CardHeader>

                      <CardTitle className="flex items-center gap-2">

                        <TrendingUp className="h-5 w-5 text-green-500" />

                        Progress Distribution

                      </CardTitle>

                    </CardHeader>

                    <CardContent>

                      <ApexGoalTypePieChart goalsByType={goalsByType} />

                    </CardContent>

                  </Card>

                </div>

              </div>

            </div>

          )}

        </div>

      </div>

    </div>

  );

}

goalcategoriesimport { useState, useMemo } from "react";

import { useQuery } from "@tanstack/react-query";

import { useAuth } from "@/hooks/useAuth";

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

import { Button } from "@/components/ui/button";

import { useToast } from "@/hooks/use-toast";

import { Progress } from "@/components/ui/progress";

import { Badge } from "@/components/ui/badge";

import {

  Select,

  SelectContent,

  SelectItem,

  SelectTrigger,

  SelectValue,

} from "@/components/ui/select";

import { ArrowLeft, Target, TrendingUp } from "lucide-react";

import Sidebar from "@/components/sidebar";

import ReactApexChart from 'react-apexcharts';

import { ApexOptions } from 'apexcharts';

import { navigate } from "wouter/use-browser-location";

import { useLocation } from "wouter";



// Interfaces

interface GoalTopic {

  id: string;

  categoryId: string;

  name: string;

  description?: string;

  totalSubtopics: number;

  completedSubtopics: number;

  createdAt: string;

  updatedAt: string;

}



interface GoalCategory {

  id: string;

  goalId: string;

  name: string;

  description?: string;

  totalTopics: number;

  completedTopics: number;

  createdAt: string;

}



interface ProgressDataPoint {

  date: string;

  [key: string]: number | string;

}



const TOPIC_COLORS = [

  "#3b82f6", // blue

  "#10b981", // green

  "#f59e0b", // yellow

  "#ef4444", // red

  "#8b5cf6", // purple

  "#f97316", // orange

  "#06b6d4", // cyan

  "#84cc16", // lime

];



// API functions

const fetchGoalCategory = async (goalId: string, categoryId: string) => {

  const response = await fetch(

    `/api/goals/${goalId}/categories/${categoryId}`,

    {

      credentials: "include",

    }

  );

  if (!response.ok) {

    throw new Error("Failed to fetch category");

  }

  return response.json();

};



const fetchCategoryTopics = async (categoryId: string) => {

  const response = await fetch(`/api/goal-categories/${categoryId}/topics`, {

    credentials: "include",

  });

  if (!response.ok) {

    throw new Error("Failed to fetch topics");

  }

  return response.json();

};



export default function CategoryTopics() {

  const { user } = useAuth();

  const { toast } = useToast();

  const [location] = useLocation();

  const currentYear = new Date().getFullYear();



  // Extract IDs from URL: /goal-tracker/{goalId}/category/{categoryId}

  const pathParts = location.split("/");

  const goalId = pathParts[2];

  const categoryId = pathParts[4];



  const [selectedYear, setSelectedYear] = useState<number>(currentYear);

  const [selectedMonth, setSelectedMonth] = useState<string>("all");



  // Fetch category details

  const {

    data: category,

    isLoading: categoryLoading,

    error: categoryError,

  } = useQuery({

    queryKey: ["category", goalId, categoryId],

    queryFn: () => fetchGoalCategory(goalId, categoryId),

    enabled: !!goalId && !!categoryId && !!user,

  });



  // Fetch topics for this category

  const {

    data: topics = [],

    isLoading: topicsLoading,

    error: topicsError,

  } = useQuery({

    queryKey: ["category-topics", categoryId],

    queryFn: () => fetchCategoryTopics(categoryId),

    enabled: !!categoryId && !!user,

  });



  const months = [

    { value: "all", label: "All Months" },

    { value: "01", label: "January" },

    { value: "02", label: "February" },

    { value: "03", label: "March" },

    { value: "04", label: "April" },

    { value: "05", label: "May" },

    { value: "06", label: "June" },

    { value: "07", label: "July" },

    { value: "08", label: "August" },

    { value: "09", label: "September" },

    { value: "10", label: "October" },

    { value: "11", label: "November" },

    { value: "12", label: "December" },

  ];



  const cumulativeProgressData = useMemo(() => {

    if (topics.length === 0) return [];



    const dataPoints: ProgressDataPoint[] = [];

    const startDate = new Date(

      selectedYear,

      selectedMonth === "all" ? 0 : parseInt(selectedMonth) - 1,

      1

    );

    const endDate =

      selectedMonth === "all"

        ? new Date(selectedYear, 11, 31)

        : new Date(selectedYear, parseInt(selectedMonth), 0);



    const current = new Date(startDate);



    while (current <= endDate) {

      const dateStr = current.toLocaleDateString("en-US", {

        month: "short",

        day: "2-digit",

      });



      const progressPoint: ProgressDataPoint = { date: dateStr };



      topics.forEach((topic: GoalTopic, index: number) => {

        // Simulate gradual progress over time for each topic

        const daysSinceStart = Math.floor(

          (current.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24)

        );

        const currentProgress = Math.min(

          topic.completedSubtopics,

          Math.floor((daysSinceStart / 30) * topic.completedSubtopics)

        );

        progressPoint[topic.name] = currentProgress;

      });



      dataPoints.push(progressPoint);

      current.setDate(current.getDate() + 1);

    }

    return dataPoints;

  }, [topics, selectedYear, selectedMonth]);



  const getStatusColor = (

    completedSubtopics: number,

    totalSubtopics: number

  ) => {

    if (completedSubtopics === totalSubtopics && totalSubtopics > 0) {

      return "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100";

    } else if (completedSubtopics > 0) {

      return "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-100";

    } else {

      return "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-100";

    }

  };



  const getStatusText = (

    completedSubtopics: number,

    totalSubtopics: number

  ) => {

    if (completedSubtopics === totalSubtopics && totalSubtopics > 0) {

      return "Completed";

    } else if (completedSubtopics > 0) {

      return "In Progress";

    } else {

      return "Not Started";

    }

  };



  if (!user) {

    return (

      <div className="flex h-screen bg-gray-50/50 dark:bg-gray-900/50">

        <Sidebar />

        <div className="flex-1 overflow-auto">

          <div className="container mx-auto p-6">

            <div className="text-center">Please log in to view topics.</div>

          </div>

        </div>

      </div>

    );

  }



  if (categoryLoading || topicsLoading) {

    return (

      <div className="flex h-screen bg-gray-50/50 dark:bg-gray-900/50">

        <Sidebar />

        <div className="flex-1 overflow-auto">

          <div className="container mx-auto p-6 space-y-6">

            <div className="animate-pulse space-y-4">

              <div className="h-8 bg-gray-200 rounded w-1/3"></div>

              <div className="h-64 bg-gray-200 rounded"></div>

            </div>

          </div>

        </div>

      </div>

    );

  }



  if (categoryError || topicsError || !category) {

    return (

      <div className="flex h-screen bg-gray-50/50 dark:bg-gray-900/50">

        <Sidebar />

        <div className="flex-1 overflow-auto">

          <div className="container mx-auto p-6">

            <div className="text-red-600 dark:text-red-400">

              Error loading data:{" "}

              {categoryError

                ? (categoryError as Error).message

                : (topicsError as Error).message}

            </div>

          </div>

        </div>

      </div>

    );

  }



  return (

    <div className="flex h-screen bg-gray-50/50 dark:bg-gray-900/50">

      <Sidebar />

      <div className="flex-1 overflow-auto">

        <header className="sticky top-0 z-30 bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-4 sm:px-6 lg:px-8 py-4">

          <div className="flex justify-between items-center">

            <div className="flex items-center space-x-4">

              <div>

                <h2 className="text-2xl sm:text-3xl font-bold text-gray-900 dark:text-white">

                  {category.name}

                </h2>

              </div>

            </div>

            <div className="flex items-center space-x-2 sm:space-x-4">

              <Button

                variant="ghost"

                size="sm"

                onClick={() => {

                  // Preserve the goal type when navigating back

                  const urlParams = new URLSearchParams(window.location.search);

                  const type = urlParams.get('type');

                  if (type) {

                    navigate(`/goal-tracker?type=${encodeURIComponent(type)}`);

                  } else {

                    navigate("/goal-tracker");

                  }

                }}

                className="flex items-center gap-2"

              >

                <ArrowLeft className="h-4 w-4" />

                Back to Categories

              </Button>

            </div>

          </div>

        </header>

        <div className="container mx-auto p-6 space-y-6">

          {/* Header */} {/* Topics Grid */}

          {topics.length > 0 ? (

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">

              {topics.map((topic: GoalTopic) => (

                <Card

                  key={topic.id}

                  className="cursor-pointer transition-all hover:shadow-lg"

                  onClick={() => navigate(`/subtopic/${topic.id}`)}

                >

                  <CardHeader>

                    <CardTitle className="flex items-center gap-2">

                      <Target className="h-5 w-5 text-blue-500" />

                      {topic.name}

                    </CardTitle>

                  </CardHeader>

                  <CardContent>

                    <div className="space-y-3">

                      <div>

                        <div className="flex justify-between items-center mb-2">

                          <span className="text-sm font-medium">Progress</span>

                          <span className="text-sm text-gray-600">

                            {topic.completedSubtopics} / {topic.totalSubtopics}

                          </span>

                        </div>

                        <Progress

                          value={

                            topic.totalSubtopics > 0

                              ? (topic.completedSubtopics /

                                  topic.totalSubtopics) *

                                100

                              : 0

                          }

                          className="h-2"

                        />

                      </div>

                      <div className="flex justify-between items-center text-sm">

                        <span className="text-gray-600">

                          {topic.totalSubtopics > 0

                            ? Math.round(

                                (topic.completedSubtopics /

                                  topic.totalSubtopics) *

                                  100

                              )

                            : 0}

                          % Complete

                        </span>

                        <Badge

                          className={getStatusColor(

                            topic.completedSubtopics,

                            topic.totalSubtopics

                          )}

                        >

                          {getStatusText(

                            topic.completedSubtopics,

                            topic.totalSubtopics

                          )}

                        </Badge>

                      </div>

                    </div>

                  </CardContent>

                </Card>

              ))}

            </div>

          ) : (

            <Card>

              <CardContent className="p-6 text-center">

                <Target className="h-12 w-12 text-gray-400 mx-auto mb-4" />

                <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-2">

                  No Topics Found

                </h3>

                <p className="text-gray-600 dark:text-gray-400">

                  This category doesn't have any topics yet.

                </p>

              </CardContent>

            </Card>

          )}

          {/* Study Performance Chart */}

          {topics.length > 0 && (

            <Card>

              <CardHeader>

                <div className="flex justify-between items-center">

                  <CardTitle className="flex items-center gap-2">

                    <TrendingUp className="h-5 w-5 text-blue-500" />

                    Study Performance

                  </CardTitle>

                  <div className="flex gap-4 items-center">

                    <div className="flex items-center gap-2">

                      <span className="text-sm">Year:</span>

                      <Select

                        value={selectedYear.toString()}

                        onValueChange={(value) =>

                          setSelectedYear(parseInt(value))

                        }

                      >

                        <SelectTrigger className="w-32">

                          <SelectValue />

                        </SelectTrigger>

                        <SelectContent>

                          {Array.from(

                            { length: 5 },

                            (_, i) => currentYear - i

                          ).map((year) => (

                            <SelectItem key={year} value={year.toString()}>

                              {year}

                            </SelectItem>

                          ))}

                        </SelectContent>

                      </Select>

                    </div>

                    <div className="flex items-center gap-2">

                      <span className="text-sm">Month:</span>

                      <Select

                        value={selectedMonth}

                        onValueChange={setSelectedMonth}

                      >

                        <SelectTrigger className="w-40">

                          <SelectValue />

                        </SelectTrigger>

                        <SelectContent>

                          {months.map((month) => (

                            <SelectItem key={month.value} value={month.value}>

                              {month.label}

                            </SelectItem>

                          ))}

                        </SelectContent>

                      </Select>

                    </div>

                  </div>

                </div>

                <p className="text-sm text-gray-600 dark:text-gray-400 pt-2">

                  This chart shows the cumulative number of subtopics you've

                  completed for each goal{" "}

                  {selectedMonth !== "all"

                    ? `in ${

                        months.find((m) => m.value === selectedMonth)?.label

                      } ${selectedYear}`

                    : `in ${selectedYear}`}

                  .

                </p>

              </CardHeader>

              <CardContent>

                {cumulativeProgressData.length > 0 ? (

                  <div className="h-80">

                    <ReactApexChart

                      options={{

                        chart: {

                          type: 'line',

                          stacked: false,

                          height: 320,

                          zoom: { type: 'x', enabled: true, autoScaleYaxis: true },

                          toolbar: { autoSelected: 'zoom' },

                        },

                        dataLabels: { enabled: false },

                        stroke: { curve: 'stepline', width: 2 },

                        title: {

                          text: 'Real Topic Progress',

                          align: 'left'

                        },

                        markers: { size: 0 },

                        yaxis: {

                          title: { text: 'Completed Subtopics' },

                          labels: { formatter: (val) => val.toFixed(0) },

                        },

                        xaxis: {

                          type: 'datetime',

                          categories: cumulativeProgressData.map(item => item.date)

                        },

                        tooltip: {

                          shared: false,

                          y: { formatter: (val) => `${val.toFixed(0)} completed` },

                          x: { format: 'dd MMM yyyy' }

                        },

                        colors: TOPIC_COLORS,

                        legend: { position: 'bottom' }

                      } as ApexOptions}

                      series={topics.map((topic: GoalTopic, index: number) => ({

                        name: topic.name,

                        data: cumulativeProgressData.map(item => item[topic.name] as number || 0)

                      }))}

                      type="line"

                      height={320}

                    />

                  </div>

                ) : (

                  <div className="h-80 flex items-center justify-center text-gray-500">

                    No topic completion data available for the selected period.

                  </div>

                )}

              </CardContent>

            </Card>

          )}

        </div>

      </div>

    </div>

  );

}




Show thinking
Yes, I can see the issue. The graphs are showing different data because each page is processing a different set of data with different logic.

Your main goals page, the "SSC CGL" page, and the "Part B: Aptitude" page are all using separate logic to generate their charts, which is why they don't match up. The core problem is that the data transformations are happening independently on each page.

To fix this and ensure your chart shows the correct, incremental progress based on the actual completion dates you provided, we need to standardize the logic. I will provide the updated code that uses the real completion timestamps from your database to generate a consistent and accurate chart across your application.

The Problem
Inconsistent Data Handling: Your /api/goals response doesn't include the completedSubtopicTimestamps for each category, which is essential for accurate plotting. The frontend is left to guess or simulate the progress.

Simulation vs. Reality: The different pages use different simulation logic. The main dashboard seems to plot the totals correctly, but the detail pages are generating placeholder data that doesn't reflect reality.

The Solution
I will provide the corrected code for the CategoryTopics page (the detailed view like your "SSC CGL" screenshot). This new code will:

Expect Real Data: It assumes your API will be updated to send the completedSubtopicTimestamps for each topic.

Use Correct Logic: It processes these real timestamps to create a true, incremental step chart showing exactly when tasks were completed.

Use ApexCharts: It implements this using the zoomable ApexCharts component as we discussed.

Here is the updated CategoryTopics.tsx file.

CategoryTopics.tsx (Corrected Code)
TypeScript

import React, { useState, useMemo } from "react";
import { useQuery } from "@tanstack/react-query";
import { useAuth } from "@/hooks/useAuth";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { ArrowLeft, Target, TrendingUp } from "lucide-react";
import Sidebar from "@/components/sidebar";
import ReactApexChart from 'react-apexcharts';
import { ApexOptions } from 'apexcharts';
import { navigate, useLocation } from "wouter";

// --- INTERFACES (Updated to expect timestamps) ---
interface GoalTopic {
  id: string;
  categoryId: string;
  name: string;
  description?: string;
  totalSubtopics: number;
  completedSubtopics: number;
  createdAt: string;
  completedSubtopicTimestamps?: string[]; // <-- Crucial for the chart
}

interface GoalCategory {
  id: string;
  goalId: string;
  name: string;
}

// --- APEXCHART COMPONENT (For accurate, incremental plotting) ---
const ApexTopicProgressChart: React.FC<{ topics: GoalTopic[] }> = ({ topics }) => {
    const chartState = useMemo(() => {
        const series = topics.map(topic => ({
            name: topic.name,
            data: [] as [number, number][],
        }));

        // Flatten all timestamps from all topics
        const allTimestamps = topics.flatMap(topic => 
            (topic.completedSubtopicTimestamps || []).map(ts => ({
                topicName: topic.name,
                timestamp: new Date(ts),
            }))
        ).sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());

        const cumulativeCounts: { [key: string]: number } = {};
        topics.forEach(topic => (cumulativeCounts[topic.name] = 0));
        
        // Add a starting point for each series
        topics.forEach(topic => {
            const seriesIndex = series.findIndex(s => s.name === topic.name);
            if (seriesIndex > -1) {
                const startDate = new Date(topic.createdAt).getTime();
                series[seriesIndex].data.push([startDate, 0]);
            }
        });

        // Build the incremental data points
        allTimestamps.forEach(({ topicName, timestamp }) => {
            cumulativeCounts[topicName]++;
            const seriesIndex = series.findIndex(s => s.name === topicName);
            if (seriesIndex > -1) {
                series[seriesIndex].data.push([timestamp.getTime(), cumulativeCounts[topicName]]);
            }
        });
        
        // Ensure all lines extend to the final timestamp
        if (allTimestamps.length > 0) {
            const lastTimestamp = allTimestamps[allTimestamps.length - 1].timestamp.getTime();
            series.forEach(s => {
                if (s.data.length > 0 && s.data[s.data.length - 1][0] < lastTimestamp) {
                    s.data.push([lastTimestamp, s.data[s.data.length - 1][1]]);
                }
            });
        }

        return { series };
    }, [topics]);
    
    const options: ApexOptions = {
        chart: { type: 'area', stacked: false, height: 350, zoom: { enabled: true }, toolbar: { autoSelected: 'zoom' } },
        dataLabels: { enabled: false },
        markers: { size: 0 },
        title: { text: 'Real Topic Progress', align: 'left' },
        fill: { type: 'gradient', gradient: { opacityFrom: 0.6, opacityTo: 0.1 } },
        yaxis: { title: { text: 'Completed Subtopics' }, labels: { formatter: (val) => val.toFixed(0) } },
        xaxis: { type: 'datetime' },
        tooltip: { shared: false, y: { formatter: (val) => val.toFixed(0) } },
        stroke: { curve: 'stepline' }
    };

    return <ReactApexChart options={options} series={chartState.series} type="area" height={350} />;
};

// ... (API functions `fetchGoalCategory`, `fetchCategoryTopics` remain the same)

export default function CategoryTopics() {
  // ... (All existing hooks and state remain the same)
  // ...

  return (
    <div className="flex h-screen bg-gray-50/50 dark:bg-gray-900/50">
      <Sidebar />
      <div className="flex-1 overflow-auto">
        <header> {/* ... (Header is the same) ... */} </header>
        <div className="container mx-auto p-6 space-y-6">
          {/* ... (Topic cards grid is the same) ... */}

          {/* Study Performance Chart */}
          {topics.length > 0 && (
            <Card>
              <CardHeader>
                {/* ... (CardHeader content is the same) ... */}
              </CardHeader>
              <CardContent>
                {/* Use the new, accurate ApexChart component */}
                <ApexTopicProgressChart topics={topics} />
              </CardContent>
            </Card>
          )}
        </div>
      </div>
    </div>
  );
}








See the logic is ; goalstart page graph need to show the datas of different CSV (main goals) added eg: tnpsc ,ssc. Within that goaltrackerpage: shows graph of different categories eg: Part A: General Studiestnpsc

Part B: Aptitude & Mental Ability

Part C: General Tamil. And within that categorytopics page: show graph of different subtopics eg: Unit 1: General Science

Unit II: Geography of India

Unit III: History & Culture

Unit IV: Indian Polity

Unit V: Economy & TN Admin

Unit VI: TN History & Culture

But the graphs are not correctly showing




Show thinking
Of course. I understand the issue completely. The graphs on your different pages are not matching because the data isn't being correctly aggregated and passed down from one level to the next.

The core of the problem is that each page's chart is currently using simulated or improperly scoped data instead of rolling up the actual completion timestamps from the levels below it.

To fix this and make all your charts accurate and consistent, we need to ensure the data flows correctly from your database all the way to each chart.

The Solution: Standardize Your Data Flow
Here is the step-by-step guide to fix the logic for each of your pages.

1. Backend API Fix (Crucial)
Your API must provide the completedSubtopicTimestamps at every level. Your /api/goals response should be structured like this, with timestamps nested all the way down:

JSON

[
  {
    "id": "tnpsc-goal-id",
    "name": "tnpsc",
    "completedSubtopics": 7,
    "totalSubtopics": 111,
    "completedSubtopicTimestamps": [ // Aggregated from all categories below
        "2025-08-27T13:46:35.216Z",
        "2025-08-27T13:46:36.441Z",
        // ... all 7 timestamps
    ],
    "categories": [
      {
        "id": "part-a-id",
        "name": "Part A: General Studies",
        "completedSubtopics": 6,
        "completedSubtopicTimestamps": [ // Aggregated from all topics below
            "2025-08-27T13:46:35.216Z",
            // ... all 6 timestamps for this category
        ],
        "topics": [
          {
            "id": "gen-science-id",
            "name": "Unit 1: General Science",
            "completedSubtopics": 2,
            "completedSubtopicTimestamps": [ // Actual timestamps for this topic
                "2025-08-27T13:46:35.216Z",
                "2025-08-27T13:46:36.441Z"
            ]
          }
          // ... other topics
        ]
      }
      // ... other categories
    ]
  }
  // ... other goals like "ssc"
]
2. GoalStart Page (Main Dashboard)
This page should show the progress of each main goal (e.g., "tnpsc" vs. "ssc"). The chart logic needs to process the aggregated timestamps for each goal.

Here is the corrected ApexProgressChart component for your GoalStart.tsx file:

TypeScript

const ApexProgressChart: React.FC<{ goals: Goal[] }> = ({ goals }) => {
    
    const chartState = useMemo(() => {
        // Each series will represent a main goal (tnpsc, ssc)
        const series = goals.map(goal => ({
            name: goal.name,
            data: [] as [number, number][],
        }));

        // Process each goal's aggregated timestamps
        goals.forEach((goal, index) => {
            const timestamps = (goal.completedSubtopicTimestamps || [])
                .map(ts => new Date(ts))
                .sort((a, b) => a.getTime() - b.getTime());

            let cumulativeCount = 0;
            
            // Add a starting point at the goal's creation date
            series[index].data.push([new Date(goal.createdAt).getTime(), 0]);

            // Create the incremental data points
            timestamps.forEach(ts => {
                cumulativeCount++;
                series[index].data.push([ts.getTime(), cumulativeCount]);
            });
        });

        return { series };
    }, [goals]);
    
    const options: ApexOptions = {
        chart: { type: 'area', height: 350, zoom: { enabled: true }, toolbar: { autoSelected: 'zoom' } },
        title: { text: 'Real Goal Progress Over Time' },
        stroke: { curve: 'stepline' },
        // ... other options from your template
    };

    return <ReactApexChart options={options} series={chartState.series} type="area" height={350} />;
};
3. CategoryTopics Page (Most Detailed View)
This page should show the progress of each topic within a single category (e.g., "Unit 1: General Science" vs. "Unit II: Geography"). The logic is nearly identical but operates on the topics array of a single category.

Here is the corrected ApexProgressChart component for your CategoryTopics.tsx file:

TypeScript

const ApexTopicProgressChart: React.FC<{ topics: GoalTopic[] }> = ({ topics }) => {
    
    const chartState = useMemo(() => {
        // Each series will represent a Topic (Unit 1, Unit II, etc.)
        const series = topics.map(topic => ({
            name: topic.name,
            data: [] as [number, number][],
        }));

        // Process each topic's timestamps
        topics.forEach((topic, index) => {
            const timestamps = (topic.completedSubtopicTimestamps || [])
                .map(ts => new Date(ts))
                .sort((a, b) => a.getTime() - b.getTime());

            let cumulativeCount = 0;

            // Add a starting point
            series[index].data.push([new Date(topic.createdAt).getTime(), 0]);

            // Create incremental data points
            timestamps.forEach(ts => {
                cumulativeCount++;
                series[index].data.push([ts.getTime(), cumulativeCount]);
            });
        });

        return { series };
    }, [topics]);
    
    const options: ApexOptions = {
        chart: { type: 'area', height: 350, zoom: { enabled: true }, toolbar: { autoSelected: 'zoom' } },
        title: { text: 'Real Topic Progress' },
        stroke: { curve: 'stepline' },
        // ... other options from your template
    };

    return <ReactApexChart options={options} series={chartState.series} type="area" height={350} />;
};
By making these changes, you ensure that the data is correctly aggregated and passed down. Your GoalStart page will show the total progress of each goal, and when you click into a goal and then a category, the chart will accurately reflect the detailed progress of the topics within it.







Give the detailed Prompt to fix this by Ai agent



Show thinking
Of course. Here is a detailed prompt that you can provide to an AI agent to fix the issues with your goal tracking dashboards.

AI Agent Prompt
Persona: You are an expert React developer specializing in data visualization with libraries like ApexCharts and TanStack Query.

High-Level Objective:

Refactor a three-level goal tracking application to fix inconsistent and inaccurate data visualizations. The goal is to ensure that all charts, from the main dashboard down to the most detailed view, are driven by real, incremental data based on subtopic completion timestamps from the backend. All charts must be consistent and accurately reflect the user's progress.

Problem Context:

The application has three main pages for tracking study goals:

GoalStart.tsx (Main Dashboard): Displays a summary of top-level goals (e.g., "TNPSC", "SSC"). It should have a chart comparing the cumulative progress of these goals over time.

GoalTracker.tsx (Category View): When a user clicks on a goal (e.g., "TNPSC"), this page shows the different categories within that goal (e.g., "Part A: General Studies", "Part B: Aptitude"). It should have a chart comparing the progress of these categories.

CategoryTopics.tsx (Topic View): When a user clicks on a category (e.g., "Part A: General Studies"), this page shows the topics within it (e.g., "Unit 1: General Science", "Unit II: Geography"). It should have a chart comparing the progress of these topics.

The core issue is that the charts on these pages are currently incorrect. They use simulated data or improperly scoped data, leading to inconsistencies. For example, the CategoryTopics page shows a flat line even though subtopics have been completed on specific dates. The charts do not reflect the actual completed_at timestamps from the database.

Part 1: Define the Required API Data Structure (Backend Prerequisite)
The fundamental problem is that the frontend doesn't receive the necessary data. Before fixing the frontend, specify that the /api/goals endpoint must be updated to return a nested JSON object where completedSubtopicTimestamps are aggregated at each level.

Required JSON structure for /api/goals response:

JSON

[
  {
    "id": "goal-id-1",
    "name": "tnpsc",
    "completedSubtopicTimestamps": [ /* An array of all completion timestamps from all categories below */ ],
    "categories": [
      {
        "id": "category-id-1",
        "name": "Part A: General Studies",
        "completedSubtopicTimestamps": [ /* An array of all completion timestamps from all topics below */ ],
        "topics": [
          {
            "id": "topic-id-1",
            "name": "Unit 1: General Science",
            "createdAt": "2025-07-15T00:00:00.000Z",
            "completedSubtopicTimestamps": [ /* Actual timestamps for this topic */
                "2025-08-27T13:46:35.216Z",
                "2025-08-27T13:46:36.441Z"
            ]
          }
        ]
      }
    ]
  }
]
Part 2: Refactor the Frontend Components
Update the three React components to use this new data structure and a standardized ApexProgressChart component.

Technical Chart Requirements:

Library: Use react-apexcharts.

Type: Use an area chart.

Functionality: The chart must be zoomable and pannable on the x-axis.

Appearance: Use a 'stepline' curve (stroke: { curve: 'stepline' }) to accurately represent incremental progress.

Logic: The chart's data series must be generated by processing the completedSubtopicTimestamps array. The logic should sort all timestamps chronologically and build a cumulative count over time. Do not use any data simulation.

Task 1: Refactor GoalStart.tsx (Main Dashboard)
Update the Goal interface to include the completedSubtopicTimestamps?: string[] field.

Create an ApexProgressChart component within this file.

This chart component will accept goals: Goal[] as a prop.

Inside the component, create a useMemo hook to transform the goals prop into the series format required by ApexCharts. Each goal (e.g., "tnpsc", "ssc") should be its own series.

The data for each series must be an array of [timestamp, cumulative_count] tuples, derived from the goal.completedSubtopicTimestamps array.

Replace the old chart with this new <ApexProgressChart goals={goals} />.

Task 2: Refactor GoalTracker.tsx (Category View)
Update the GoalCategory interface to include completedSubtopicTimestamps?: string[].

Create a similar ApexProgressChart component.

This chart component will accept categories: GoalCategory[] as a prop.

The logic will be nearly identical to Task 1, but it will operate on the allCategories array and use category.completedSubtopicTimestamps to generate the series. Each category will be its own line on the chart.

Replace the old chart with <ApexProgressChart categories={allCategories} />.

Task 3: Refactor CategoryTopics.tsx (Topic View)
Update the GoalTopic interface to include completedSubtopicTimestamps?: string[].

Create a similar ApexTopicProgressChart component.

This chart component will accept topics: GoalTopic[] as a prop.

The logic will operate on the topics array and use topic.completedSubtopicTimestamps to generate the series. Each topic will be its own line on the chart.

Replace the old chart with <ApexTopicProgressChart topics={topics} />.

Deliverable: Provide the complete, refactored code for all three files: GoalStart.tsx, GoalTracker.tsx, and CategoryTopics.tsx. The code should be clean, well-commented, and directly address the data inconsistency issues.